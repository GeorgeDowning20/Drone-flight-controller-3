
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c84  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  08010e68  08010e68  00020e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011488  08011488  000309fc  2**0
                  CONTENTS
  4 .ARM          00000008  08011488  08011488  00021488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011490  08011490  000309fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011490  08011490  00021490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011498  08011498  00021498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009fc  20000000  0801149c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c4  200009fc  08011e98  000309fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bc0  08011e98  00031bc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000309fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000217eb  00000000  00000000  00030a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004663  00000000  00000000  00052217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  00056880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001458  00000000  00000000  00057ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002655c  00000000  00000000  00059318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d328  00000000  00000000  0007f874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1298  00000000  00000000  0009cb9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017de34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072bc  00000000  00000000  0017de88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200009fc 	.word	0x200009fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010e4c 	.word	0x08010e4c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000a00 	.word	0x20000a00
 800021c:	08010e4c 	.word	0x08010e4c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <updateIMU>:
	void GetAccNEU (void);
	//updateIMU(imu_t * data);


void updateIMU(imu_t * data)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b092      	sub	sp, #72	; 0x48
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	float qa, qb, qc;
	float gx, gy, gz, ax, ay, az;
	float integralFBx,integralFBy,integralFBz;


	ax = data->accx / 4096;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	ed93 7a06 	vldr	s14, [r3, #24]
 8000f9e:	eddf 6ae0 	vldr	s13, [pc, #896]	; 8001320 <updateIMU+0x390>
 8000fa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fa6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	ay = data->accy / 4096;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	ed93 7a07 	vldr	s14, [r3, #28]
 8000fb0:	eddf 6adb 	vldr	s13, [pc, #876]	; 8001320 <updateIMU+0x390>
 8000fb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	az = data->accz / 4096;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	ed93 7a08 	vldr	s14, [r3, #32]
 8000fc2:	eddf 6ad7 	vldr	s13, [pc, #860]	; 8001320 <updateIMU+0x390>
 8000fc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fca:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		accelBF.x = ax;
 8000fce:	4ad5      	ldr	r2, [pc, #852]	; (8001324 <updateIMU+0x394>)
 8000fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fd2:	6013      	str	r3, [r2, #0]
		accelBF.y = ay;
 8000fd4:	4ad3      	ldr	r2, [pc, #844]	; (8001324 <updateIMU+0x394>)
 8000fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd8:	6053      	str	r3, [r2, #4]
		accelBF.z = az;
 8000fda:	4ad2      	ldr	r2, [pc, #840]	; (8001324 <updateIMU+0x394>)
 8000fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fde:	6093      	str	r3, [r2, #8]

		gx = (data->gyrx/16.38375f)*0.0349066;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000fe6:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 8001328 <updateIMU+0x398>
 8000fea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fee:	ee16 0a90 	vmov	r0, s13
 8000ff2:	f7ff fad1 	bl	8000598 <__aeabi_f2d>
 8000ff6:	a3c8      	add	r3, pc, #800	; (adr r3, 8001318 <updateIMU+0x388>)
 8000ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffc:	f7ff fb24 	bl	8000648 <__aeabi_dmul>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4610      	mov	r0, r2
 8001006:	4619      	mov	r1, r3
 8001008:	f7ff fdf6 	bl	8000bf8 <__aeabi_d2f>
 800100c:	4603      	mov	r3, r0
 800100e:	647b      	str	r3, [r7, #68]	; 0x44
		gy = (data->gyry/16.38375f)*0.0349066;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001016:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8001328 <updateIMU+0x398>
 800101a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800101e:	ee16 0a90 	vmov	r0, s13
 8001022:	f7ff fab9 	bl	8000598 <__aeabi_f2d>
 8001026:	a3bc      	add	r3, pc, #752	; (adr r3, 8001318 <updateIMU+0x388>)
 8001028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102c:	f7ff fb0c 	bl	8000648 <__aeabi_dmul>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	f7ff fdde 	bl	8000bf8 <__aeabi_d2f>
 800103c:	4603      	mov	r3, r0
 800103e:	643b      	str	r3, [r7, #64]	; 0x40
		gz = (data->gyrz/16.38375f)*0.0349066;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001046:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8001328 <updateIMU+0x398>
 800104a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800104e:	ee16 0a90 	vmov	r0, s13
 8001052:	f7ff faa1 	bl	8000598 <__aeabi_f2d>
 8001056:	a3b0      	add	r3, pc, #704	; (adr r3, 8001318 <updateIMU+0x388>)
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	f7ff faf4 	bl	8000648 <__aeabi_dmul>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	f7ff fdc6 	bl	8000bf8 <__aeabi_d2f>
 800106c:	4603      	mov	r3, r0
 800106e:	63fb      	str	r3, [r7, #60]	; 0x3c





	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001070:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001074:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107c:	d10e      	bne.n	800109c <updateIMU+0x10c>
 800107e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001082:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108a:	d107      	bne.n	800109c <updateIMU+0x10c>
 800108c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001090:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	f000 80c5 	beq.w	8001226 <updateIMU+0x296>

		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800109c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80010a0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80010a4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80010a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010b0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80010b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010bc:	eeb0 0a67 	vmov.f32	s0, s15
 80010c0:	f000 f9f0 	bl	80014a4 <invSqrt>
 80010c4:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
		ax *= recipNorm;
 80010c8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80010cc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		ay *= recipNorm;
 80010d8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80010dc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		az *= recipNorm;
 80010e8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80010ec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		halfvx = q1 * q3 - q0 * q2;
 80010f8:	4b8c      	ldr	r3, [pc, #560]	; (800132c <updateIMU+0x39c>)
 80010fa:	ed93 7a00 	vldr	s14, [r3]
 80010fe:	4b8c      	ldr	r3, [pc, #560]	; (8001330 <updateIMU+0x3a0>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001108:	4b8a      	ldr	r3, [pc, #552]	; (8001334 <updateIMU+0x3a4>)
 800110a:	edd3 6a00 	vldr	s13, [r3]
 800110e:	4b8a      	ldr	r3, [pc, #552]	; (8001338 <updateIMU+0x3a8>)
 8001110:	edd3 7a00 	vldr	s15, [r3]
 8001114:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001118:	ee77 7a67 	vsub.f32	s15, s14, s15
 800111c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		halfvy = q0 * q1 + q2 * q3;
 8001120:	4b84      	ldr	r3, [pc, #528]	; (8001334 <updateIMU+0x3a4>)
 8001122:	ed93 7a00 	vldr	s14, [r3]
 8001126:	4b81      	ldr	r3, [pc, #516]	; (800132c <updateIMU+0x39c>)
 8001128:	edd3 7a00 	vldr	s15, [r3]
 800112c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001130:	4b81      	ldr	r3, [pc, #516]	; (8001338 <updateIMU+0x3a8>)
 8001132:	edd3 6a00 	vldr	s13, [r3]
 8001136:	4b7e      	ldr	r3, [pc, #504]	; (8001330 <updateIMU+0x3a0>)
 8001138:	edd3 7a00 	vldr	s15, [r3]
 800113c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001144:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		halfvz = q0 * q0 - 0.5f + q3 * q3;
 8001148:	4b7a      	ldr	r3, [pc, #488]	; (8001334 <updateIMU+0x3a4>)
 800114a:	ed93 7a00 	vldr	s14, [r3]
 800114e:	4b79      	ldr	r3, [pc, #484]	; (8001334 <updateIMU+0x3a4>)
 8001150:	edd3 7a00 	vldr	s15, [r3]
 8001154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001158:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800115c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001160:	4b73      	ldr	r3, [pc, #460]	; (8001330 <updateIMU+0x3a0>)
 8001162:	edd3 6a00 	vldr	s13, [r3]
 8001166:	4b72      	ldr	r3, [pc, #456]	; (8001330 <updateIMU+0x3a0>)
 8001168:	edd3 7a00 	vldr	s15, [r3]
 800116c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001174:	edc7 7a08 	vstr	s15, [r7, #32]

		halfex = (ay * halfvz - az * halfvy);
 8001178:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800117c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001180:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001184:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001188:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800118c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001190:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001194:	edc7 7a07 	vstr	s15, [r7, #28]
		halfey = (az * halfvx - ax * halfvz);
 8001198:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800119c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011a4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80011a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80011ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b4:	edc7 7a06 	vstr	s15, [r7, #24]
		halfez = (ax * halfvy - ay * halfvx);
 80011b8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80011bc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80011c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80011c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d4:	edc7 7a05 	vstr	s15, [r7, #20]
		//gx += integralFBx;	// apply integral feedback
		//gy += integralFBy;
		//gz += integralFBz;


		gx += twoKp * halfex;
 80011d8:	4b58      	ldr	r3, [pc, #352]	; (800133c <updateIMU+0x3ac>)
 80011da:	ed93 7a00 	vldr	s14, [r3]
 80011de:	edd7 7a07 	vldr	s15, [r7, #28]
 80011e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e6:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80011ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ee:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		gy += twoKp * halfey;
 80011f2:	4b52      	ldr	r3, [pc, #328]	; (800133c <updateIMU+0x3ac>)
 80011f4:	ed93 7a00 	vldr	s14, [r3]
 80011f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80011fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001200:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001208:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		gz += twoKp * halfez;
 800120c:	4b4b      	ldr	r3, [pc, #300]	; (800133c <updateIMU+0x3ac>)
 800120e:	ed93 7a00 	vldr	s14, [r3]
 8001212:	edd7 7a05 	vldr	s15, [r7, #20]
 8001216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800121a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800121e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001222:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	}


	gx *= (0.5f * invSampleFreq);
 8001226:	4b46      	ldr	r3, [pc, #280]	; (8001340 <updateIMU+0x3b0>)
 8001228:	edd3 7a00 	vldr	s15, [r3]
 800122c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001234:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800123c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	gy *= (0.5f * invSampleFreq);
 8001240:	4b3f      	ldr	r3, [pc, #252]	; (8001340 <updateIMU+0x3b0>)
 8001242:	edd3 7a00 	vldr	s15, [r3]
 8001246:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800124a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800124e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001256:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	gz *= (0.5f * invSampleFreq);
 800125a:	4b39      	ldr	r3, [pc, #228]	; (8001340 <updateIMU+0x3b0>)
 800125c:	edd3 7a00 	vldr	s15, [r3]
 8001260:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001268:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800126c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001270:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	qa = q0;
 8001274:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <updateIMU+0x3a4>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	613b      	str	r3, [r7, #16]
	qb = q1;
 800127a:	4b2c      	ldr	r3, [pc, #176]	; (800132c <updateIMU+0x39c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	60fb      	str	r3, [r7, #12]
	qc = q2;
 8001280:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <updateIMU+0x3a8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	60bb      	str	r3, [r7, #8]
	q0 += (-qb * gx - qc * gy - q3 * gz);
 8001286:	edd7 7a03 	vldr	s15, [r7, #12]
 800128a:	eeb1 7a67 	vneg.f32	s14, s15
 800128e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001292:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001296:	edd7 6a02 	vldr	s13, [r7, #8]
 800129a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800129e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012a6:	4b22      	ldr	r3, [pc, #136]	; (8001330 <updateIMU+0x3a0>)
 80012a8:	edd3 6a00 	vldr	s13, [r3]
 80012ac:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80012b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012b8:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <updateIMU+0x3a4>)
 80012ba:	edd3 7a00 	vldr	s15, [r3]
 80012be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <updateIMU+0x3a4>)
 80012c4:	edc3 7a00 	vstr	s15, [r3]
	q1 += (qa * gx + qc * gz - q3 * gy);
 80012c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80012cc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80012d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012d4:	edd7 6a02 	vldr	s13, [r7, #8]
 80012d8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80012dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <updateIMU+0x3a0>)
 80012e6:	edd3 6a00 	vldr	s13, [r3]
 80012ea:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80012ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <updateIMU+0x39c>)
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <updateIMU+0x39c>)
 8001302:	edc3 7a00 	vstr	s15, [r3]
	q2 += (qa * gy - qb * gz + q3 * gx);
 8001306:	ed97 7a04 	vldr	s14, [r7, #16]
 800130a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800130e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001312:	edd7 6a03 	vldr	s13, [r7, #12]
 8001316:	e015      	b.n	8001344 <updateIMU+0x3b4>
 8001318:	22d4405f 	.word	0x22d4405f
 800131c:	3fa1df47 	.word	0x3fa1df47
 8001320:	45800000 	.word	0x45800000
 8001324:	200012f8 	.word	0x200012f8
 8001328:	418311ec 	.word	0x418311ec
 800132c:	20000a1c 	.word	0x20000a1c
 8001330:	20000a20 	.word	0x20000a20
 8001334:	20000a18 	.word	0x20000a18
 8001338:	20000004 	.word	0x20000004
 800133c:	20000000 	.word	0x20000000
 8001340:	20000008 	.word	0x20000008
 8001344:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001348:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800134c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001350:	4b4e      	ldr	r3, [pc, #312]	; (800148c <updateIMU+0x4fc>)
 8001352:	edd3 6a00 	vldr	s13, [r3]
 8001356:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800135a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800135e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001362:	4b4b      	ldr	r3, [pc, #300]	; (8001490 <updateIMU+0x500>)
 8001364:	edd3 7a00 	vldr	s15, [r3]
 8001368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136c:	4b48      	ldr	r3, [pc, #288]	; (8001490 <updateIMU+0x500>)
 800136e:	edc3 7a00 	vstr	s15, [r3]
	q3 += (qa * gz + qb * gy - qc * gx);
 8001372:	ed97 7a04 	vldr	s14, [r7, #16]
 8001376:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800137a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800137e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001382:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001386:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800138a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800138e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001392:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800139a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800139e:	4b3b      	ldr	r3, [pc, #236]	; (800148c <updateIMU+0x4fc>)
 80013a0:	edd3 7a00 	vldr	s15, [r3]
 80013a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a8:	4b38      	ldr	r3, [pc, #224]	; (800148c <updateIMU+0x4fc>)
 80013aa:	edc3 7a00 	vstr	s15, [r3]

	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80013ae:	4b39      	ldr	r3, [pc, #228]	; (8001494 <updateIMU+0x504>)
 80013b0:	ed93 7a00 	vldr	s14, [r3]
 80013b4:	4b37      	ldr	r3, [pc, #220]	; (8001494 <updateIMU+0x504>)
 80013b6:	edd3 7a00 	vldr	s15, [r3]
 80013ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013be:	4b36      	ldr	r3, [pc, #216]	; (8001498 <updateIMU+0x508>)
 80013c0:	edd3 6a00 	vldr	s13, [r3]
 80013c4:	4b34      	ldr	r3, [pc, #208]	; (8001498 <updateIMU+0x508>)
 80013c6:	edd3 7a00 	vldr	s15, [r3]
 80013ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013d2:	4b2f      	ldr	r3, [pc, #188]	; (8001490 <updateIMU+0x500>)
 80013d4:	edd3 6a00 	vldr	s13, [r3]
 80013d8:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <updateIMU+0x500>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013e6:	4b29      	ldr	r3, [pc, #164]	; (800148c <updateIMU+0x4fc>)
 80013e8:	edd3 6a00 	vldr	s13, [r3]
 80013ec:	4b27      	ldr	r3, [pc, #156]	; (800148c <updateIMU+0x4fc>)
 80013ee:	edd3 7a00 	vldr	s15, [r3]
 80013f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fa:	eeb0 0a67 	vmov.f32	s0, s15
 80013fe:	f000 f851 	bl	80014a4 <invSqrt>
 8001402:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	q0 *= recipNorm;
 8001406:	4b23      	ldr	r3, [pc, #140]	; (8001494 <updateIMU+0x504>)
 8001408:	ed93 7a00 	vldr	s14, [r3]
 800140c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001414:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <updateIMU+0x504>)
 8001416:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 800141a:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <updateIMU+0x508>)
 800141c:	ed93 7a00 	vldr	s14, [r3]
 8001420:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <updateIMU+0x508>)
 800142a:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <updateIMU+0x500>)
 8001430:	ed93 7a00 	vldr	s14, [r3]
 8001434:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <updateIMU+0x500>)
 800143e:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <updateIMU+0x4fc>)
 8001444:	ed93 7a00 	vldr	s14, [r3]
 8001448:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800144c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <updateIMU+0x4fc>)
 8001452:	edc3 7a00 	vstr	s15, [r3]

	ref.q0 = q0;
 8001456:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <updateIMU+0x504>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a10      	ldr	r2, [pc, #64]	; (800149c <updateIMU+0x50c>)
 800145c:	6013      	str	r3, [r2, #0]
	ref.q1 = q1;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <updateIMU+0x508>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a0e      	ldr	r2, [pc, #56]	; (800149c <updateIMU+0x50c>)
 8001464:	6053      	str	r3, [r2, #4]
	ref.q2 = q2;
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <updateIMU+0x500>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a0c      	ldr	r2, [pc, #48]	; (800149c <updateIMU+0x50c>)
 800146c:	6093      	str	r3, [r2, #8]
	ref.q3 = q3;
 800146e:	4b07      	ldr	r3, [pc, #28]	; (800148c <updateIMU+0x4fc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <updateIMU+0x50c>)
 8001474:	60d3      	str	r3, [r2, #12]

	computeAngles();
 8001476:	f000 f865 	bl	8001544 <computeAngles>
	GetAccNEU();
 800147a:	f000 f9f9 	bl	8001870 <GetAccNEU>
	//PredictionZ();
	//update_pos_z();



	getZ(&NavAlt);
 800147e:	4808      	ldr	r0, [pc, #32]	; (80014a0 <updateIMU+0x510>)
 8001480:	f000 fa52 	bl	8001928 <getZ>


	// iiaccx = iaccx + 0.999*(iiaccx);
	//iiaccy = iaccy+ 0.999*(iiaccy);
	//iiaccz = (iaccz+ 0.999*(iiaccz));
}
 8001484:	bf00      	nop
 8001486:	3748      	adds	r7, #72	; 0x48
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000a20 	.word	0x20000a20
 8001490:	20000004 	.word	0x20000004
 8001494:	20000a18 	.word	0x20000a18
 8001498:	20000a1c 	.word	0x20000a1c
 800149c:	20001334 	.word	0x20001334
 80014a0:	20001454 	.word	0x20001454

080014a4 <invSqrt>:

float invSqrt(float x)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80014ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80014b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ba:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80014c2:	f107 0310 	add.w	r3, r7, #16
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	105a      	asrs	r2, r3, #1
 80014ce:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <invSqrt+0x9c>)
 80014d0:	1a9b      	subs	r3, r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80014dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80014e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80014e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80014ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80014f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80014fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001500:	edc7 7a04 	vstr	s15, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001504:	ed97 7a04 	vldr	s14, [r7, #16]
 8001508:	edd7 7a05 	vldr	s15, [r7, #20]
 800150c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001510:	edd7 7a04 	vldr	s15, [r7, #16]
 8001514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001518:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800151c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001520:	edd7 7a04 	vldr	s15, [r7, #16]
 8001524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001528:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	ee07 3a90 	vmov	s15, r3
}
 8001532:	eeb0 0a67 	vmov.f32	s0, s15
 8001536:	371c      	adds	r7, #28
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	5f3759df 	.word	0x5f3759df

08001544 <computeAngles>:

void computeAngles(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
	roll = atan2f(q0*q1 + q2*q3, -(0.5f - q1*q1 - q2*q2));
 8001548:	4b53      	ldr	r3, [pc, #332]	; (8001698 <computeAngles+0x154>)
 800154a:	ed93 7a00 	vldr	s14, [r3]
 800154e:	4b53      	ldr	r3, [pc, #332]	; (800169c <computeAngles+0x158>)
 8001550:	edd3 7a00 	vldr	s15, [r3]
 8001554:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001558:	4b51      	ldr	r3, [pc, #324]	; (80016a0 <computeAngles+0x15c>)
 800155a:	edd3 6a00 	vldr	s13, [r3]
 800155e:	4b51      	ldr	r3, [pc, #324]	; (80016a4 <computeAngles+0x160>)
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001568:	ee37 6a27 	vadd.f32	s12, s14, s15
 800156c:	4b4b      	ldr	r3, [pc, #300]	; (800169c <computeAngles+0x158>)
 800156e:	ed93 7a00 	vldr	s14, [r3]
 8001572:	4b4a      	ldr	r3, [pc, #296]	; (800169c <computeAngles+0x158>)
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001580:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001584:	4b46      	ldr	r3, [pc, #280]	; (80016a0 <computeAngles+0x15c>)
 8001586:	edd3 6a00 	vldr	s13, [r3]
 800158a:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <computeAngles+0x15c>)
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001598:	eef1 7a67 	vneg.f32	s15, s15
 800159c:	eef0 0a67 	vmov.f32	s1, s15
 80015a0:	eeb0 0a46 	vmov.f32	s0, s12
 80015a4:	f00d fdd2 	bl	800f14c <atan2f>
 80015a8:	eef0 7a40 	vmov.f32	s15, s0
 80015ac:	4b3e      	ldr	r3, [pc, #248]	; (80016a8 <computeAngles+0x164>)
 80015ae:	edc3 7a00 	vstr	s15, [r3]
	pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 80015b2:	4b3a      	ldr	r3, [pc, #232]	; (800169c <computeAngles+0x158>)
 80015b4:	ed93 7a00 	vldr	s14, [r3]
 80015b8:	4b3a      	ldr	r3, [pc, #232]	; (80016a4 <computeAngles+0x160>)
 80015ba:	edd3 7a00 	vldr	s15, [r3]
 80015be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c2:	4b35      	ldr	r3, [pc, #212]	; (8001698 <computeAngles+0x154>)
 80015c4:	edd3 6a00 	vldr	s13, [r3]
 80015c8:	4b35      	ldr	r3, [pc, #212]	; (80016a0 <computeAngles+0x15c>)
 80015ca:	edd3 7a00 	vldr	s15, [r3]
 80015ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015d6:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80015da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015de:	eeb0 0a67 	vmov.f32	s0, s15
 80015e2:	f00d fd81 	bl	800f0e8 <asinf>
 80015e6:	eef0 7a40 	vmov.f32	s15, s0
 80015ea:	4b30      	ldr	r3, [pc, #192]	; (80016ac <computeAngles+0x168>)
 80015ec:	edc3 7a00 	vstr	s15, [r3]
	yaw = atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3);
 80015f0:	4b2a      	ldr	r3, [pc, #168]	; (800169c <computeAngles+0x158>)
 80015f2:	ed93 7a00 	vldr	s14, [r3]
 80015f6:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <computeAngles+0x15c>)
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001600:	4b25      	ldr	r3, [pc, #148]	; (8001698 <computeAngles+0x154>)
 8001602:	edd3 6a00 	vldr	s13, [r3]
 8001606:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <computeAngles+0x160>)
 8001608:	edd3 7a00 	vldr	s15, [r3]
 800160c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001610:	ee37 6a27 	vadd.f32	s12, s14, s15
 8001614:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <computeAngles+0x15c>)
 8001616:	ed93 7a00 	vldr	s14, [r3]
 800161a:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <computeAngles+0x15c>)
 800161c:	edd3 7a00 	vldr	s15, [r3]
 8001620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001624:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001628:	ee37 7a67 	vsub.f32	s14, s14, s15
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <computeAngles+0x160>)
 800162e:	edd3 6a00 	vldr	s13, [r3]
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <computeAngles+0x160>)
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800163c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001640:	eef0 0a67 	vmov.f32	s1, s15
 8001644:	eeb0 0a46 	vmov.f32	s0, s12
 8001648:	f00d fd80 	bl	800f14c <atan2f>
 800164c:	eef0 7a40 	vmov.f32	s15, s0
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <computeAngles+0x16c>)
 8001652:	edc3 7a00 	vstr	s15, [r3]
	costilt =  -(1.0f - 2.0f * q1*q1 - 2.0f * q2*q2);
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <computeAngles+0x158>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <computeAngles+0x158>)
 8001662:	edd3 7a00 	vldr	s15, [r3]
 8001666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800166e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <computeAngles+0x15c>)
 8001674:	edd3 7a00 	vldr	s15, [r3]
 8001678:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <computeAngles+0x15c>)
 800167e:	edd3 7a00 	vldr	s15, [r3]
 8001682:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001686:	ee77 7a67 	vsub.f32	s15, s14, s15
 800168a:	eef1 7a67 	vneg.f32	s15, s15
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <computeAngles+0x170>)
 8001690:	edc3 7a00 	vstr	s15, [r3]
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000a18 	.word	0x20000a18
 800169c:	20000a1c 	.word	0x20000a1c
 80016a0:	20000004 	.word	0x20000004
 80016a4:	20000a20 	.word	0x20000a20
 80016a8:	2000144c 	.word	0x2000144c
 80016ac:	20001448 	.word	0x20001448
 80016b0:	20001434 	.word	0x20001434
 80016b4:	20001410 	.word	0x20001410

080016b8 <quaternionConjugate>:


static inline fpQuaternion_t * quaternionConjugate(fpQuaternion_t * result, const fpQuaternion_t * q)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
    result->q0 =  q->q0;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	601a      	str	r2, [r3, #0]
    result->q1 = -q->q1;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80016d0:	eef1 7a67 	vneg.f32	s15, s15
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	edc3 7a01 	vstr	s15, [r3, #4]
    result->q2 = -q->q2;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80016e0:	eef1 7a67 	vneg.f32	s15, s15
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	edc3 7a02 	vstr	s15, [r3, #8]
    result->q3 = -q->q3;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80016f0:	eef1 7a67 	vneg.f32	s15, s15
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	edc3 7a03 	vstr	s15, [r3, #12]

    return result;
 80016fa:	687b      	ldr	r3, [r7, #4]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <quaternionMultiply>:

static inline fpQuaternion_t * quaternionMultiply(fpQuaternion_t * result, const fpQuaternion_t * a, const fpQuaternion_t * b)
{
 8001708:	b490      	push	{r4, r7}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  fpQuaternion_t p;

  p.q0 = a->q0 * b->q0 - a->q1 * b->q1 - a->q2 * b->q2 - a->q3 * b->q3;
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	ed93 7a00 	vldr	s14, [r3]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	edd3 7a00 	vldr	s15, [r3]
 8001720:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	edd3 6a01 	vldr	s13, [r3, #4]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001734:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	edd3 6a02 	vldr	s13, [r3, #8]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	edd3 7a02 	vldr	s15, [r3, #8]
 8001744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001748:	ee37 7a67 	vsub.f32	s14, s14, s15
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	edd3 7a03 	vldr	s15, [r3, #12]
 8001758:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800175c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001760:	edc7 7a04 	vstr	s15, [r7, #16]
  p.q1 = a->q0 * b->q1 + a->q1 * b->q0 + a->q2 * b->q3 - a->q3 * b->q2;
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	ed93 7a00 	vldr	s14, [r3]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	edd3 6a01 	vldr	s13, [r3, #4]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	edd3 7a00 	vldr	s15, [r3]
 8001780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001784:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	edd3 6a02 	vldr	s13, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	edd3 7a03 	vldr	s15, [r3, #12]
 8001794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001798:	ee37 7a27 	vadd.f32	s14, s14, s15
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	edd3 6a03 	vldr	s13, [r3, #12]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80017a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017b0:	edc7 7a05 	vstr	s15, [r7, #20]
  p.q2 = a->q0 * b->q2 - a->q1 * b->q3 + a->q2 * b->q0 + a->q3 * b->q1;
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	ed93 7a00 	vldr	s14, [r3]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80017c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	edd3 6a01 	vldr	s13, [r3, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80017d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	edd3 6a02 	vldr	s13, [r3, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	edd3 7a00 	vldr	s15, [r3]
 80017e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	edd3 6a03 	vldr	s13, [r3, #12]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80017f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001800:	edc7 7a06 	vstr	s15, [r7, #24]
  p.q3 = a->q0 * b->q3 + a->q1 * b->q2 - a->q2 * b->q1 + a->q3 * b->q0;
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	ed93 7a00 	vldr	s14, [r3]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001810:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	edd3 6a01 	vldr	s13, [r3, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001824:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	edd3 6a02 	vldr	s13, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	edd3 7a01 	vldr	s15, [r3, #4]
 8001834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001838:	ee37 7a67 	vsub.f32	s14, s14, s15
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	edd3 7a00 	vldr	s15, [r3]
 8001848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800184c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001850:	edc7 7a07 	vstr	s15, [r7, #28]

  *result = p;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	461c      	mov	r4, r3
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800185e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return result;
 8001862:	68fb      	ldr	r3, [r7, #12]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3720      	adds	r7, #32
 8001868:	46bd      	mov	sp, r7
 800186a:	bc90      	pop	{r4, r7}
 800186c:	4770      	bx	lr
	...

08001870 <GetAccNEU>:


void GetAccNEU (void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
    fpQuaternion_t vectQuat, refConj;

    vectQuat.q0 = 0;
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	613b      	str	r3, [r7, #16]
    vectQuat.q1 = accelBF.x;
 800187c:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <GetAccNEU+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	617b      	str	r3, [r7, #20]
    vectQuat.q2 = accelBF.y;
 8001882:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <GetAccNEU+0x64>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	61bb      	str	r3, [r7, #24]
    vectQuat.q3 = accelBF.z;
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <GetAccNEU+0x64>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	61fb      	str	r3, [r7, #28]

    quaternionConjugate(&refConj, &ref);
 800188e:	463b      	mov	r3, r7
 8001890:	4911      	ldr	r1, [pc, #68]	; (80018d8 <GetAccNEU+0x68>)
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff ff10 	bl	80016b8 <quaternionConjugate>
    quaternionMultiply(&vectQuat, &ref, &vectQuat);
 8001898:	f107 0210 	add.w	r2, r7, #16
 800189c:	f107 0310 	add.w	r3, r7, #16
 80018a0:	490d      	ldr	r1, [pc, #52]	; (80018d8 <GetAccNEU+0x68>)
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ff30 	bl	8001708 <quaternionMultiply>
    quaternionMultiply(&vectQuat, &vectQuat, &refConj);
 80018a8:	463a      	mov	r2, r7
 80018aa:	f107 0110 	add.w	r1, r7, #16
 80018ae:	f107 0310 	add.w	r3, r7, #16
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff ff28 	bl	8001708 <quaternionMultiply>

    accelBF.x = vectQuat.q1;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	4a06      	ldr	r2, [pc, #24]	; (80018d4 <GetAccNEU+0x64>)
 80018bc:	6013      	str	r3, [r2, #0]
    accelBF.y = vectQuat.q2;
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <GetAccNEU+0x64>)
 80018c2:	6053      	str	r3, [r2, #4]
    accelBF.z = vectQuat.q3;
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	4a03      	ldr	r2, [pc, #12]	; (80018d4 <GetAccNEU+0x64>)
 80018c8:	6093      	str	r3, [r2, #8]

}
 80018ca:	bf00      	nop
 80018cc:	3720      	adds	r7, #32
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200012f8 	.word	0x200012f8
 80018d8:	20001334 	.word	0x20001334

080018dc <pressureToAltitude>:




float pressureToAltitude(const float pressure)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	ed87 0a01 	vstr	s0, [r7, #4]
    return (1.0f - powf(pressure / 101325.0f, 0.190295f)) * 4433000.0f;
 80018e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80018ea:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800191c <pressureToAltitude+0x40>
 80018ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018f2:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8001920 <pressureToAltitude+0x44>
 80018f6:	eeb0 0a47 	vmov.f32	s0, s14
 80018fa:	f00d fc29 	bl	800f150 <powf>
 80018fe:	eef0 7a40 	vmov.f32	s15, s0
 8001902:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001906:	ee77 7a67 	vsub.f32	s15, s14, s15
 800190a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001924 <pressureToAltitude+0x48>
 800190e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001912:	eeb0 0a67 	vmov.f32	s0, s15
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	47c5e680 	.word	0x47c5e680
 8001920:	3e42dcb1 	.word	0x3e42dcb1
 8001924:	4a8748d0 	.word	0x4a8748d0

08001928 <getZ>:
		NEW_BARO = 0;
	}
}
float DelayComp (float input);
void getZ (NavAlt_t *Z)
{
 8001928:	b5b0      	push	{r4, r5, r7, lr}
 800192a:	ed2d 8b02 	vpush	{d8}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]


   		if (NEW_BARO)
 8001934:	4bb2      	ldr	r3, [pc, #712]	; (8001c00 <getZ+0x2d8>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d036      	beq.n	80019aa <getZ+0x82>
			{
   			Z->newBaroAlt = pressureToAltitude(pressure);
 800193c:	4bb1      	ldr	r3, [pc, #708]	; (8001c04 <getZ+0x2dc>)
 800193e:	edd3 7a00 	vldr	s15, [r3]
 8001942:	eeb0 0a67 	vmov.f32	s0, s15
 8001946:	f7ff ffc9 	bl	80018dc <pressureToAltitude>
 800194a:	eef0 7a40 	vmov.f32	s15, s0
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	edc3 7a00 	vstr	s15, [r3]
   			Z->BaroAlt =  Z->newBaroAlt - Z->InitBaroAlt;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	ed93 7a00 	vldr	s14, [r3]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001960:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	edc3 7a01 	vstr	s15, [r3, #4]
   			Z->BaroVel += 1*((Z->BaroAlt - Z->BaroAltLast)*32 - Z->BaroVel);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	edd3 6a01 	vldr	s13, [r3, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	edd3 7a04 	vldr	s15, [r3, #16]
 800197c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001980:	eddf 6aa1 	vldr	s13, [pc, #644]	; 8001c08 <getZ+0x2e0>
 8001984:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	edd3 7a03 	vldr	s15, [r3, #12]
 800198e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001992:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	edc3 7a03 	vstr	s15, [r3, #12]
			Z->BaroAltLast = Z->BaroAlt;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	611a      	str	r2, [r3, #16]
			NEW_BARO = 0;
 80019a4:	4b96      	ldr	r3, [pc, #600]	; (8001c00 <getZ+0x2d8>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
			}

   		Z->Acc = ((accelBF.z - 1 + Z->Acc_feedback))*9800;
 80019aa:	4b98      	ldr	r3, [pc, #608]	; (8001c0c <getZ+0x2e4>)
 80019ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80019b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80019be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c2:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001c10 <getZ+0x2e8>
 80019c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	edc3 7a07 	vstr	s15, [r3, #28]
   		Z->dt = 1.0f/4000.0f;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a90      	ldr	r2, [pc, #576]	; (8001c14 <getZ+0x2ec>)
 80019d4:	63da      	str	r2, [r3, #60]	; 0x3c
   		Z->Kg = 0.003;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a8f      	ldr	r2, [pc, #572]	; (8001c18 <getZ+0x2f0>)
 80019da:	645a      	str	r2, [r3, #68]	; 0x44
   		Z->Kg2 = 0.002;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a8f      	ldr	r2, [pc, #572]	; (8001c1c <getZ+0x2f4>)
 80019e0:	641a      	str	r2, [r3, #64]	; 0x40
		if (!M_FLAG)
 80019e2:	4b8f      	ldr	r3, [pc, #572]	; (8001c20 <getZ+0x2f8>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	f083 0301 	eor.w	r3, r3, #1
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d039      	beq.n	8001a64 <getZ+0x13c>
		{
			Z->InitBaroAlt = Z->newBaroAlt;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	609a      	str	r2, [r3, #8]
			Z->Pos = 0;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]
			Z->Vel = 0;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24
			Z->Acc_feedback += 0.05 * (-(accelBF.z - 1) - Z->Acc_feedback);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fdc3 	bl	8000598 <__aeabi_f2d>
 8001a12:	4604      	mov	r4, r0
 8001a14:	460d      	mov	r5, r1
 8001a16:	4b7d      	ldr	r3, [pc, #500]	; (8001c0c <getZ+0x2e4>)
 8001a18:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a24:	eeb1 7a67 	vneg.f32	s14, s15
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a32:	ee17 0a90 	vmov	r0, s15
 8001a36:	f7fe fdaf 	bl	8000598 <__aeabi_f2d>
 8001a3a:	a36d      	add	r3, pc, #436	; (adr r3, 8001bf0 <getZ+0x2c8>)
 8001a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a40:	f7fe fe02 	bl	8000648 <__aeabi_dmul>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4620      	mov	r0, r4
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	f7fe fc46 	bl	80002dc <__adddf3>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	f7ff f8ce 	bl	8000bf8 <__aeabi_d2f>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	639a      	str	r2, [r3, #56]	; 0x38



		}
	//	(Z->Acc * (sqrtf(Z->dt) / 2))
}
 8001a62:	e0bc      	b.n	8001bde <getZ+0x2b6>
			Z->VelEst = Z->Vel + Z->Acc * Z->dt;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	edd3 6a07 	vldr	s13, [r3, #28]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001a76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			Z->accint = 0.8*(Z->accint) + Z->Acc * Z->dt;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fd85 	bl	8000598 <__aeabi_f2d>
 8001a8e:	a35a      	add	r3, pc, #360	; (adr r3, 8001bf8 <getZ+0x2d0>)
 8001a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a94:	f7fe fdd8 	bl	8000648 <__aeabi_dmul>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4614      	mov	r4, r2
 8001a9e:	461d      	mov	r5, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	ed93 7a07 	vldr	s14, [r3, #28]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab0:	ee17 0a90 	vmov	r0, s15
 8001ab4:	f7fe fd70 	bl	8000598 <__aeabi_f2d>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4620      	mov	r0, r4
 8001abe:	4629      	mov	r1, r5
 8001ac0:	f7fe fc0c 	bl	80002dc <__adddf3>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	f7ff f894 	bl	8000bf8 <__aeabi_d2f>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	615a      	str	r2, [r3, #20]
			Z->VelCorr = Z->Kg2*(Z->BaroVel - Z->Vel);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	edd3 6a03 	vldr	s13, [r3, #12]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001ae8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			Z->accint_delayed = (Z->Kg2*(Z->BaroVel - DelayComp(Z->Vel))) ;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	ed93 8a10 	vldr	s16, [r3, #64]	; 0x40
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	edd3 8a03 	vldr	s17, [r3, #12]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b08:	eeb0 0a67 	vmov.f32	s0, s15
 8001b0c:	f000 f88c 	bl	8001c28 <DelayComp>
 8001b10:	eef0 7a40 	vmov.f32	s15, s0
 8001b14:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8001b18:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	edc3 7a06 	vstr	s15, [r3, #24]
			Z->Vel = Z->VelEst + Z->VelCorr;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001b2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			Z->PosEst = Z->Pos + (Z->Vel * Z->dt) +  (Z->Acc * Z->dt*Z->dt * 0.5);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	ed93 7a08 	vldr	s14, [r3, #32]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001b4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b52:	ee17 0a90 	vmov	r0, s15
 8001b56:	f7fe fd1f 	bl	8000598 <__aeabi_f2d>
 8001b5a:	4604      	mov	r4, r0
 8001b5c:	460d      	mov	r5, r1
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	ed93 7a07 	vldr	s14, [r3, #28]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001b6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b78:	ee17 0a90 	vmov	r0, s15
 8001b7c:	f7fe fd0c 	bl	8000598 <__aeabi_f2d>
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <getZ+0x2fc>)
 8001b86:	f7fe fd5f 	bl	8000648 <__aeabi_dmul>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4620      	mov	r0, r4
 8001b90:	4629      	mov	r1, r5
 8001b92:	f7fe fba3 	bl	80002dc <__adddf3>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f7ff f82b 	bl	8000bf8 <__aeabi_d2f>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	62da      	str	r2, [r3, #44]	; 0x2c
			Z->PosCorr = Z->Kg*(Z->BaroAlt - Z->Pos);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	edd3 6a01 	vldr	s13, [r3, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	edd3 7a08 	vldr	s15, [r3, #32]
 8001bba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			Z->Pos = Z->PosEst + Z->PosCorr;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	ecbd 8b02 	vpop	{d8}
 8001be8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bea:	bf00      	nop
 8001bec:	f3af 8000 	nop.w
 8001bf0:	9999999a 	.word	0x9999999a
 8001bf4:	3fa99999 	.word	0x3fa99999
 8001bf8:	9999999a 	.word	0x9999999a
 8001bfc:	3fe99999 	.word	0x3fe99999
 8001c00:	20000ab0 	.word	0x20000ab0
 8001c04:	20001378 	.word	0x20001378
 8001c08:	42000000 	.word	0x42000000
 8001c0c:	200012f8 	.word	0x200012f8
 8001c10:	46192000 	.word	0x46192000
 8001c14:	3983126f 	.word	0x3983126f
 8001c18:	3b449ba6 	.word	0x3b449ba6
 8001c1c:	3b03126f 	.word	0x3b03126f
 8001c20:	2000142c 	.word	0x2000142c
 8001c24:	3fe00000 	.word	0x3fe00000

08001c28 <DelayComp>:


float float_overflow (float num, uint16_t maximum, uint16_t minimum);

float DelayComp (float input)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	ed87 0a01 	vstr	s0, [r7, #4]


	//output = DelayBuffer[BuffPtr];
	DelayBuffer[BuffPtr] = input;
 8001c32:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <DelayComp+0x7c>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	4a1c      	ldr	r2, [pc, #112]	; (8001ca8 <DelayComp+0x80>)
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	601a      	str	r2, [r3, #0]
	BuffPtr++;
 8001c40:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <DelayComp+0x7c>)
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	3301      	adds	r3, #1
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <DelayComp+0x7c>)
 8001c4a:	801a      	strh	r2, [r3, #0]
	BuffPtr = BuffPtr == 500? 0 : BuffPtr;
 8001c4c:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <DelayComp+0x7c>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c54:	d002      	beq.n	8001c5c <DelayComp+0x34>
 8001c56:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <DelayComp+0x7c>)
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	e000      	b.n	8001c5e <DelayComp+0x36>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	4a11      	ldr	r2, [pc, #68]	; (8001ca4 <DelayComp+0x7c>)
 8001c60:	8013      	strh	r3, [r2, #0]
	float delaycompsmaple = 1*(input - DelayBuffer[BuffPtr]);
 8001c62:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <DelayComp+0x7c>)
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	4a10      	ldr	r2, [pc, #64]	; (8001ca8 <DelayComp+0x80>)
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	edd3 7a00 	vldr	s15, [r3]
 8001c70:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c78:	edc7 7a03 	vstr	s15, [r7, #12]
	output = input + delaycompsmaple;
 8001c7c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c80:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <DelayComp+0x84>)
 8001c8a:	edc3 7a00 	vstr	s15, [r3]
	return output;
 8001c8e:	4b07      	ldr	r3, [pc, #28]	; (8001cac <DelayComp+0x84>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	ee07 3a90 	vmov	s15, r3
}
 8001c96:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	200014bc 	.word	0x200014bc
 8001ca8:	20000ab8 	.word	0x20000ab8
 8001cac:	20001294 	.word	0x20001294

08001cb0 <InitKalmanZ>:
	NavZ.Rusult.Pos = NavZ.Est.Pos + NavZ.Corr.Pos;
	NavZ.Rusult.Vel = NavZ.Est.Vel + NavZ.Corr.Vel;
}

void InitKalmanZ (NavZ_t * Init)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	Init->Acc.dt = 1.0f/4000.0f;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a15      	ldr	r2, [pc, #84]	; (8001d10 <InitKalmanZ+0x60>)
 8001cbc:	611a      	str	r2, [r3, #16]
	Init->Acc.Halfsqdt = (NavZ.Acc.dt*NavZ.Acc.dt)/2.0f;
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <InitKalmanZ+0x64>)
 8001cc0:	ed93 7a04 	vldr	s14, [r3, #16]
 8001cc4:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <InitKalmanZ+0x64>)
 8001cc6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cce:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001cd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	edc3 7a05 	vstr	s15, [r3, #20]
	Init->Acc.Weight = 1.0f;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ce2:	61da      	str	r2, [r3, #28]
	Init->Acc.SqWeight = 1.0f;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cea:	621a      	str	r2, [r3, #32]
	Init->Acc.Weight = 1.0f;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cf2:	61da      	str	r2, [r3, #28]
	Init->Acc.Bias = 0;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
	Init->Baro.dt = 1.0f/100.0f;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a06      	ldr	r2, [pc, #24]	; (8001d18 <InitKalmanZ+0x68>)
 8001d00:	609a      	str	r2, [r3, #8]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	3983126f 	.word	0x3983126f
 8001d14:	20000a60 	.word	0x20000a60
 8001d18:	3c23d70a 	.word	0x3c23d70a

08001d1c <configure_baro>:
const float kP = 253952; // 16 times (Standard)

I2C_HandleTypeDef *baro_hi2c;

void configure_baro (I2C_HandleTypeDef *hi2c)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af04      	add	r7, sp, #16
 8001d22:	6078      	str	r0, [r7, #4]
	baro_hi2c = hi2c;
 8001d24:	4aa0      	ldr	r2, [pc, #640]	; (8001fa8 <configure_baro+0x28c>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6013      	str	r3, [r2, #0]

DPS310_tx_buffer[0]=DPS310_RESET_BIT_SOFT_RST;
 8001d2a:	4ba0      	ldr	r3, [pc, #640]	; (8001fac <configure_baro+0x290>)
 8001d2c:	2209      	movs	r2, #9
 8001d2e:	701a      	strb	r2, [r3, #0]
HAL_I2C_Mem_Write(baro_hi2c, DPS310_I2C_ADDR|I2C_write, DPS310_REG_RESET, 1, &DPS310_tx_buffer, 1, 1000);
 8001d30:	4b9d      	ldr	r3, [pc, #628]	; (8001fa8 <configure_baro+0x28c>)
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d38:	9302      	str	r3, [sp, #8]
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	9301      	str	r3, [sp, #4]
 8001d3e:	4b9b      	ldr	r3, [pc, #620]	; (8001fac <configure_baro+0x290>)
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2301      	movs	r3, #1
 8001d44:	220c      	movs	r2, #12
 8001d46:	21ed      	movs	r1, #237	; 0xed
 8001d48:	f003 fc68 	bl	800561c <HAL_I2C_Mem_Write>

HAL_Delay(100);
 8001d4c:	2064      	movs	r0, #100	; 0x64
 8001d4e:	f002 fcdf 	bl	8004710 <HAL_Delay>

//baro doesnt like if coff read in one go
HAL_I2C_Mem_Read(baro_hi2c, DPS310_I2C_ADDR, DPS310_REG_COEF, 1, &coef,9, 1000);
 8001d52:	4b95      	ldr	r3, [pc, #596]	; (8001fa8 <configure_baro+0x28c>)
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d5a:	9302      	str	r3, [sp, #8]
 8001d5c:	2309      	movs	r3, #9
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	4b93      	ldr	r3, [pc, #588]	; (8001fb0 <configure_baro+0x294>)
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	2301      	movs	r3, #1
 8001d66:	2210      	movs	r2, #16
 8001d68:	21ec      	movs	r1, #236	; 0xec
 8001d6a:	f003 fd6b 	bl	8005844 <HAL_I2C_Mem_Read>
HAL_Delay(10);
 8001d6e:	200a      	movs	r0, #10
 8001d70:	f002 fcce 	bl	8004710 <HAL_Delay>

	HAL_I2C_Mem_Read(baro_hi2c, DPS310_I2C_ADDR, DPS310_REG_COEF+9, 1, &coef[9],9, 1000);
 8001d74:	4b8c      	ldr	r3, [pc, #560]	; (8001fa8 <configure_baro+0x28c>)
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d7c:	9302      	str	r3, [sp, #8]
 8001d7e:	2309      	movs	r3, #9
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	4b8c      	ldr	r3, [pc, #560]	; (8001fb4 <configure_baro+0x298>)
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	2301      	movs	r3, #1
 8001d88:	2219      	movs	r2, #25
 8001d8a:	21ec      	movs	r1, #236	; 0xec
 8001d8c:	f003 fd5a 	bl	8005844 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8001d90:	200a      	movs	r0, #10
 8001d92:	f002 fcbd 	bl	8004710 <HAL_Delay>

c0 = (int16_t)getTwosComplement(((uint32_t)coef[0] << 4) | (((uint32_t)coef[1] >> 4) & 0x0F), 12);
 8001d96:	4b86      	ldr	r3, [pc, #536]	; (8001fb0 <configure_baro+0x294>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	011a      	lsls	r2, r3, #4
 8001d9c:	4b84      	ldr	r3, [pc, #528]	; (8001fb0 <configure_baro+0x294>)
 8001d9e:	785b      	ldrb	r3, [r3, #1]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	f003 030f 	and.w	r3, r3, #15
 8001da8:	4313      	orrs	r3, r2
 8001daa:	210c      	movs	r1, #12
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 f9ed 	bl	800218c <getTwosComplement>
 8001db2:	4603      	mov	r3, r0
 8001db4:	b21b      	sxth	r3, r3
 8001db6:	ee07 3a90 	vmov	s15, r3
 8001dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dbe:	4b7e      	ldr	r3, [pc, #504]	; (8001fb8 <configure_baro+0x29c>)
 8001dc0:	edc3 7a00 	vstr	s15, [r3]
c1 = (int16_t)getTwosComplement((((uint32_t)coef[1] & 0x0F) << 8) | (uint32_t)coef[2], 12);
 8001dc4:	4b7a      	ldr	r3, [pc, #488]	; (8001fb0 <configure_baro+0x294>)
 8001dc6:	785b      	ldrb	r3, [r3, #1]
 8001dc8:	021b      	lsls	r3, r3, #8
 8001dca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001dce:	4a78      	ldr	r2, [pc, #480]	; (8001fb0 <configure_baro+0x294>)
 8001dd0:	7892      	ldrb	r2, [r2, #2]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	210c      	movs	r1, #12
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 f9d8 	bl	800218c <getTwosComplement>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	b21b      	sxth	r3, r3
 8001de0:	ee07 3a90 	vmov	s15, r3
 8001de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de8:	4b74      	ldr	r3, [pc, #464]	; (8001fbc <configure_baro+0x2a0>)
 8001dea:	edc3 7a00 	vstr	s15, [r3]
c00 = (int32_t)getTwosComplement(((uint32_t)coef[3] << 12) | ((uint32_t)coef[4] << 4) | (((uint32_t)coef[5] >> 4) & 0x0F), 20);
 8001dee:	4b70      	ldr	r3, [pc, #448]	; (8001fb0 <configure_baro+0x294>)
 8001df0:	78db      	ldrb	r3, [r3, #3]
 8001df2:	031a      	lsls	r2, r3, #12
 8001df4:	4b6e      	ldr	r3, [pc, #440]	; (8001fb0 <configure_baro+0x294>)
 8001df6:	791b      	ldrb	r3, [r3, #4]
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	4b6c      	ldr	r3, [pc, #432]	; (8001fb0 <configure_baro+0x294>)
 8001dfe:	795b      	ldrb	r3, [r3, #5]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	2114      	movs	r1, #20
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f000 f9bd 	bl	800218c <getTwosComplement>
 8001e12:	ee07 0a90 	vmov	s15, r0
 8001e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e1a:	4b69      	ldr	r3, [pc, #420]	; (8001fc0 <configure_baro+0x2a4>)
 8001e1c:	edc3 7a00 	vstr	s15, [r3]
c10 = (int32_t)getTwosComplement((((uint32_t)coef[5] & 0x0F) << 16) | ((uint32_t)coef[6] << 8) | (uint32_t)coef[7], 20);
 8001e20:	4b63      	ldr	r3, [pc, #396]	; (8001fb0 <configure_baro+0x294>)
 8001e22:	795b      	ldrb	r3, [r3, #5]
 8001e24:	041b      	lsls	r3, r3, #16
 8001e26:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001e2a:	4b61      	ldr	r3, [pc, #388]	; (8001fb0 <configure_baro+0x294>)
 8001e2c:	799b      	ldrb	r3, [r3, #6]
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	4313      	orrs	r3, r2
 8001e32:	4a5f      	ldr	r2, [pc, #380]	; (8001fb0 <configure_baro+0x294>)
 8001e34:	79d2      	ldrb	r2, [r2, #7]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	2114      	movs	r1, #20
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f9a6 	bl	800218c <getTwosComplement>
 8001e40:	ee07 0a90 	vmov	s15, r0
 8001e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e48:	4b5e      	ldr	r3, [pc, #376]	; (8001fc4 <configure_baro+0x2a8>)
 8001e4a:	edc3 7a00 	vstr	s15, [r3]
c01 = (int16_t)getTwosComplement(((uint32_t)coef[8] << 8) | (uint32_t)coef[9], 16);
 8001e4e:	4b58      	ldr	r3, [pc, #352]	; (8001fb0 <configure_baro+0x294>)
 8001e50:	7a1b      	ldrb	r3, [r3, #8]
 8001e52:	021b      	lsls	r3, r3, #8
 8001e54:	4a56      	ldr	r2, [pc, #344]	; (8001fb0 <configure_baro+0x294>)
 8001e56:	7a52      	ldrb	r2, [r2, #9]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	2110      	movs	r1, #16
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f000 f995 	bl	800218c <getTwosComplement>
 8001e62:	4603      	mov	r3, r0
 8001e64:	b21b      	sxth	r3, r3
 8001e66:	ee07 3a90 	vmov	s15, r3
 8001e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6e:	4b56      	ldr	r3, [pc, #344]	; (8001fc8 <configure_baro+0x2ac>)
 8001e70:	edc3 7a00 	vstr	s15, [r3]
c11 = (int16_t)getTwosComplement(((uint32_t)coef[8] << 8) | (uint32_t)coef[9], 16);
 8001e74:	4b4e      	ldr	r3, [pc, #312]	; (8001fb0 <configure_baro+0x294>)
 8001e76:	7a1b      	ldrb	r3, [r3, #8]
 8001e78:	021b      	lsls	r3, r3, #8
 8001e7a:	4a4d      	ldr	r2, [pc, #308]	; (8001fb0 <configure_baro+0x294>)
 8001e7c:	7a52      	ldrb	r2, [r2, #9]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	2110      	movs	r1, #16
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 f982 	bl	800218c <getTwosComplement>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	b21b      	sxth	r3, r3
 8001e8c:	ee07 3a90 	vmov	s15, r3
 8001e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e94:	4b4d      	ldr	r3, [pc, #308]	; (8001fcc <configure_baro+0x2b0>)
 8001e96:	edc3 7a00 	vstr	s15, [r3]
c20 = (int16_t)getTwosComplement(((uint32_t)coef[12] << 8) | (uint32_t)coef[13], 16);
 8001e9a:	4b45      	ldr	r3, [pc, #276]	; (8001fb0 <configure_baro+0x294>)
 8001e9c:	7b1b      	ldrb	r3, [r3, #12]
 8001e9e:	021b      	lsls	r3, r3, #8
 8001ea0:	4a43      	ldr	r2, [pc, #268]	; (8001fb0 <configure_baro+0x294>)
 8001ea2:	7b52      	ldrb	r2, [r2, #13]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	2110      	movs	r1, #16
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 f96f 	bl	800218c <getTwosComplement>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	b21b      	sxth	r3, r3
 8001eb2:	ee07 3a90 	vmov	s15, r3
 8001eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eba:	4b45      	ldr	r3, [pc, #276]	; (8001fd0 <configure_baro+0x2b4>)
 8001ebc:	edc3 7a00 	vstr	s15, [r3]
c21 = (int16_t)getTwosComplement(((uint32_t)coef[14] << 8) | (uint32_t)coef[15], 16);
 8001ec0:	4b3b      	ldr	r3, [pc, #236]	; (8001fb0 <configure_baro+0x294>)
 8001ec2:	7b9b      	ldrb	r3, [r3, #14]
 8001ec4:	021b      	lsls	r3, r3, #8
 8001ec6:	4a3a      	ldr	r2, [pc, #232]	; (8001fb0 <configure_baro+0x294>)
 8001ec8:	7bd2      	ldrb	r2, [r2, #15]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	2110      	movs	r1, #16
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 f95c 	bl	800218c <getTwosComplement>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	b21b      	sxth	r3, r3
 8001ed8:	ee07 3a90 	vmov	s15, r3
 8001edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ee0:	4b3c      	ldr	r3, [pc, #240]	; (8001fd4 <configure_baro+0x2b8>)
 8001ee2:	edc3 7a00 	vstr	s15, [r3]
c30 = (int16_t)getTwosComplement(((uint32_t)coef[16] << 8) | (uint32_t)coef[17], 16);
 8001ee6:	4b32      	ldr	r3, [pc, #200]	; (8001fb0 <configure_baro+0x294>)
 8001ee8:	7c1b      	ldrb	r3, [r3, #16]
 8001eea:	021b      	lsls	r3, r3, #8
 8001eec:	4a30      	ldr	r2, [pc, #192]	; (8001fb0 <configure_baro+0x294>)
 8001eee:	7c52      	ldrb	r2, [r2, #17]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	2110      	movs	r1, #16
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 f949 	bl	800218c <getTwosComplement>
 8001efa:	4603      	mov	r3, r0
 8001efc:	b21b      	sxth	r3, r3
 8001efe:	ee07 3a90 	vmov	s15, r3
 8001f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f06:	4b34      	ldr	r3, [pc, #208]	; (8001fd8 <configure_baro+0x2bc>)
 8001f08:	edc3 7a00 	vstr	s15, [r3]

DPS310_tx_buffer[0]=DPS310_TMP_CFG_BIT_TMP_RATE_32HZ | DPS310_TMP_CFG_BIT_TMP_PRC_16|0x80;
 8001f0c:	4b27      	ldr	r3, [pc, #156]	; (8001fac <configure_baro+0x290>)
 8001f0e:	22d4      	movs	r2, #212	; 0xd4
 8001f10:	701a      	strb	r2, [r3, #0]
HAL_I2C_Mem_Write(baro_hi2c, DPS310_I2C_ADDR|I2C_write, DPS310_REG_TMP_CFG, 1, &DPS310_tx_buffer, 1, 1000);
 8001f12:	4b25      	ldr	r3, [pc, #148]	; (8001fa8 <configure_baro+0x28c>)
 8001f14:	6818      	ldr	r0, [r3, #0]
 8001f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f1a:	9302      	str	r3, [sp, #8]
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	9301      	str	r3, [sp, #4]
 8001f20:	4b22      	ldr	r3, [pc, #136]	; (8001fac <configure_baro+0x290>)
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	2301      	movs	r3, #1
 8001f26:	2207      	movs	r2, #7
 8001f28:	21ed      	movs	r1, #237	; 0xed
 8001f2a:	f003 fb77 	bl	800561c <HAL_I2C_Mem_Write>
HAL_Delay(10);
 8001f2e:	200a      	movs	r0, #10
 8001f30:	f002 fbee 	bl	8004710 <HAL_Delay>

	DPS310_tx_buffer[0]=DPS310_PRS_CFG_BIT_PM_RATE_32HZ | DPS310_PRS_CFG_BIT_PM_PRC_16;
 8001f34:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <configure_baro+0x290>)
 8001f36:	2254      	movs	r2, #84	; 0x54
 8001f38:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(baro_hi2c, DPS310_I2C_ADDR|I2C_write, DPS310_REG_PRS_CFG, 1, &DPS310_tx_buffer, 1, 1000);
 8001f3a:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <configure_baro+0x28c>)
 8001f3c:	6818      	ldr	r0, [r3, #0]
 8001f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f42:	9302      	str	r3, [sp, #8]
 8001f44:	2301      	movs	r3, #1
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	4b18      	ldr	r3, [pc, #96]	; (8001fac <configure_baro+0x290>)
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	2206      	movs	r2, #6
 8001f50:	21ed      	movs	r1, #237	; 0xed
 8001f52:	f003 fb63 	bl	800561c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8001f56:	200a      	movs	r0, #10
 8001f58:	f002 fbda 	bl	8004710 <HAL_Delay>

		DPS310_tx_buffer[0]=DPS310_CFG_REG_BIT_T_SHIFT | DPS310_CFG_REG_BIT_P_SHIFT;
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <configure_baro+0x290>)
 8001f5e:	220c      	movs	r2, #12
 8001f60:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(baro_hi2c, DPS310_I2C_ADDR|I2C_write, DPS310_REG_CFG_REG, 1, &DPS310_tx_buffer, 1, 1000);
 8001f62:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <configure_baro+0x28c>)
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f6a:	9302      	str	r3, [sp, #8]
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	9301      	str	r3, [sp, #4]
 8001f70:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <configure_baro+0x290>)
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	2301      	movs	r3, #1
 8001f76:	2209      	movs	r2, #9
 8001f78:	21ed      	movs	r1, #237	; 0xed
 8001f7a:	f003 fb4f 	bl	800561c <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8001f7e:	200a      	movs	r0, #10
 8001f80:	f002 fbc6 	bl	8004710 <HAL_Delay>

			DPS310_tx_buffer[0]=DPS310_MEAS_CFG_MEAS_CTRL_CONT;
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <configure_baro+0x290>)
 8001f86:	2207      	movs	r2, #7
 8001f88:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(baro_hi2c, DPS310_I2C_ADDR|I2C_write, DPS310_REG_MEAS_CFG, 1, &DPS310_tx_buffer, 1, 1000);
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <configure_baro+0x28c>)
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f92:	9302      	str	r3, [sp, #8]
 8001f94:	2301      	movs	r3, #1
 8001f96:	9301      	str	r3, [sp, #4]
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <configure_baro+0x290>)
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	21ed      	movs	r1, #237	; 0xed
 8001fa2:	f003 fb3b 	bl	800561c <HAL_I2C_Mem_Write>



for (int i;i<5;i++)
 8001fa6:	e0b9      	b.n	800211c <configure_baro+0x400>
 8001fa8:	2000166c 	.word	0x2000166c
 8001fac:	20001320 	.word	0x20001320
 8001fb0:	20001388 	.word	0x20001388
 8001fb4:	20001391 	.word	0x20001391
 8001fb8:	20001444 	.word	0x20001444
 8001fbc:	200013a4 	.word	0x200013a4
 8001fc0:	200014b0 	.word	0x200014b0
 8001fc4:	20001290 	.word	0x20001290
 8001fc8:	2000137c 	.word	0x2000137c
 8001fcc:	20000aa8 	.word	0x20000aa8
 8001fd0:	20001374 	.word	0x20001374
 8001fd4:	200013e8 	.word	0x200013e8
 8001fd8:	20001384 	.word	0x20001384
{
HAL_I2C_Mem_Read(hi2c, DPS310_I2C_ADDR, DPS310_REG_PSR_B2, 1, &DPS310_rx_buffer,6, 1000);
 8001fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fe0:	9302      	str	r3, [sp, #8]
 8001fe2:	2306      	movs	r3, #6
 8001fe4:	9301      	str	r3, [sp, #4]
 8001fe6:	4b57      	ldr	r3, [pc, #348]	; (8002144 <configure_baro+0x428>)
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2301      	movs	r3, #1
 8001fec:	2200      	movs	r2, #0
 8001fee:	21ec      	movs	r1, #236	; 0xec
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f003 fc27 	bl	8005844 <HAL_I2C_Mem_Read>
Praw_sc = ((int32_t)getTwosComplement((DPS310_rx_buffer[0] << 16) + (DPS310_rx_buffer[1] << 8) + DPS310_rx_buffer[2], 24)) / kP;
 8001ff6:	4b53      	ldr	r3, [pc, #332]	; (8002144 <configure_baro+0x428>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	041a      	lsls	r2, r3, #16
 8001ffc:	4b51      	ldr	r3, [pc, #324]	; (8002144 <configure_baro+0x428>)
 8001ffe:	785b      	ldrb	r3, [r3, #1]
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	4413      	add	r3, r2
 8002004:	4a4f      	ldr	r2, [pc, #316]	; (8002144 <configure_baro+0x428>)
 8002006:	7892      	ldrb	r2, [r2, #2]
 8002008:	4413      	add	r3, r2
 800200a:	2118      	movs	r1, #24
 800200c:	4618      	mov	r0, r3
 800200e:	f000 f8bd 	bl	800218c <getTwosComplement>
 8002012:	ee07 0a90 	vmov	s15, r0
 8002016:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800201a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8002148 <configure_baro+0x42c>
 800201e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002022:	4b4a      	ldr	r3, [pc, #296]	; (800214c <configure_baro+0x430>)
 8002024:	edc3 7a00 	vstr	s15, [r3]
Traw_sc = ((int32_t)getTwosComplement((DPS310_rx_buffer[3] << 16) + (DPS310_rx_buffer[4] << 8) + DPS310_rx_buffer[5], 24)) / kT;
 8002028:	4b46      	ldr	r3, [pc, #280]	; (8002144 <configure_baro+0x428>)
 800202a:	78db      	ldrb	r3, [r3, #3]
 800202c:	041a      	lsls	r2, r3, #16
 800202e:	4b45      	ldr	r3, [pc, #276]	; (8002144 <configure_baro+0x428>)
 8002030:	791b      	ldrb	r3, [r3, #4]
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	4413      	add	r3, r2
 8002036:	4a43      	ldr	r2, [pc, #268]	; (8002144 <configure_baro+0x428>)
 8002038:	7952      	ldrb	r2, [r2, #5]
 800203a:	4413      	add	r3, r2
 800203c:	2118      	movs	r1, #24
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f8a4 	bl	800218c <getTwosComplement>
 8002044:	ee07 0a90 	vmov	s15, r0
 8002048:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800204c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8002148 <configure_baro+0x42c>
 8002050:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002054:	4b3e      	ldr	r3, [pc, #248]	; (8002150 <configure_baro+0x434>)
 8002056:	edc3 7a00 	vstr	s15, [r3]
pressure = c00 + Praw_sc * (c10 + Praw_sc * (c20 + Praw_sc * c30)) + Traw_sc * c01 + Traw_sc * Praw_sc * (c11 + Praw_sc * c21);
 800205a:	4b3c      	ldr	r3, [pc, #240]	; (800214c <configure_baro+0x430>)
 800205c:	ed93 7a00 	vldr	s14, [r3]
 8002060:	4b3c      	ldr	r3, [pc, #240]	; (8002154 <configure_baro+0x438>)
 8002062:	edd3 7a00 	vldr	s15, [r3]
 8002066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800206a:	4b3b      	ldr	r3, [pc, #236]	; (8002158 <configure_baro+0x43c>)
 800206c:	edd3 7a00 	vldr	s15, [r3]
 8002070:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002074:	4b35      	ldr	r3, [pc, #212]	; (800214c <configure_baro+0x430>)
 8002076:	edd3 7a00 	vldr	s15, [r3]
 800207a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800207e:	4b37      	ldr	r3, [pc, #220]	; (800215c <configure_baro+0x440>)
 8002080:	edd3 7a00 	vldr	s15, [r3]
 8002084:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002088:	4b30      	ldr	r3, [pc, #192]	; (800214c <configure_baro+0x430>)
 800208a:	edd3 7a00 	vldr	s15, [r3]
 800208e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002092:	4b33      	ldr	r3, [pc, #204]	; (8002160 <configure_baro+0x444>)
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	ee37 7a27 	vadd.f32	s14, s14, s15
 800209c:	4b2c      	ldr	r3, [pc, #176]	; (8002150 <configure_baro+0x434>)
 800209e:	edd3 6a00 	vldr	s13, [r3]
 80020a2:	4b30      	ldr	r3, [pc, #192]	; (8002164 <configure_baro+0x448>)
 80020a4:	edd3 7a00 	vldr	s15, [r3]
 80020a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020b0:	4b27      	ldr	r3, [pc, #156]	; (8002150 <configure_baro+0x434>)
 80020b2:	edd3 6a00 	vldr	s13, [r3]
 80020b6:	4b25      	ldr	r3, [pc, #148]	; (800214c <configure_baro+0x430>)
 80020b8:	edd3 7a00 	vldr	s15, [r3]
 80020bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020c0:	4b22      	ldr	r3, [pc, #136]	; (800214c <configure_baro+0x430>)
 80020c2:	ed93 6a00 	vldr	s12, [r3]
 80020c6:	4b28      	ldr	r3, [pc, #160]	; (8002168 <configure_baro+0x44c>)
 80020c8:	edd3 7a00 	vldr	s15, [r3]
 80020cc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80020d0:	4b26      	ldr	r3, [pc, #152]	; (800216c <configure_baro+0x450>)
 80020d2:	edd3 7a00 	vldr	s15, [r3]
 80020d6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80020da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e2:	4b23      	ldr	r3, [pc, #140]	; (8002170 <configure_baro+0x454>)
 80020e4:	edc3 7a00 	vstr	s15, [r3]
temperature = c0 * 0.5f + c1 * Traw_sc;
 80020e8:	4b22      	ldr	r3, [pc, #136]	; (8002174 <configure_baro+0x458>)
 80020ea:	edd3 7a00 	vldr	s15, [r3]
 80020ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020f6:	4b20      	ldr	r3, [pc, #128]	; (8002178 <configure_baro+0x45c>)
 80020f8:	edd3 6a00 	vldr	s13, [r3]
 80020fc:	4b14      	ldr	r3, [pc, #80]	; (8002150 <configure_baro+0x434>)
 80020fe:	edd3 7a00 	vldr	s15, [r3]
 8002102:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <configure_baro+0x460>)
 800210c:	edc3 7a00 	vstr	s15, [r3]
HAL_Delay(30);
 8002110:	201e      	movs	r0, #30
 8002112:	f002 fafd 	bl	8004710 <HAL_Delay>
for (int i;i<5;i++)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	3301      	adds	r3, #1
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b04      	cmp	r3, #4
 8002120:	f77f af5c 	ble.w	8001fdc <configure_baro+0x2c0>

}

inital_pressure = pressure;
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <configure_baro+0x454>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a15      	ldr	r2, [pc, #84]	; (8002180 <configure_baro+0x464>)
 800212a:	6013      	str	r3, [r2, #0]
alt_est = 0;
 800212c:	4b15      	ldr	r3, [pc, #84]	; (8002184 <configure_baro+0x468>)
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
alt = 0;
 8002134:	4b14      	ldr	r3, [pc, #80]	; (8002188 <configure_baro+0x46c>)
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
//b1 = pressure;
}
 800213c:	bf00      	nop
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20001348 	.word	0x20001348
 8002148:	48780000 	.word	0x48780000
 800214c:	200014d8 	.word	0x200014d8
 8002150:	200013ec 	.word	0x200013ec
 8002154:	20001384 	.word	0x20001384
 8002158:	20001374 	.word	0x20001374
 800215c:	20001290 	.word	0x20001290
 8002160:	200014b0 	.word	0x200014b0
 8002164:	2000137c 	.word	0x2000137c
 8002168:	200013e8 	.word	0x200013e8
 800216c:	20000aa8 	.word	0x20000aa8
 8002170:	20001378 	.word	0x20001378
 8002174:	20001444 	.word	0x20001444
 8002178:	200013a4 	.word	0x200013a4
 800217c:	2000131c 	.word	0x2000131c
 8002180:	200014b8 	.word	0x200014b8
 8002184:	20001400 	.word	0x20001400
 8002188:	20001364 	.word	0x20001364

0800218c <getTwosComplement>:



 int32_t getTwosComplement(uint32_t raw, uint8_t length)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	70fb      	strb	r3, [r7, #3]
    if (raw & ((int)1 << (length - 1))) {
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	3b01      	subs	r3, #1
 800219c:	2201      	movs	r2, #1
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d006      	beq.n	80021ba <getTwosComplement+0x2e>
        return ((int32_t)raw) - ((int32_t)1 << length);
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	2101      	movs	r1, #1
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	e000      	b.n	80021bc <getTwosComplement+0x30>
    }
    else {
        return raw;
 80021ba:	687b      	ldr	r3, [r7, #4]
    }
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <read_baro>:


void read_baro (void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af04      	add	r7, sp, #16
		HAL_I2C_Mem_Read(baro_hi2c, DPS310_I2C_ADDR, DPS310_REG_PSR_B2, 1, &DPS310_rx_buffer,6, 1000);
 80021ce:	4b50      	ldr	r3, [pc, #320]	; (8002310 <read_baro+0x148>)
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d6:	9302      	str	r3, [sp, #8]
 80021d8:	2306      	movs	r3, #6
 80021da:	9301      	str	r3, [sp, #4]
 80021dc:	4b4d      	ldr	r3, [pc, #308]	; (8002314 <read_baro+0x14c>)
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	2301      	movs	r3, #1
 80021e2:	2200      	movs	r2, #0
 80021e4:	21ec      	movs	r1, #236	; 0xec
 80021e6:	f003 fb2d 	bl	8005844 <HAL_I2C_Mem_Read>
		Praw_sc = ((int32_t)getTwosComplement((DPS310_rx_buffer[0] << 16) + (DPS310_rx_buffer[1] << 8) + DPS310_rx_buffer[2], 24)) / kP;
 80021ea:	4b4a      	ldr	r3, [pc, #296]	; (8002314 <read_baro+0x14c>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	041a      	lsls	r2, r3, #16
 80021f0:	4b48      	ldr	r3, [pc, #288]	; (8002314 <read_baro+0x14c>)
 80021f2:	785b      	ldrb	r3, [r3, #1]
 80021f4:	021b      	lsls	r3, r3, #8
 80021f6:	4413      	add	r3, r2
 80021f8:	4a46      	ldr	r2, [pc, #280]	; (8002314 <read_baro+0x14c>)
 80021fa:	7892      	ldrb	r2, [r2, #2]
 80021fc:	4413      	add	r3, r2
 80021fe:	2118      	movs	r1, #24
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ffc3 	bl	800218c <getTwosComplement>
 8002206:	ee07 0a90 	vmov	s15, r0
 800220a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800220e:	eddf 6a42 	vldr	s13, [pc, #264]	; 8002318 <read_baro+0x150>
 8002212:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002216:	4b41      	ldr	r3, [pc, #260]	; (800231c <read_baro+0x154>)
 8002218:	edc3 7a00 	vstr	s15, [r3]
		Traw_sc = ((int32_t)getTwosComplement((DPS310_rx_buffer[3] << 16) + (DPS310_rx_buffer[4] << 8) + DPS310_rx_buffer[5], 24)) / kT;
 800221c:	4b3d      	ldr	r3, [pc, #244]	; (8002314 <read_baro+0x14c>)
 800221e:	78db      	ldrb	r3, [r3, #3]
 8002220:	041a      	lsls	r2, r3, #16
 8002222:	4b3c      	ldr	r3, [pc, #240]	; (8002314 <read_baro+0x14c>)
 8002224:	791b      	ldrb	r3, [r3, #4]
 8002226:	021b      	lsls	r3, r3, #8
 8002228:	4413      	add	r3, r2
 800222a:	4a3a      	ldr	r2, [pc, #232]	; (8002314 <read_baro+0x14c>)
 800222c:	7952      	ldrb	r2, [r2, #5]
 800222e:	4413      	add	r3, r2
 8002230:	2118      	movs	r1, #24
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff ffaa 	bl	800218c <getTwosComplement>
 8002238:	ee07 0a90 	vmov	s15, r0
 800223c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002240:	eddf 6a35 	vldr	s13, [pc, #212]	; 8002318 <read_baro+0x150>
 8002244:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002248:	4b35      	ldr	r3, [pc, #212]	; (8002320 <read_baro+0x158>)
 800224a:	edc3 7a00 	vstr	s15, [r3]
	    pressure = c00 + Praw_sc * (c10 + Praw_sc * (c20 + Praw_sc * c30)) + Traw_sc * c01 + Traw_sc * Praw_sc * (c11 + Praw_sc * c21);
 800224e:	4b33      	ldr	r3, [pc, #204]	; (800231c <read_baro+0x154>)
 8002250:	ed93 7a00 	vldr	s14, [r3]
 8002254:	4b33      	ldr	r3, [pc, #204]	; (8002324 <read_baro+0x15c>)
 8002256:	edd3 7a00 	vldr	s15, [r3]
 800225a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800225e:	4b32      	ldr	r3, [pc, #200]	; (8002328 <read_baro+0x160>)
 8002260:	edd3 7a00 	vldr	s15, [r3]
 8002264:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002268:	4b2c      	ldr	r3, [pc, #176]	; (800231c <read_baro+0x154>)
 800226a:	edd3 7a00 	vldr	s15, [r3]
 800226e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002272:	4b2e      	ldr	r3, [pc, #184]	; (800232c <read_baro+0x164>)
 8002274:	edd3 7a00 	vldr	s15, [r3]
 8002278:	ee37 7a27 	vadd.f32	s14, s14, s15
 800227c:	4b27      	ldr	r3, [pc, #156]	; (800231c <read_baro+0x154>)
 800227e:	edd3 7a00 	vldr	s15, [r3]
 8002282:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002286:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <read_baro+0x168>)
 8002288:	edd3 7a00 	vldr	s15, [r3]
 800228c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002290:	4b23      	ldr	r3, [pc, #140]	; (8002320 <read_baro+0x158>)
 8002292:	edd3 6a00 	vldr	s13, [r3]
 8002296:	4b27      	ldr	r3, [pc, #156]	; (8002334 <read_baro+0x16c>)
 8002298:	edd3 7a00 	vldr	s15, [r3]
 800229c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022a4:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <read_baro+0x158>)
 80022a6:	edd3 6a00 	vldr	s13, [r3]
 80022aa:	4b1c      	ldr	r3, [pc, #112]	; (800231c <read_baro+0x154>)
 80022ac:	edd3 7a00 	vldr	s15, [r3]
 80022b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022b4:	4b19      	ldr	r3, [pc, #100]	; (800231c <read_baro+0x154>)
 80022b6:	ed93 6a00 	vldr	s12, [r3]
 80022ba:	4b1f      	ldr	r3, [pc, #124]	; (8002338 <read_baro+0x170>)
 80022bc:	edd3 7a00 	vldr	s15, [r3]
 80022c0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022c4:	4b1d      	ldr	r3, [pc, #116]	; (800233c <read_baro+0x174>)
 80022c6:	edd3 7a00 	vldr	s15, [r3]
 80022ca:	ee76 7a27 	vadd.f32	s15, s12, s15
 80022ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022d6:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <read_baro+0x178>)
 80022d8:	edc3 7a00 	vstr	s15, [r3]
	    temperature = c0 * 0.5f + c1 * Traw_sc;
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <read_baro+0x17c>)
 80022de:	edd3 7a00 	vldr	s15, [r3]
 80022e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022ea:	4b17      	ldr	r3, [pc, #92]	; (8002348 <read_baro+0x180>)
 80022ec:	edd3 6a00 	vldr	s13, [r3]
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <read_baro+0x158>)
 80022f2:	edd3 7a00 	vldr	s15, [r3]
 80022f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022fe:	4b13      	ldr	r3, [pc, #76]	; (800234c <read_baro+0x184>)
 8002300:	edc3 7a00 	vstr	s15, [r3]
	    NEW_BARO = 1;
 8002304:	4b12      	ldr	r3, [pc, #72]	; (8002350 <read_baro+0x188>)
 8002306:	2201      	movs	r2, #1
 8002308:	701a      	strb	r2, [r3, #0]
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	2000166c 	.word	0x2000166c
 8002314:	20001348 	.word	0x20001348
 8002318:	48780000 	.word	0x48780000
 800231c:	200014d8 	.word	0x200014d8
 8002320:	200013ec 	.word	0x200013ec
 8002324:	20001384 	.word	0x20001384
 8002328:	20001374 	.word	0x20001374
 800232c:	20001290 	.word	0x20001290
 8002330:	200014b0 	.word	0x200014b0
 8002334:	2000137c 	.word	0x2000137c
 8002338:	200013e8 	.word	0x200013e8
 800233c:	20000aa8 	.word	0x20000aa8
 8002340:	20001378 	.word	0x20001378
 8002344:	20001444 	.word	0x20001444
 8002348:	200013a4 	.word	0x200013a4
 800234c:	2000131c 	.word	0x2000131c
 8002350:	20000ab0 	.word	0x20000ab0

08002354 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800235a:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <MX_DMA_Init+0x60>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a15      	ldr	r2, [pc, #84]	; (80023b4 <MX_DMA_Init+0x60>)
 8002360:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <MX_DMA_Init+0x60>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800236e:	607b      	str	r3, [r7, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002372:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <MX_DMA_Init+0x60>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a0f      	ldr	r2, [pc, #60]	; (80023b4 <MX_DMA_Init+0x60>)
 8002378:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <MX_DMA_Init+0x60>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800238a:	2200      	movs	r2, #0
 800238c:	2100      	movs	r1, #0
 800238e:	2010      	movs	r0, #16
 8002390:	f002 fabd 	bl	800490e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002394:	2010      	movs	r0, #16
 8002396:	f002 fad6 	bl	8004946 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2100      	movs	r1, #0
 800239e:	203a      	movs	r0, #58	; 0x3a
 80023a0:	f002 fab5 	bl	800490e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80023a4:	203a      	movs	r0, #58	; 0x3a
 80023a6:	f002 face 	bl	8004946 <HAL_NVIC_EnableIRQ>

}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800

080023b8 <init_biquad_filter>:
#include "filters.h"
#include "math.h"


void init_biquad_filter (biquadFilter_t *filter,float f_cut, float frequency)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	; 0x28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80023c4:	edc7 0a01 	vstr	s1, [r7, #4]

	filter->x1 = filter->x2 = 0;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	619a      	str	r2, [r3, #24]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	699a      	ldr	r2, [r3, #24]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	615a      	str	r2, [r3, #20]
	filter->y1 = filter->y2 = 0;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	621a      	str	r2, [r3, #32]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a1a      	ldr	r2, [r3, #32]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	61da      	str	r2, [r3, #28]

    const float omega = 2.0f * M_PI * (f_cut/frequency);
 80023e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80023ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80023f0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023f4:	ee16 0a90 	vmov	r0, s13
 80023f8:	f7fe f8ce 	bl	8000598 <__aeabi_f2d>
 80023fc:	a34f      	add	r3, pc, #316	; (adr r3, 800253c <init_biquad_filter+0x184>)
 80023fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002402:	f7fe f921 	bl	8000648 <__aeabi_dmul>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4610      	mov	r0, r2
 800240c:	4619      	mov	r1, r3
 800240e:	f7fe fbf3 	bl	8000bf8 <__aeabi_d2f>
 8002412:	4603      	mov	r3, r0
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
    const float sn = sin(omega);
 8002416:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002418:	f7fe f8be 	bl	8000598 <__aeabi_f2d>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	ec43 2b10 	vmov	d0, r2, r3
 8002424:	f00c fe0c 	bl	800f040 <sin>
 8002428:	ec53 2b10 	vmov	r2, r3, d0
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	f7fe fbe2 	bl	8000bf8 <__aeabi_d2f>
 8002434:	4603      	mov	r3, r0
 8002436:	623b      	str	r3, [r7, #32]
    const float cs = cos(omega);
 8002438:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800243a:	f7fe f8ad 	bl	8000598 <__aeabi_f2d>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	ec43 2b10 	vmov	d0, r2, r3
 8002446:	f00c fdab 	bl	800efa0 <cos>
 800244a:	ec53 2b10 	vmov	r2, r3, d0
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	f7fe fbd1 	bl	8000bf8 <__aeabi_d2f>
 8002456:	4603      	mov	r3, r0
 8002458:	61fb      	str	r3, [r7, #28]
    const float alpha = sn / (2.0f * (1.0f / sqrtf(2.0f)));
 800245a:	ed97 7a08 	vldr	s14, [r7, #32]
 800245e:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002538 <init_biquad_filter+0x180>
 8002462:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002466:	edc7 7a06 	vstr	s15, [r7, #24]

    filter->b1 = 1 - cs;
 800246a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800246e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->b0 = filter->b1 * 0.5f;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002482:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	edc3 7a00 	vstr	s15, [r3]
    filter->b2 = filter->b0;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	609a      	str	r2, [r3, #8]
    filter->a1 = -2 * cs;
 8002498:	edd7 7a07 	vldr	s15, [r7, #28]
 800249c:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80024a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	edc3 7a03 	vstr	s15, [r3, #12]
    filter->a2 = 1 - alpha;
 80024aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80024b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	edc3 7a04 	vstr	s15, [r3, #16]

    const float a0 = 1 + alpha;
 80024bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80024c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024c8:	edc7 7a05 	vstr	s15, [r7, #20]

    filter->b0 /= a0;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	edd3 6a00 	vldr	s13, [r3]
 80024d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80024d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	edc3 7a00 	vstr	s15, [r3]
    filter->b1 /= a0;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	edd3 6a01 	vldr	s13, [r3, #4]
 80024e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80024ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->b2 /= a0;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	edd3 6a02 	vldr	s13, [r3, #8]
 80024fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80024fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	edc3 7a02 	vstr	s15, [r3, #8]
    filter->a1 /= a0;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	edd3 6a03 	vldr	s13, [r3, #12]
 800250e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	edc3 7a03 	vstr	s15, [r3, #12]
    filter->a2 /= a0;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	edd3 6a04 	vldr	s13, [r3, #16]
 8002522:	ed97 7a05 	vldr	s14, [r7, #20]
 8002526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	edc3 7a04 	vstr	s15, [r3, #16]

}
 8002530:	bf00      	nop
 8002532:	3728      	adds	r7, #40	; 0x28
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	3fb504f3 	.word	0x3fb504f3
 800253c:	54442d18 	.word	0x54442d18
 8002540:	401921fb 	.word	0x401921fb

08002544 <biquadFilterApply>:

float biquadFilterApply(biquadFilter_t *filter,float input)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	ed87 0a00 	vstr	s0, [r7]
    const float result = filter->b0 * input + filter->x1;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	ed93 7a00 	vldr	s14, [r3]
 8002556:	edd7 7a00 	vldr	s15, [r7]
 800255a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	edd3 7a05 	vldr	s15, [r3, #20]
 8002564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002568:	edc7 7a03 	vstr	s15, [r7, #12]
    filter->x1 = filter->b1 * input - filter->a1 * result + filter->x2;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002572:	edd7 7a00 	vldr	s15, [r7]
 8002576:	ee27 7a27 	vmul.f32	s14, s14, s15
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	edd3 6a03 	vldr	s13, [r3, #12]
 8002580:	edd7 7a03 	vldr	s15, [r7, #12]
 8002584:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002588:	ee37 7a67 	vsub.f32	s14, s14, s15
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	edc3 7a05 	vstr	s15, [r3, #20]
    filter->x2 = filter->b2 * input - filter->a2 * result;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	ed93 7a02 	vldr	s14, [r3, #8]
 80025a2:	edd7 7a00 	vldr	s15, [r7]
 80025a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	edd3 6a04 	vldr	s13, [r3, #16]
 80025b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80025b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	edc3 7a06 	vstr	s15, [r3, #24]
    return result;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	ee07 3a90 	vmov	s15, r3
}
 80025c8:	eeb0 0a67 	vmov.f32	s0, s15
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
	...

080025d8 <init_pt1Filter>:


void init_pt1Filter(pt1Filter_t *filter,float f_cut, float dT)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	ed87 0a02 	vstr	s0, [r7, #8]
 80025e4:	edc7 0a01 	vstr	s1, [r7, #4]
    float RC = 1 / (2 * M_PI * f_cut);
 80025e8:	68b8      	ldr	r0, [r7, #8]
 80025ea:	f7fd ffd5 	bl	8000598 <__aeabi_f2d>
 80025ee:	a315      	add	r3, pc, #84	; (adr r3, 8002644 <init_pt1Filter+0x6c>)
 80025f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f4:	f7fe f828 	bl	8000648 <__aeabi_dmul>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	f04f 0000 	mov.w	r0, #0
 8002600:	490f      	ldr	r1, [pc, #60]	; (8002640 <init_pt1Filter+0x68>)
 8002602:	f7fe f94b 	bl	800089c <__aeabi_ddiv>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f7fe faf3 	bl	8000bf8 <__aeabi_d2f>
 8002612:	4603      	mov	r3, r0
 8002614:	617b      	str	r3, [r7, #20]
    filter->k  = dT / (RC + dT);
 8002616:	ed97 7a05 	vldr	s14, [r7, #20]
 800261a:	edd7 7a01 	vldr	s15, [r7, #4]
 800261e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002622:	edd7 6a01 	vldr	s13, [r7, #4]
 8002626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	edc3 7a00 	vstr	s15, [r3]
    filter->state = 0.0f;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	605a      	str	r2, [r3, #4]
}
 8002638:	bf00      	nop
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	3ff00000 	.word	0x3ff00000
 8002644:	54442d18 	.word	0x54442d18
 8002648:	401921fb 	.word	0x401921fb

0800264c <pt1FilterApply>:

 float pt1FilterApply(pt1Filter_t *filter, float input)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	ed87 0a00 	vstr	s0, [r7]
    filter->state = filter->state + filter->k * (input - filter->state);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	ed93 7a01 	vldr	s14, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	edd3 6a00 	vldr	s13, [r3]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	edd3 7a01 	vldr	s15, [r3, #4]
 800266a:	ed97 6a00 	vldr	s12, [r7]
 800266e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002672:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	edc3 7a01 	vstr	s15, [r3, #4]
    return filter->state;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	ee07 3a90 	vmov	s15, r3
}
 8002688:	eeb0 0a67 	vmov.f32	s0, s15
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
	...

08002698 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	; 0x28
 800269c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269e:	f107 0314 	add.w	r3, r7, #20
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	60da      	str	r2, [r3, #12]
 80026ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ae:	4b2e      	ldr	r3, [pc, #184]	; (8002768 <MX_GPIO_Init+0xd0>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	4a2d      	ldr	r2, [pc, #180]	; (8002768 <MX_GPIO_Init+0xd0>)
 80026b4:	f043 0304 	orr.w	r3, r3, #4
 80026b8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ba:	4b2b      	ldr	r3, [pc, #172]	; (8002768 <MX_GPIO_Init+0xd0>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026c6:	4b28      	ldr	r3, [pc, #160]	; (8002768 <MX_GPIO_Init+0xd0>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	4a27      	ldr	r2, [pc, #156]	; (8002768 <MX_GPIO_Init+0xd0>)
 80026cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d0:	6313      	str	r3, [r2, #48]	; 0x30
 80026d2:	4b25      	ldr	r3, [pc, #148]	; (8002768 <MX_GPIO_Init+0xd0>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026de:	4b22      	ldr	r3, [pc, #136]	; (8002768 <MX_GPIO_Init+0xd0>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	4a21      	ldr	r2, [pc, #132]	; (8002768 <MX_GPIO_Init+0xd0>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ea:	4b1f      	ldr	r3, [pc, #124]	; (8002768 <MX_GPIO_Init+0xd0>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f6:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <MX_GPIO_Init+0xd0>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	4a1b      	ldr	r2, [pc, #108]	; (8002768 <MX_GPIO_Init+0xd0>)
 80026fc:	f043 0302 	orr.w	r3, r3, #2
 8002700:	6313      	str	r3, [r2, #48]	; 0x30
 8002702:	4b19      	ldr	r3, [pc, #100]	; (8002768 <MX_GPIO_Init+0xd0>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800270e:	2200      	movs	r2, #0
 8002710:	2104      	movs	r1, #4
 8002712:	4816      	ldr	r0, [pc, #88]	; (800276c <MX_GPIO_Init+0xd4>)
 8002714:	f002 fed8 	bl	80054c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002718:	2200      	movs	r2, #0
 800271a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800271e:	4814      	ldr	r0, [pc, #80]	; (8002770 <MX_GPIO_Init+0xd8>)
 8002720:	f002 fed2 	bl	80054c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002724:	2304      	movs	r3, #4
 8002726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002728:	2301      	movs	r3, #1
 800272a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002730:	2303      	movs	r3, #3
 8002732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	4619      	mov	r1, r3
 800273a:	480c      	ldr	r0, [pc, #48]	; (800276c <MX_GPIO_Init+0xd4>)
 800273c:	f002 fd28 	bl	8005190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA13 PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002740:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002746:	2301      	movs	r3, #1
 8002748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274e:	2303      	movs	r3, #3
 8002750:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002752:	f107 0314 	add.w	r3, r7, #20
 8002756:	4619      	mov	r1, r3
 8002758:	4805      	ldr	r0, [pc, #20]	; (8002770 <MX_GPIO_Init+0xd8>)
 800275a:	f002 fd19 	bl	8005190 <HAL_GPIO_Init>

}
 800275e:	bf00      	nop
 8002760:	3728      	adds	r7, #40	; 0x28
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800
 800276c:	40020400 	.word	0x40020400
 8002770:	40020000 	.word	0x40020000

08002774 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002778:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <MX_I2C1_Init+0x74>)
 800277a:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <MX_I2C1_Init+0x78>)
 800277c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 800277e:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <MX_I2C1_Init+0x74>)
 8002780:	4a1b      	ldr	r2, [pc, #108]	; (80027f0 <MX_I2C1_Init+0x7c>)
 8002782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002784:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <MX_I2C1_Init+0x74>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800278a:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <MX_I2C1_Init+0x74>)
 800278c:	2201      	movs	r2, #1
 800278e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002790:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <MX_I2C1_Init+0x74>)
 8002792:	2200      	movs	r2, #0
 8002794:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002796:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <MX_I2C1_Init+0x74>)
 8002798:	2200      	movs	r2, #0
 800279a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800279c:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <MX_I2C1_Init+0x74>)
 800279e:	2200      	movs	r2, #0
 80027a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027a2:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <MX_I2C1_Init+0x74>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027a8:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <MX_I2C1_Init+0x74>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027ae:	480e      	ldr	r0, [pc, #56]	; (80027e8 <MX_I2C1_Init+0x74>)
 80027b0:	f002 fea4 	bl	80054fc <HAL_I2C_Init>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80027ba:	f001 f951 	bl	8003a60 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027be:	2100      	movs	r1, #0
 80027c0:	4809      	ldr	r0, [pc, #36]	; (80027e8 <MX_I2C1_Init+0x74>)
 80027c2:	f003 fb8f 	bl	8005ee4 <HAL_I2CEx_ConfigAnalogFilter>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80027cc:	f001 f948 	bl	8003a60 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80027d0:	2100      	movs	r1, #0
 80027d2:	4805      	ldr	r0, [pc, #20]	; (80027e8 <MX_I2C1_Init+0x74>)
 80027d4:	f003 fbd1 	bl	8005f7a <HAL_I2CEx_ConfigDigitalFilter>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80027de:	f001 f93f 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20001670 	.word	0x20001670
 80027ec:	40005400 	.word	0x40005400
 80027f0:	6000030d 	.word	0x6000030d

080027f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08a      	sub	sp, #40	; 0x28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a1b      	ldr	r2, [pc, #108]	; (8002880 <HAL_I2C_MspInit+0x8c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d130      	bne.n	8002878 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002816:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <HAL_I2C_MspInit+0x90>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4a1a      	ldr	r2, [pc, #104]	; (8002884 <HAL_I2C_MspInit+0x90>)
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	6313      	str	r3, [r2, #48]	; 0x30
 8002822:	4b18      	ldr	r3, [pc, #96]	; (8002884 <HAL_I2C_MspInit+0x90>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800282e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002834:	2312      	movs	r3, #18
 8002836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002838:	2301      	movs	r3, #1
 800283a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283c:	2303      	movs	r3, #3
 800283e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002840:	2304      	movs	r3, #4
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	4619      	mov	r1, r3
 800284a:	480f      	ldr	r0, [pc, #60]	; (8002888 <HAL_I2C_MspInit+0x94>)
 800284c:	f002 fca0 	bl	8005190 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002850:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <HAL_I2C_MspInit+0x90>)
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	4a0b      	ldr	r2, [pc, #44]	; (8002884 <HAL_I2C_MspInit+0x90>)
 8002856:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800285a:	6413      	str	r3, [r2, #64]	; 0x40
 800285c:	4b09      	ldr	r3, [pc, #36]	; (8002884 <HAL_I2C_MspInit+0x90>)
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8002868:	2200      	movs	r2, #0
 800286a:	2101      	movs	r1, #1
 800286c:	201f      	movs	r0, #31
 800286e:	f002 f84e 	bl	800490e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002872:	201f      	movs	r0, #31
 8002874:	f002 f867 	bl	8004946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002878:	bf00      	nop
 800287a:	3728      	adds	r7, #40	; 0x28
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40005400 	.word	0x40005400
 8002884:	40023800 	.word	0x40023800
 8002888:	40020400 	.word	0x40020400

0800288c <configure_ibus>:

uint8_t ibus_ptr;
pt1Filter_t roll_flt1,pitch_flt1,yaw_flt1;

void configure_ibus(UART_HandleTypeDef *huart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	init_pt1Filter(&roll_flt1,23,0.007);
 8002894:	eddf 0a18 	vldr	s1, [pc, #96]	; 80028f8 <configure_ibus+0x6c>
 8002898:	eeb3 0a07 	vmov.f32	s0, #55	; 0x41b80000  23.0
 800289c:	4817      	ldr	r0, [pc, #92]	; (80028fc <configure_ibus+0x70>)
 800289e:	f7ff fe9b 	bl	80025d8 <init_pt1Filter>
	init_pt1Filter(&pitch_flt1,23,0.007);
 80028a2:	eddf 0a15 	vldr	s1, [pc, #84]	; 80028f8 <configure_ibus+0x6c>
 80028a6:	eeb3 0a07 	vmov.f32	s0, #55	; 0x41b80000  23.0
 80028aa:	4815      	ldr	r0, [pc, #84]	; (8002900 <configure_ibus+0x74>)
 80028ac:	f7ff fe94 	bl	80025d8 <init_pt1Filter>
	init_pt1Filter(&yaw_flt1,23,0.007);
 80028b0:	eddf 0a11 	vldr	s1, [pc, #68]	; 80028f8 <configure_ibus+0x6c>
 80028b4:	eeb3 0a07 	vmov.f32	s0, #55	; 0x41b80000  23.0
 80028b8:	4812      	ldr	r0, [pc, #72]	; (8002904 <configure_ibus+0x78>)
 80028ba:	f7ff fe8d 	bl	80025d8 <init_pt1Filter>
while (ibus[0] != ((0x20) | (0x40 << 8)))
 80028be:	e005      	b.n	80028cc <configure_ibus+0x40>
{
	HAL_UART_Receive(huart,&ibus, 3,100);
 80028c0:	2364      	movs	r3, #100	; 0x64
 80028c2:	2203      	movs	r2, #3
 80028c4:	4910      	ldr	r1, [pc, #64]	; (8002908 <configure_ibus+0x7c>)
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f006 fbe9 	bl	800909e <HAL_UART_Receive>
while (ibus[0] != ((0x20) | (0x40 << 8)))
 80028cc:	4b0e      	ldr	r3, [pc, #56]	; (8002908 <configure_ibus+0x7c>)
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	f244 0220 	movw	r2, #16416	; 0x4020
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d1f3      	bne.n	80028c0 <configure_ibus+0x34>
	//printf("%i 	%i\r\n",ibus[0], (int16_t)((0x20 << 8) | 0x40));
	//HAL_Delay(1);
}
//HAL_UART_Receive(huart,&ibus, 32,1000);
//HAL_Delay(1);
HAL_UART_Receive(huart,&ibus, (IBUS_BUFFER_LEN-3),100);
 80028d8:	2364      	movs	r3, #100	; 0x64
 80028da:	221d      	movs	r2, #29
 80028dc:	490a      	ldr	r1, [pc, #40]	; (8002908 <configure_ibus+0x7c>)
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f006 fbdd 	bl	800909e <HAL_UART_Receive>
HAL_UART_Receive_DMA(huart,&ibus, IBUS_BUFFER_LEN);
 80028e4:	2220      	movs	r2, #32
 80028e6:	4908      	ldr	r1, [pc, #32]	; (8002908 <configure_ibus+0x7c>)
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f006 fce5 	bl	80092b8 <HAL_UART_Receive_DMA>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	3be56042 	.word	0x3be56042
 80028fc:	200016d0 	.word	0x200016d0
 8002900:	200016c8 	.word	0x200016c8
 8002904:	200016bc 	.word	0x200016bc
 8002908:	200013a8 	.word	0x200013a8
 800290c:	00000000 	.word	0x00000000

08002910 <ibus_callback>:

void ibus_callback(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
InputR = pt1FilterApply(&roll_flt1,(((float)ibus[2] - 1500)*(M_PI/2500.0f)));
 8002914:	4b3a      	ldr	r3, [pc, #232]	; (8002a00 <ibus_callback+0xf0>)
 8002916:	889b      	ldrh	r3, [r3, #4]
 8002918:	ee07 3a90 	vmov	s15, r3
 800291c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002920:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002a04 <ibus_callback+0xf4>
 8002924:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002928:	ee17 0a90 	vmov	r0, s15
 800292c:	f7fd fe34 	bl	8000598 <__aeabi_f2d>
 8002930:	a331      	add	r3, pc, #196	; (adr r3, 80029f8 <ibus_callback+0xe8>)
 8002932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002936:	f7fd fe87 	bl	8000648 <__aeabi_dmul>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4610      	mov	r0, r2
 8002940:	4619      	mov	r1, r3
 8002942:	f7fe f959 	bl	8000bf8 <__aeabi_d2f>
 8002946:	4603      	mov	r3, r0
 8002948:	ee00 3a10 	vmov	s0, r3
 800294c:	482e      	ldr	r0, [pc, #184]	; (8002a08 <ibus_callback+0xf8>)
 800294e:	f7ff fe7d 	bl	800264c <pt1FilterApply>
 8002952:	eef0 7a40 	vmov.f32	s15, s0
 8002956:	4b2d      	ldr	r3, [pc, #180]	; (8002a0c <ibus_callback+0xfc>)
 8002958:	edc3 7a00 	vstr	s15, [r3]
InputP = pt1FilterApply(&pitch_flt1,(((float)ibus[1] - 1500)*(M_PI/2500.0f)));
 800295c:	4b28      	ldr	r3, [pc, #160]	; (8002a00 <ibus_callback+0xf0>)
 800295e:	885b      	ldrh	r3, [r3, #2]
 8002960:	ee07 3a90 	vmov	s15, r3
 8002964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002968:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002a04 <ibus_callback+0xf4>
 800296c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002970:	ee17 0a90 	vmov	r0, s15
 8002974:	f7fd fe10 	bl	8000598 <__aeabi_f2d>
 8002978:	a31f      	add	r3, pc, #124	; (adr r3, 80029f8 <ibus_callback+0xe8>)
 800297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297e:	f7fd fe63 	bl	8000648 <__aeabi_dmul>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4610      	mov	r0, r2
 8002988:	4619      	mov	r1, r3
 800298a:	f7fe f935 	bl	8000bf8 <__aeabi_d2f>
 800298e:	4603      	mov	r3, r0
 8002990:	ee00 3a10 	vmov	s0, r3
 8002994:	481e      	ldr	r0, [pc, #120]	; (8002a10 <ibus_callback+0x100>)
 8002996:	f7ff fe59 	bl	800264c <pt1FilterApply>
 800299a:	eef0 7a40 	vmov.f32	s15, s0
 800299e:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <ibus_callback+0x104>)
 80029a0:	edc3 7a00 	vstr	s15, [r3]
InputY = pt1FilterApply(&yaw_flt1,(((float)ibus[4] - 1500))*8);
 80029a4:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <ibus_callback+0xf0>)
 80029a6:	891b      	ldrh	r3, [r3, #8]
 80029a8:	ee07 3a90 	vmov	s15, r3
 80029ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029b0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002a04 <ibus_callback+0xf4>
 80029b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029b8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80029bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029c0:	eeb0 0a67 	vmov.f32	s0, s15
 80029c4:	4814      	ldr	r0, [pc, #80]	; (8002a18 <ibus_callback+0x108>)
 80029c6:	f7ff fe41 	bl	800264c <pt1FilterApply>
 80029ca:	eef0 7a40 	vmov.f32	s15, s0
 80029ce:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <ibus_callback+0x10c>)
 80029d0:	edc3 7a00 	vstr	s15, [r3]
InputT = ((float)ibus[3] - 1000);
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <ibus_callback+0xf0>)
 80029d6:	88db      	ldrh	r3, [r3, #6]
 80029d8:	ee07 3a90 	vmov	s15, r3
 80029dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002a20 <ibus_callback+0x110>
 80029e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <ibus_callback+0x114>)
 80029ea:	edc3 7a00 	vstr	s15, [r3]
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	f3af 8000 	nop.w
 80029f8:	c53c5b02 	.word	0xc53c5b02
 80029fc:	3f5496b7 	.word	0x3f5496b7
 8002a00:	200013a8 	.word	0x200013a8
 8002a04:	44bb8000 	.word	0x44bb8000
 8002a08:	200016d0 	.word	0x200016d0
 8002a0c:	20001318 	.word	0x20001318
 8002a10:	200016c8 	.word	0x200016c8
 8002a14:	20001430 	.word	0x20001430
 8002a18:	200016bc 	.word	0x200016bc
 8002a1c:	2000135c 	.word	0x2000135c
 8002a20:	447a0000 	.word	0x447a0000
 8002a24:	2000139c 	.word	0x2000139c

08002a28 <ReadFlashImuOffsets>:

}


void ReadFlashImuOffsets(uint32_t flash_addres, imu_t *data)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
	data->accx_offset = *(float*)(flash_addres);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	601a      	str	r2, [r3, #0]
	data->accy_offset = *(float*)(flash_addres + 4);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	605a      	str	r2, [r3, #4]
	data->accz_offset = *(float*)(flash_addres + 8);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3308      	adds	r3, #8
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	609a      	str	r2, [r3, #8]
	data->gyrx_offset = *(float*)(flash_addres + 12);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	330c      	adds	r3, #12
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	60da      	str	r2, [r3, #12]
	data->gyry_offset = *(float*)(flash_addres + 16);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3310      	adds	r3, #16
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	611a      	str	r2, [r3, #16]
	data->gyrz_offset = *(float*)(flash_addres + 20);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3314      	adds	r3, #20
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	615a      	str	r2, [r3, #20]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <configure_imu>:




void configure_imu (SPI_HandleTypeDef *hspi123,GPIO_TypeDef *GPIOx123, uint16_t GPIO_Pin123)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	4613      	mov	r3, r2
 8002a84:	80fb      	strh	r3, [r7, #6]

	ReadFlashImuOffsets(0x08040000,&IMU);
 8002a86:	492f      	ldr	r1, [pc, #188]	; (8002b44 <configure_imu+0xcc>)
 8002a88:	482f      	ldr	r0, [pc, #188]	; (8002b48 <configure_imu+0xd0>)
 8002a8a:	f7ff ffcd 	bl	8002a28 <ReadFlashImuOffsets>


	init_biquad_filter(&gxbi,80.0f,4000.0f);
 8002a8e:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8002b4c <configure_imu+0xd4>
 8002a92:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8002b50 <configure_imu+0xd8>
 8002a96:	482f      	ldr	r0, [pc, #188]	; (8002b54 <configure_imu+0xdc>)
 8002a98:	f7ff fc8e 	bl	80023b8 <init_biquad_filter>
	init_biquad_filter(&gybi,80.0f,4000.0f);
 8002a9c:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8002b4c <configure_imu+0xd4>
 8002aa0:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8002b50 <configure_imu+0xd8>
 8002aa4:	482c      	ldr	r0, [pc, #176]	; (8002b58 <configure_imu+0xe0>)
 8002aa6:	f7ff fc87 	bl	80023b8 <init_biquad_filter>
	init_biquad_filter(&gzbi,80.0f,4000.0f);
 8002aaa:	eddf 0a28 	vldr	s1, [pc, #160]	; 8002b4c <configure_imu+0xd4>
 8002aae:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8002b50 <configure_imu+0xd8>
 8002ab2:	482a      	ldr	r0, [pc, #168]	; (8002b5c <configure_imu+0xe4>)
 8002ab4:	f7ff fc80 	bl	80023b8 <init_biquad_filter>

	IMU_hspi = hspi123;
 8002ab8:	4a29      	ldr	r2, [pc, #164]	; (8002b60 <configure_imu+0xe8>)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6013      	str	r3, [r2, #0]
	IMU_CS_GPIOx = GPIOx123;
 8002abe:	4a29      	ldr	r2, [pc, #164]	; (8002b64 <configure_imu+0xec>)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	6013      	str	r3, [r2, #0]
	IMU_CS_pin = GPIO_Pin123;
 8002ac4:	4a28      	ldr	r2, [pc, #160]	; (8002b68 <configure_imu+0xf0>)
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	8013      	strh	r3, [r2, #0]

	IMU_write_bits(0x6A,0x10);
 8002aca:	2110      	movs	r1, #16
 8002acc:	206a      	movs	r0, #106	; 0x6a
 8002ace:	f000 f84d 	bl	8002b6c <IMU_write_bits>
	HAL_Delay(10);
 8002ad2:	200a      	movs	r0, #10
 8002ad4:	f001 fe1c 	bl	8004710 <HAL_Delay>


	IMU_write_bits(0x6B,0x80);
 8002ad8:	2180      	movs	r1, #128	; 0x80
 8002ada:	206b      	movs	r0, #107	; 0x6b
 8002adc:	f000 f846 	bl	8002b6c <IMU_write_bits>
	HAL_Delay(100);
 8002ae0:	2064      	movs	r0, #100	; 0x64
 8002ae2:	f001 fe15 	bl	8004710 <HAL_Delay>

	IMU_write_bits(0x68,0x7);
 8002ae6:	2107      	movs	r1, #7
 8002ae8:	2068      	movs	r0, #104	; 0x68
 8002aea:	f000 f83f 	bl	8002b6c <IMU_write_bits>
	HAL_Delay(100);
 8002aee:	2064      	movs	r0, #100	; 0x64
 8002af0:	f001 fe0e 	bl	8004710 <HAL_Delay>

	IMU_write_bits(0x68,0b000000000);
 8002af4:	2100      	movs	r1, #0
 8002af6:	2068      	movs	r0, #104	; 0x68
 8002af8:	f000 f838 	bl	8002b6c <IMU_write_bits>
	HAL_Delay(10);
 8002afc:	200a      	movs	r0, #10
 8002afe:	f001 fe07 	bl	8004710 <HAL_Delay>

	IMU_write_bits(0x6B,0b000000000);
 8002b02:	2100      	movs	r1, #0
 8002b04:	206b      	movs	r0, #107	; 0x6b
 8002b06:	f000 f831 	bl	8002b6c <IMU_write_bits>
	HAL_Delay(10);
 8002b0a:	200a      	movs	r0, #10
 8002b0c:	f001 fe00 	bl	8004710 <HAL_Delay>

	IMU_write_bits(0x6A,0x10);
 8002b10:	2110      	movs	r1, #16
 8002b12:	206a      	movs	r0, #106	; 0x6a
 8002b14:	f000 f82a 	bl	8002b6c <IMU_write_bits>
	HAL_Delay(10);
 8002b18:	200a      	movs	r0, #10
 8002b1a:	f001 fdf9 	bl	8004710 <HAL_Delay>

	IMU_write_bits(0x1C,0b00010000);
 8002b1e:	2110      	movs	r1, #16
 8002b20:	201c      	movs	r0, #28
 8002b22:	f000 f823 	bl	8002b6c <IMU_write_bits>
	HAL_Delay(10);
 8002b26:	200a      	movs	r0, #10
 8002b28:	f001 fdf2 	bl	8004710 <HAL_Delay>

	IMU_write_bits(0x1B,0b00011000);
 8002b2c:	2118      	movs	r1, #24
 8002b2e:	201b      	movs	r0, #27
 8002b30:	f000 f81c 	bl	8002b6c <IMU_write_bits>
	HAL_Delay(100);
 8002b34:	2064      	movs	r0, #100	; 0x64
 8002b36:	f001 fdeb 	bl	8004710 <HAL_Delay>
	///}




}
 8002b3a:	bf00      	nop
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	200012bc 	.word	0x200012bc
 8002b48:	08040000 	.word	0x08040000
 8002b4c:	457a0000 	.word	0x457a0000
 8002b50:	42a00000 	.word	0x42a00000
 8002b54:	200016e0 	.word	0x200016e0
 8002b58:	2000172c 	.word	0x2000172c
 8002b5c:	20001704 	.word	0x20001704
 8002b60:	200016d8 	.word	0x200016d8
 8002b64:	20001728 	.word	0x20001728
 8002b68:	200016dc 	.word	0x200016dc

08002b6c <IMU_write_bits>:


void IMU_write_bits(uint8_t adress,uint8_t data)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	460a      	mov	r2, r1
 8002b76:	71fb      	strb	r3, [r7, #7]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	71bb      	strb	r3, [r7, #6]
	uint8_t data_tx[2] = {adress,data};
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	733b      	strb	r3, [r7, #12]
 8002b80:	79bb      	ldrb	r3, [r7, #6]
 8002b82:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(IMU_CS_GPIOx, IMU_CS_pin, GPIO_PIN_RESET);
 8002b84:	4b0d      	ldr	r3, [pc, #52]	; (8002bbc <IMU_write_bits+0x50>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0d      	ldr	r2, [pc, #52]	; (8002bc0 <IMU_write_bits+0x54>)
 8002b8a:	8811      	ldrh	r1, [r2, #0]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f002 fc9a 	bl	80054c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(IMU_hspi, &data_tx[0], 2, 100);
 8002b94:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <IMU_write_bits+0x58>)
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	f107 010c 	add.w	r1, r7, #12
 8002b9c:	2364      	movs	r3, #100	; 0x64
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f004 fb07 	bl	80071b2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(IMU_CS_GPIOx, IMU_CS_pin, GPIO_PIN_SET);
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <IMU_write_bits+0x50>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <IMU_write_bits+0x54>)
 8002baa:	8811      	ldrh	r1, [r2, #0]
 8002bac:	2201      	movs	r2, #1
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f002 fc8a 	bl	80054c8 <HAL_GPIO_WritePin>
}
 8002bb4:	bf00      	nop
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20001728 	.word	0x20001728
 8002bc0:	200016dc 	.word	0x200016dc
 8002bc4:	200016d8 	.word	0x200016d8

08002bc8 <IMU_read>:

void IMU_read (imu_t * imu)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af02      	add	r7, sp, #8
 8002bce:	6078      	str	r0, [r7, #4]
HAL_GPIO_WritePin(IMU_CS_GPIOx, IMU_CS_pin, GPIO_PIN_RESET);
 8002bd0:	4b66      	ldr	r3, [pc, #408]	; (8002d6c <IMU_read+0x1a4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a66      	ldr	r2, [pc, #408]	; (8002d70 <IMU_read+0x1a8>)
 8002bd6:	8811      	ldrh	r1, [r2, #0]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f002 fc74 	bl	80054c8 <HAL_GPIO_WritePin>
HAL_SPI_TransmitReceive(IMU_hspi, &IMU_data_adress, &IMU_data, 14,100);
 8002be0:	4b64      	ldr	r3, [pc, #400]	; (8002d74 <IMU_read+0x1ac>)
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	2364      	movs	r3, #100	; 0x64
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	230e      	movs	r3, #14
 8002bea:	4a63      	ldr	r2, [pc, #396]	; (8002d78 <IMU_read+0x1b0>)
 8002bec:	4963      	ldr	r1, [pc, #396]	; (8002d7c <IMU_read+0x1b4>)
 8002bee:	f004 fc4e 	bl	800748e <HAL_SPI_TransmitReceive>
HAL_GPIO_WritePin(IMU_CS_GPIOx, IMU_CS_pin, GPIO_PIN_SET);
 8002bf2:	4b5e      	ldr	r3, [pc, #376]	; (8002d6c <IMU_read+0x1a4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a5e      	ldr	r2, [pc, #376]	; (8002d70 <IMU_read+0x1a8>)
 8002bf8:	8811      	ldrh	r1, [r2, #0]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f002 fc63 	bl	80054c8 <HAL_GPIO_WritePin>

imu->accx = ((int16_t)((IMU_data[0]) + (IMU_data[1]<<8))-imu->accx_offset);
 8002c02:	4b5d      	ldr	r3, [pc, #372]	; (8002d78 <IMU_read+0x1b0>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	4b5b      	ldr	r3, [pc, #364]	; (8002d78 <IMU_read+0x1b0>)
 8002c0a:	785b      	ldrb	r3, [r3, #1]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	b21b      	sxth	r3, r3
 8002c18:	ee07 3a90 	vmov	s15, r3
 8002c1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	edd3 7a00 	vldr	s15, [r3]
 8002c26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	edc3 7a06 	vstr	s15, [r3, #24]
imu->accy = ((int16_t)((IMU_data[2]) + (IMU_data[3]<<8))-imu->accy_offset);
 8002c30:	4b51      	ldr	r3, [pc, #324]	; (8002d78 <IMU_read+0x1b0>)
 8002c32:	789b      	ldrb	r3, [r3, #2]
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	4b50      	ldr	r3, [pc, #320]	; (8002d78 <IMU_read+0x1b0>)
 8002c38:	78db      	ldrb	r3, [r3, #3]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	b21b      	sxth	r3, r3
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	edc3 7a07 	vstr	s15, [r3, #28]
imu->accz = ((int16_t)((IMU_data[4]) + (IMU_data[5]<<8))-imu->accz_offset);
 8002c5e:	4b46      	ldr	r3, [pc, #280]	; (8002d78 <IMU_read+0x1b0>)
 8002c60:	791b      	ldrb	r3, [r3, #4]
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	4b44      	ldr	r3, [pc, #272]	; (8002d78 <IMU_read+0x1b0>)
 8002c66:	795b      	ldrb	r3, [r3, #5]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	021b      	lsls	r3, r3, #8
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	b21b      	sxth	r3, r3
 8002c74:	ee07 3a90 	vmov	s15, r3
 8002c78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	edc3 7a08 	vstr	s15, [r3, #32]
imu->temp  =  (float)((IMU_data[6]) + (IMU_data[7]<<8));
 8002c8c:	4b3a      	ldr	r3, [pc, #232]	; (8002d78 <IMU_read+0x1b0>)
 8002c8e:	799b      	ldrb	r3, [r3, #6]
 8002c90:	461a      	mov	r2, r3
 8002c92:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <IMU_read+0x1b0>)
 8002c94:	79db      	ldrb	r3, [r3, #7]
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	4413      	add	r3, r2
 8002c9a:	ee07 3a90 	vmov	s15, r3
 8002c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ca2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ca6:	ee17 3a90 	vmov	r3, s15
 8002caa:	b21a      	sxth	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	861a      	strh	r2, [r3, #48]	; 0x30
imu->gyrx = biquadFilterApply(&gxbi,(int16_t)((IMU_data[8]) + (IMU_data[9]<<8))-imu->gyrx_offset);
 8002cb0:	4b31      	ldr	r3, [pc, #196]	; (8002d78 <IMU_read+0x1b0>)
 8002cb2:	7a1b      	ldrb	r3, [r3, #8]
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	4b30      	ldr	r3, [pc, #192]	; (8002d78 <IMU_read+0x1b0>)
 8002cb8:	7a5b      	ldrb	r3, [r3, #9]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	021b      	lsls	r3, r3, #8
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	b21b      	sxth	r3, r3
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	edd3 7a03 	vldr	s15, [r3, #12]
 8002cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cdc:	4828      	ldr	r0, [pc, #160]	; (8002d80 <IMU_read+0x1b8>)
 8002cde:	f7ff fc31 	bl	8002544 <biquadFilterApply>
 8002ce2:	eef0 7a40 	vmov.f32	s15, s0
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
imu->gyry = biquadFilterApply(&gybi,(int16_t)((IMU_data[10]) + (IMU_data[11]<<8))-imu->gyry_offset);
 8002cec:	4b22      	ldr	r3, [pc, #136]	; (8002d78 <IMU_read+0x1b0>)
 8002cee:	7a9b      	ldrb	r3, [r3, #10]
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <IMU_read+0x1b0>)
 8002cf4:	7adb      	ldrb	r3, [r3, #11]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	b21b      	sxth	r3, r3
 8002d02:	ee07 3a90 	vmov	s15, r3
 8002d06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d14:	eeb0 0a67 	vmov.f32	s0, s15
 8002d18:	481a      	ldr	r0, [pc, #104]	; (8002d84 <IMU_read+0x1bc>)
 8002d1a:	f7ff fc13 	bl	8002544 <biquadFilterApply>
 8002d1e:	eef0 7a40 	vmov.f32	s15, s0
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
imu->gyrz = biquadFilterApply(&gzbi,(int16_t)((IMU_data[12]) + (IMU_data[13]<<8))-imu->gyrz_offset);
 8002d28:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <IMU_read+0x1b0>)
 8002d2a:	7b1b      	ldrb	r3, [r3, #12]
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <IMU_read+0x1b0>)
 8002d30:	7b5b      	ldrb	r3, [r3, #13]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	021b      	lsls	r3, r3, #8
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	b21b      	sxth	r3, r3
 8002d3e:	ee07 3a90 	vmov	s15, r3
 8002d42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	edd3 7a05 	vldr	s15, [r3, #20]
 8002d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d50:	eeb0 0a67 	vmov.f32	s0, s15
 8002d54:	480c      	ldr	r0, [pc, #48]	; (8002d88 <IMU_read+0x1c0>)
 8002d56:	f7ff fbf5 	bl	8002544 <biquadFilterApply>
 8002d5a:	eef0 7a40 	vmov.f32	s15, s0
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 }
 8002d64:	bf00      	nop
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20001728 	.word	0x20001728
 8002d70:	200016dc 	.word	0x200016dc
 8002d74:	200016d8 	.word	0x200016d8
 8002d78:	200014c0 	.word	0x200014c0
 8002d7c:	2000000c 	.word	0x2000000c
 8002d80:	200016e0 	.word	0x200016e0
 8002d84:	2000172c 	.word	0x2000172c
 8002d88:	20001704 	.word	0x20001704

08002d8c <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 0xFFFF);
 8002d94:	1d39      	adds	r1, r7, #4
 8002d96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	4803      	ldr	r0, [pc, #12]	; (8002dac <__io_putchar+0x20>)
 8002d9e:	f006 f8eb 	bl	8008f78 <HAL_UART_Transmit>



  return ch;
 8002da2:	687b      	ldr	r3, [r7, #4]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20001aa4 	.word	0x20001aa4

08002db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002db4:	b090      	sub	sp, #64	; 0x40
 8002db6:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002db8:	f001 fc4d 	bl	8004656 <HAL_Init>

 // UART_HandleTypeDef huart4;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dbc:	f000 f8e8 	bl	8002f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dc0:	f7ff fc6a 	bl	8002698 <MX_GPIO_Init>
  MX_DMA_Init();
 8002dc4:	f7ff fac6 	bl	8002354 <MX_DMA_Init>
  MX_UART4_Init();
 8002dc8:	f001 fa6a 	bl	80042a0 <MX_UART4_Init>
  MX_SPI1_Init();
 8002dcc:	f000 fe9a 	bl	8003b04 <MX_SPI1_Init>
  MX_TIM3_Init();
 8002dd0:	f001 f8e8 	bl	8003fa4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8002dd4:	f001 f898 	bl	8003f08 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002dd8:	f001 fac2 	bl	8004360 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002ddc:	f7ff fcca 	bl	8002774 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002de0:	f001 fa8e 	bl	8004300 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8002de4:	f001 f978 	bl	80040d8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  configure_ibus(&huart2);
 8002de8:	4855      	ldr	r0, [pc, #340]	; (8002f40 <main+0x190>)
 8002dea:	f7ff fd4f 	bl	800288c <configure_ibus>


 while (opticalflow.lidar.distance == 0)
 8002dee:	e005      	b.n	8002dfc <main+0x4c>
 {
	 enable_opticalflow(&huart1);
 8002df0:	4854      	ldr	r0, [pc, #336]	; (8002f44 <main+0x194>)
 8002df2:	f000 fe3b 	bl	8003a6c <enable_opticalflow>
	 HAL_Delay(10);
 8002df6:	200a      	movs	r0, #10
 8002df8:	f001 fc8a 	bl	8004710 <HAL_Delay>
 while (opticalflow.lidar.distance == 0)
 8002dfc:	4b52      	ldr	r3, [pc, #328]	; (8002f48 <main+0x198>)
 8002dfe:	8a9b      	ldrh	r3, [r3, #20]
 8002e00:	b21b      	sxth	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f4      	beq.n	8002df0 <main+0x40>
 }

  init_biquad_filter(&delta_alt_biquad,12.0f,4000.0f);
 8002e06:	eddf 0a51 	vldr	s1, [pc, #324]	; 8002f4c <main+0x19c>
 8002e0a:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 8002e0e:	4850      	ldr	r0, [pc, #320]	; (8002f50 <main+0x1a0>)
 8002e10:	f7ff fad2 	bl	80023b8 <init_biquad_filter>

  HAL_UART_Receive_IT(&huart4, &buffer, 1);
 8002e14:	2201      	movs	r2, #1
 8002e16:	494f      	ldr	r1, [pc, #316]	; (8002f54 <main+0x1a4>)
 8002e18:	484f      	ldr	r0, [pc, #316]	; (8002f58 <main+0x1a8>)
 8002e1a:	f006 fa10 	bl	800923e <HAL_UART_Receive_IT>
 // HAL_Delay(100);
  //enable_opticalflow(&huart3);



 configure_imu (&hspi1,GPIOB,GPIO_PIN_2);
 8002e1e:	2204      	movs	r2, #4
 8002e20:	494e      	ldr	r1, [pc, #312]	; (8002f5c <main+0x1ac>)
 8002e22:	484f      	ldr	r0, [pc, #316]	; (8002f60 <main+0x1b0>)
 8002e24:	f7ff fe28 	bl	8002a78 <configure_imu>

 configure_baro(&hi2c1);
 8002e28:	484e      	ldr	r0, [pc, #312]	; (8002f64 <main+0x1b4>)
 8002e2a:	f7fe ff77 	bl	8001d1c <configure_baro>
 // calabrate_acc_gyr(&IMU);

  //HAL_Delay(10000);
 // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
HAL_TIM_Base_Start_IT(&htim2);
 8002e2e:	484e      	ldr	r0, [pc, #312]	; (8002f68 <main+0x1b8>)
 8002e30:	f004 fef8 	bl	8007c24 <HAL_TIM_Base_Start_IT>

HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002e34:	2100      	movs	r1, #0
 8002e36:	484d      	ldr	r0, [pc, #308]	; (8002f6c <main+0x1bc>)
 8002e38:	f004 ffce 	bl	8007dd8 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002e3c:	2104      	movs	r1, #4
 8002e3e:	484b      	ldr	r0, [pc, #300]	; (8002f6c <main+0x1bc>)
 8002e40:	f004 ffca 	bl	8007dd8 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002e44:	2108      	movs	r1, #8
 8002e46:	4849      	ldr	r0, [pc, #292]	; (8002f6c <main+0x1bc>)
 8002e48:	f004 ffc6 	bl	8007dd8 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002e4c:	210c      	movs	r1, #12
 8002e4e:	4847      	ldr	r0, [pc, #284]	; (8002f6c <main+0x1bc>)
 8002e50:	f004 ffc2 	bl	8007dd8 <HAL_TIM_PWM_Start>

HAL_TIM_Base_Start_IT(&htim4);
 8002e54:	4846      	ldr	r0, [pc, #280]	; (8002f70 <main+0x1c0>)
 8002e56:	f004 fee5 	bl	8007c24 <HAL_TIM_Base_Start_IT>
//printf("%f	",c20);
//printf("%f	",c21);
//printf("%f	\r\n",c30);


 while (pressure == 0){
 8002e5a:	e001      	b.n	8002e60 <main+0xb0>
	 read_baro();
 8002e5c:	f7ff f9b4 	bl	80021c8 <read_baro>
 while (pressure == 0){
 8002e60:	4b44      	ldr	r3, [pc, #272]	; (8002f74 <main+0x1c4>)
 8002e62:	edd3 7a00 	vldr	s15, [r3]
 8002e66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6e:	d0f5      	beq.n	8002e5c <main+0xac>
 }
	 // registerSetBits(dev, DPS310_REG_PRS_CFG, DPS310_PRS_CFG_BIT_PM_RATE_32HZ | DPS310_PRS_CFG_BIT_PM_PRC_16);

 InitKalmanZ (&NavZ);
 8002e70:	4841      	ldr	r0, [pc, #260]	; (8002f78 <main+0x1c8>)
 8002e72:	f7fe ff1d 	bl	8001cb0 <InitKalmanZ>
float initalAlt = pressureToAltitude(pressure);
 8002e76:	4b3f      	ldr	r3, [pc, #252]	; (8002f74 <main+0x1c4>)
 8002e78:	edd3 7a00 	vldr	s15, [r3]
 8002e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e80:	f7fe fd2c 	bl	80018dc <pressureToAltitude>
 8002e84:	ed87 0a05 	vstr	s0, [r7, #20]
	 // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
	   // HAL_SPI_TransmitReceive(&hspi1, &reg_address, &data_rx, 2, 100);
	    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);


if (failsafe > 2000)
 8002e88:	4b3c      	ldr	r3, [pc, #240]	; (8002f7c <main+0x1cc>)
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002e90:	d902      	bls.n	8002e98 <main+0xe8>
{
	safety_flag = 0;
 8002e92:	4b3b      	ldr	r3, [pc, #236]	; (8002f80 <main+0x1d0>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	701a      	strb	r2, [r3, #0]
	//printf("%f\t",*((float*)(&NavAlt)+i));
//}

//printf("%i\r\n",debug);
//printf("\r\n");
printf("%f	%f	%f	%f	%f	%f\r\n",NavAlt.BaroAlt*10,NavAlt.BaroVel,NavAlt.Pos*10,NavAlt.Vel,NavAlt.accint_delayed*400,NavAlt.VelCorr*400);
 8002e98:	4b3a      	ldr	r3, [pc, #232]	; (8002f84 <main+0x1d4>)
 8002e9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e9e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ea2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ea6:	ee17 0a90 	vmov	r0, s15
 8002eaa:	f7fd fb75 	bl	8000598 <__aeabi_f2d>
 8002eae:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002eb2:	4b34      	ldr	r3, [pc, #208]	; (8002f84 <main+0x1d4>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fd fb6e 	bl	8000598 <__aeabi_f2d>
 8002ebc:	4604      	mov	r4, r0
 8002ebe:	460d      	mov	r5, r1
 8002ec0:	4b30      	ldr	r3, [pc, #192]	; (8002f84 <main+0x1d4>)
 8002ec2:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ec6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002eca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ece:	ee17 0a90 	vmov	r0, s15
 8002ed2:	f7fd fb61 	bl	8000598 <__aeabi_f2d>
 8002ed6:	4680      	mov	r8, r0
 8002ed8:	4689      	mov	r9, r1
 8002eda:	4b2a      	ldr	r3, [pc, #168]	; (8002f84 <main+0x1d4>)
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fd fb5a 	bl	8000598 <__aeabi_f2d>
 8002ee4:	4682      	mov	sl, r0
 8002ee6:	468b      	mov	fp, r1
 8002ee8:	4b26      	ldr	r3, [pc, #152]	; (8002f84 <main+0x1d4>)
 8002eea:	edd3 7a06 	vldr	s15, [r3, #24]
 8002eee:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002f88 <main+0x1d8>
 8002ef2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ef6:	ee17 0a90 	vmov	r0, s15
 8002efa:	f7fd fb4d 	bl	8000598 <__aeabi_f2d>
 8002efe:	e9c7 0100 	strd	r0, r1, [r7]
 8002f02:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <main+0x1d4>)
 8002f04:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002f08:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002f88 <main+0x1d8>
 8002f0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f10:	ee17 0a90 	vmov	r0, s15
 8002f14:	f7fd fb40 	bl	8000598 <__aeabi_f2d>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002f20:	ed97 7b00 	vldr	d7, [r7]
 8002f24:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002f28:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002f2c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002f30:	e9cd 4500 	strd	r4, r5, [sp]
 8002f34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f38:	4814      	ldr	r0, [pc, #80]	; (8002f8c <main+0x1dc>)
 8002f3a:	f007 fad7 	bl	800a4ec <printf>
  {
 8002f3e:	e7a3      	b.n	8002e88 <main+0xd8>
 8002f40:	20001b28 	.word	0x20001b28
 8002f44:	20001a20 	.word	0x20001a20
 8002f48:	2000129c 	.word	0x2000129c
 8002f4c:	457a0000 	.word	0x457a0000
 8002f50:	20001764 	.word	0x20001764
 8002f54:	200017e8 	.word	0x200017e8
 8002f58:	20001aa4 	.word	0x20001aa4
 8002f5c:	40020400 	.word	0x40020400
 8002f60:	20001818 	.word	0x20001818
 8002f64:	20001670 	.word	0x20001670
 8002f68:	20001914 	.word	0x20001914
 8002f6c:	200018c8 	.word	0x200018c8
 8002f70:	2000187c 	.word	0x2000187c
 8002f74:	20001378 	.word	0x20001378
 8002f78:	20000a60 	.word	0x20000a60
 8002f7c:	200017fc 	.word	0x200017fc
 8002f80:	20001800 	.word	0x20001800
 8002f84:	20001454 	.word	0x20001454
 8002f88:	43c80000 	.word	0x43c80000
 8002f8c:	08010e68 	.word	0x08010e68

08002f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b0b4      	sub	sp, #208	; 0xd0
 8002f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f96:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002f9a:	2230      	movs	r2, #48	; 0x30
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f007 fa9c 	bl	800a4dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fa4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fb4:	f107 030c 	add.w	r3, r7, #12
 8002fb8:	2280      	movs	r2, #128	; 0x80
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f007 fa8d 	bl	800a4dc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002fc2:	f003 f827 	bl	8006014 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fc6:	4b3c      	ldr	r3, [pc, #240]	; (80030b8 <SystemClock_Config+0x128>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	4a3b      	ldr	r2, [pc, #236]	; (80030b8 <SystemClock_Config+0x128>)
 8002fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd2:	4b39      	ldr	r3, [pc, #228]	; (80030b8 <SystemClock_Config+0x128>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fda:	60bb      	str	r3, [r7, #8]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fde:	4b37      	ldr	r3, [pc, #220]	; (80030bc <SystemClock_Config+0x12c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a36      	ldr	r2, [pc, #216]	; (80030bc <SystemClock_Config+0x12c>)
 8002fe4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	4b34      	ldr	r3, [pc, #208]	; (80030bc <SystemClock_Config+0x12c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ff2:	607b      	str	r3, [r7, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003002:	2310      	movs	r3, #16
 8003004:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003008:	2302      	movs	r3, #2
 800300a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800300e:	2300      	movs	r3, #0
 8003010:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003014:	2308      	movs	r3, #8
 8003016:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 800301a:	23d8      	movs	r3, #216	; 0xd8
 800301c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003020:	2302      	movs	r3, #2
 8003022:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003026:	2302      	movs	r3, #2
 8003028:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800302c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003030:	4618      	mov	r0, r3
 8003032:	f003 f84f 	bl	80060d4 <HAL_RCC_OscConfig>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800303c:	f000 fd10 	bl	8003a60 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003040:	f002 fff8 	bl	8006034 <HAL_PWREx_EnableOverDrive>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800304a:	f000 fd09 	bl	8003a60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800304e:	230f      	movs	r3, #15
 8003050:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003054:	2302      	movs	r3, #2
 8003056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800305a:	2300      	movs	r3, #0
 800305c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003060:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003064:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800306c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003070:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003074:	2107      	movs	r1, #7
 8003076:	4618      	mov	r0, r3
 8003078:	f003 fad0 	bl	800661c <HAL_RCC_ClockConfig>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8003082:	f000 fced 	bl	8003a60 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8003086:	f244 23c0 	movw	r3, #17088	; 0x42c0
 800308a:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800308c:	2300      	movs	r3, #0
 800308e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003090:	2300      	movs	r3, #0
 8003092:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003094:	2300      	movs	r3, #0
 8003096:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003098:	2300      	movs	r3, #0
 800309a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800309c:	f107 030c 	add.w	r3, r7, #12
 80030a0:	4618      	mov	r0, r3
 80030a2:	f003 fc91 	bl	80069c8 <HAL_RCCEx_PeriphCLKConfig>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <SystemClock_Config+0x120>
  {
    Error_Handler();
 80030ac:	f000 fcd8 	bl	8003a60 <Error_Handler>
  }
}
 80030b0:	bf00      	nop
 80030b2:	37d0      	adds	r7, #208	; 0xd0
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40007000 	.word	0x40007000

080030c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void PID (void);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a13      	ldr	r2, [pc, #76]	; (8003118 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d119      	bne.n	8003104 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
		debug2++;
 80030d0:	4b12      	ldr	r3, [pc, #72]	; (800311c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	3301      	adds	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	4b10      	ldr	r3, [pc, #64]	; (800311c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80030da:	801a      	strh	r2, [r3, #0]
			failsafe++;
 80030dc:	4b10      	ldr	r3, [pc, #64]	; (8003120 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	3301      	adds	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80030e6:	801a      	strh	r2, [r3, #0]
			IMU_read(&IMU);
 80030e8:	480e      	ldr	r0, [pc, #56]	; (8003124 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80030ea:	f7ff fd6d 	bl	8002bc8 <IMU_read>
			PID();
 80030ee:	f000 f86b 	bl	80031c8 <PID>
			updateIMU(&IMU);
 80030f2:	480c      	ldr	r0, [pc, #48]	; (8003124 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80030f4:	f7fd ff4c 	bl	8000f90 <updateIMU>
			debug++;
 80030f8:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	3301      	adds	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	4b09      	ldr	r3, [pc, #36]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003102:	801a      	strh	r2, [r3, #0]
		}

	if (htim == &htim4)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a09      	ldr	r2, [pc, #36]	; (800312c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d101      	bne.n	8003110 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		//debug++;
		read_baro();
 800310c:	f7ff f85c 	bl	80021c8 <read_baro>
	}

}
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20001914 	.word	0x20001914
 800311c:	20001760 	.word	0x20001760
 8003120:	200017fc 	.word	0x200017fc
 8003124:	200012bc 	.word	0x200012bc
 8003128:	2000175e 	.word	0x2000175e
 800312c:	2000187c 	.word	0x2000187c

08003130 <update_motors>:

void update_motors (uint16_t M1,uint16_t M2,uint16_t M3,uint16_t M4)
{
 8003130:	b490      	push	{r4, r7}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	4604      	mov	r4, r0
 8003138:	4608      	mov	r0, r1
 800313a:	4611      	mov	r1, r2
 800313c:	461a      	mov	r2, r3
 800313e:	4623      	mov	r3, r4
 8003140:	80fb      	strh	r3, [r7, #6]
 8003142:	4603      	mov	r3, r0
 8003144:	80bb      	strh	r3, [r7, #4]
 8003146:	460b      	mov	r3, r1
 8003148:	807b      	strh	r3, [r7, #2]
 800314a:	4613      	mov	r3, r2
 800314c:	803b      	strh	r3, [r7, #0]
TIM3->CCR1 = (M3/31)+600;
 800314e:	887a      	ldrh	r2, [r7, #2]
 8003150:	4b1b      	ldr	r3, [pc, #108]	; (80031c0 <update_motors+0x90>)
 8003152:	fba3 1302 	umull	r1, r3, r3, r2
 8003156:	1ad2      	subs	r2, r2, r3
 8003158:	0852      	lsrs	r2, r2, #1
 800315a:	4413      	add	r3, r2
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	b29b      	uxth	r3, r3
 8003160:	f503 7216 	add.w	r2, r3, #600	; 0x258
 8003164:	4b17      	ldr	r3, [pc, #92]	; (80031c4 <update_motors+0x94>)
 8003166:	635a      	str	r2, [r3, #52]	; 0x34
TIM3->CCR2 = (M1/31)+600;
 8003168:	88fa      	ldrh	r2, [r7, #6]
 800316a:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <update_motors+0x90>)
 800316c:	fba3 1302 	umull	r1, r3, r3, r2
 8003170:	1ad2      	subs	r2, r2, r3
 8003172:	0852      	lsrs	r2, r2, #1
 8003174:	4413      	add	r3, r2
 8003176:	091b      	lsrs	r3, r3, #4
 8003178:	b29b      	uxth	r3, r3
 800317a:	f503 7216 	add.w	r2, r3, #600	; 0x258
 800317e:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <update_motors+0x94>)
 8003180:	639a      	str	r2, [r3, #56]	; 0x38
TIM3->CCR3 = (M4/31)+600;
 8003182:	883a      	ldrh	r2, [r7, #0]
 8003184:	4b0e      	ldr	r3, [pc, #56]	; (80031c0 <update_motors+0x90>)
 8003186:	fba3 1302 	umull	r1, r3, r3, r2
 800318a:	1ad2      	subs	r2, r2, r3
 800318c:	0852      	lsrs	r2, r2, #1
 800318e:	4413      	add	r3, r2
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	b29b      	uxth	r3, r3
 8003194:	f503 7216 	add.w	r2, r3, #600	; 0x258
 8003198:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <update_motors+0x94>)
 800319a:	63da      	str	r2, [r3, #60]	; 0x3c
TIM3->CCR4 = (M2/31)+600;
 800319c:	88ba      	ldrh	r2, [r7, #4]
 800319e:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <update_motors+0x90>)
 80031a0:	fba3 1302 	umull	r1, r3, r3, r2
 80031a4:	1ad2      	subs	r2, r2, r3
 80031a6:	0852      	lsrs	r2, r2, #1
 80031a8:	4413      	add	r3, r2
 80031aa:	091b      	lsrs	r3, r3, #4
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	f503 7216 	add.w	r2, r3, #600	; 0x258
 80031b2:	4b04      	ldr	r3, [pc, #16]	; (80031c4 <update_motors+0x94>)
 80031b4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80031b6:	bf00      	nop
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc90      	pop	{r4, r7}
 80031be:	4770      	bx	lr
 80031c0:	08421085 	.word	0x08421085
 80031c4:	40000400 	.word	0x40000400

080031c8 <PID>:

float constrainf(float input,float max, float min);

void motor_mix (void);
void PID (void)
{
 80031c8:	b5b0      	push	{r4, r5, r7, lr}
 80031ca:	af00      	add	r7, sp, #0
	dinputR = InputfltR;
 80031cc:	4bb0      	ldr	r3, [pc, #704]	; (8003490 <PID+0x2c8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4ab0      	ldr	r2, [pc, #704]	; (8003494 <PID+0x2cc>)
 80031d2:	6013      	str	r3, [r2, #0]
	dinputP = InputfltP;
 80031d4:	4bb0      	ldr	r3, [pc, #704]	; (8003498 <PID+0x2d0>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4ab0      	ldr	r2, [pc, #704]	; (800349c <PID+0x2d4>)
 80031da:	6013      	str	r3, [r2, #0]

	InputfltR = 0.958*(InputfltR) + 0.015*(InputR*938.719727597f);
 80031dc:	4bac      	ldr	r3, [pc, #688]	; (8003490 <PID+0x2c8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd f9d9 	bl	8000598 <__aeabi_f2d>
 80031e6:	a3a6      	add	r3, pc, #664	; (adr r3, 8003480 <PID+0x2b8>)
 80031e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ec:	f7fd fa2c 	bl	8000648 <__aeabi_dmul>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4614      	mov	r4, r2
 80031f6:	461d      	mov	r5, r3
 80031f8:	4ba9      	ldr	r3, [pc, #676]	; (80034a0 <PID+0x2d8>)
 80031fa:	edd3 7a00 	vldr	s15, [r3]
 80031fe:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80034a4 <PID+0x2dc>
 8003202:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003206:	ee17 0a90 	vmov	r0, s15
 800320a:	f7fd f9c5 	bl	8000598 <__aeabi_f2d>
 800320e:	a39e      	add	r3, pc, #632	; (adr r3, 8003488 <PID+0x2c0>)
 8003210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003214:	f7fd fa18 	bl	8000648 <__aeabi_dmul>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4620      	mov	r0, r4
 800321e:	4629      	mov	r1, r5
 8003220:	f7fd f85c 	bl	80002dc <__adddf3>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4610      	mov	r0, r2
 800322a:	4619      	mov	r1, r3
 800322c:	f7fd fce4 	bl	8000bf8 <__aeabi_d2f>
 8003230:	4603      	mov	r3, r0
 8003232:	4a97      	ldr	r2, [pc, #604]	; (8003490 <PID+0x2c8>)
 8003234:	6013      	str	r3, [r2, #0]
	InputfltP = 0.958*(InputfltP) + 0.015*(InputP*938.719727597f);
 8003236:	4b98      	ldr	r3, [pc, #608]	; (8003498 <PID+0x2d0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd f9ac 	bl	8000598 <__aeabi_f2d>
 8003240:	a38f      	add	r3, pc, #572	; (adr r3, 8003480 <PID+0x2b8>)
 8003242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003246:	f7fd f9ff 	bl	8000648 <__aeabi_dmul>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	4614      	mov	r4, r2
 8003250:	461d      	mov	r5, r3
 8003252:	4b95      	ldr	r3, [pc, #596]	; (80034a8 <PID+0x2e0>)
 8003254:	edd3 7a00 	vldr	s15, [r3]
 8003258:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80034a4 <PID+0x2dc>
 800325c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003260:	ee17 0a90 	vmov	r0, s15
 8003264:	f7fd f998 	bl	8000598 <__aeabi_f2d>
 8003268:	a387      	add	r3, pc, #540	; (adr r3, 8003488 <PID+0x2c0>)
 800326a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326e:	f7fd f9eb 	bl	8000648 <__aeabi_dmul>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	4620      	mov	r0, r4
 8003278:	4629      	mov	r1, r5
 800327a:	f7fd f82f 	bl	80002dc <__adddf3>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4610      	mov	r0, r2
 8003284:	4619      	mov	r1, r3
 8003286:	f7fd fcb7 	bl	8000bf8 <__aeabi_d2f>
 800328a:	4603      	mov	r3, r0
 800328c:	4a82      	ldr	r2, [pc, #520]	; (8003498 <PID+0x2d0>)
 800328e:	6013      	str	r3, [r2, #0]

	dinputR = 4000*(InputfltR - dinputR);
 8003290:	4b7f      	ldr	r3, [pc, #508]	; (8003490 <PID+0x2c8>)
 8003292:	ed93 7a00 	vldr	s14, [r3]
 8003296:	4b7f      	ldr	r3, [pc, #508]	; (8003494 <PID+0x2cc>)
 8003298:	edd3 7a00 	vldr	s15, [r3]
 800329c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032a0:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80034ac <PID+0x2e4>
 80032a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032a8:	4b7a      	ldr	r3, [pc, #488]	; (8003494 <PID+0x2cc>)
 80032aa:	edc3 7a00 	vstr	s15, [r3]
	dinputP = 4000*(InputfltP - dinputP);
 80032ae:	4b7a      	ldr	r3, [pc, #488]	; (8003498 <PID+0x2d0>)
 80032b0:	ed93 7a00 	vldr	s14, [r3]
 80032b4:	4b79      	ldr	r3, [pc, #484]	; (800349c <PID+0x2d4>)
 80032b6:	edd3 7a00 	vldr	s15, [r3]
 80032ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032be:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80034ac <PID+0x2e4>
 80032c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032c6:	4b75      	ldr	r3, [pc, #468]	; (800349c <PID+0x2d4>)
 80032c8:	edc3 7a00 	vstr	s15, [r3]

	//0xFFFF/4000=16ishperdegree
	err_last[P] = ERR[P][D];
 80032cc:	4b78      	ldr	r3, [pc, #480]	; (80034b0 <PID+0x2e8>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	4a78      	ldr	r2, [pc, #480]	; (80034b4 <PID+0x2ec>)
 80032d2:	6013      	str	r3, [r2, #0]
	ERR[P][P] = pitch - InputP;
 80032d4:	4b78      	ldr	r3, [pc, #480]	; (80034b8 <PID+0x2f0>)
 80032d6:	ed93 7a00 	vldr	s14, [r3]
 80032da:	4b73      	ldr	r3, [pc, #460]	; (80034a8 <PID+0x2e0>)
 80032dc:	edd3 7a00 	vldr	s15, [r3]
 80032e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032e4:	4b72      	ldr	r3, [pc, #456]	; (80034b0 <PID+0x2e8>)
 80032e6:	edc3 7a00 	vstr	s15, [r3]
	ERR[P][D] = -IMU.gyry - (dinputP);
 80032ea:	4b74      	ldr	r3, [pc, #464]	; (80034bc <PID+0x2f4>)
 80032ec:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80032f0:	eeb1 7a67 	vneg.f32	s14, s15
 80032f4:	4b69      	ldr	r3, [pc, #420]	; (800349c <PID+0x2d4>)
 80032f6:	edd3 7a00 	vldr	s15, [r3]
 80032fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032fe:	4b6c      	ldr	r3, [pc, #432]	; (80034b0 <PID+0x2e8>)
 8003300:	edc3 7a02 	vstr	s15, [r3, #8]
	ERR[P][D2] = ERR[P][D] - err_last[P];
 8003304:	4b6a      	ldr	r3, [pc, #424]	; (80034b0 <PID+0x2e8>)
 8003306:	ed93 7a02 	vldr	s14, [r3, #8]
 800330a:	4b6a      	ldr	r3, [pc, #424]	; (80034b4 <PID+0x2ec>)
 800330c:	edd3 7a00 	vldr	s15, [r3]
 8003310:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003314:	4b66      	ldr	r3, [pc, #408]	; (80034b0 <PID+0x2e8>)
 8003316:	edc3 7a03 	vstr	s15, [r3, #12]

	err_last[R] = ERR[R][D];
 800331a:	4b65      	ldr	r3, [pc, #404]	; (80034b0 <PID+0x2e8>)
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	4a65      	ldr	r2, [pc, #404]	; (80034b4 <PID+0x2ec>)
 8003320:	6053      	str	r3, [r2, #4]
	ERR[R][D] = IMU.gyrx - (dinputR);
 8003322:	4b66      	ldr	r3, [pc, #408]	; (80034bc <PID+0x2f4>)
 8003324:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003328:	4b5a      	ldr	r3, [pc, #360]	; (8003494 <PID+0x2cc>)
 800332a:	edd3 7a00 	vldr	s15, [r3]
 800332e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003332:	4b5f      	ldr	r3, [pc, #380]	; (80034b0 <PID+0x2e8>)
 8003334:	edc3 7a06 	vstr	s15, [r3, #24]
	ERR[R][P] = -roll - InputR;
 8003338:	4b61      	ldr	r3, [pc, #388]	; (80034c0 <PID+0x2f8>)
 800333a:	edd3 7a00 	vldr	s15, [r3]
 800333e:	eeb1 7a67 	vneg.f32	s14, s15
 8003342:	4b57      	ldr	r3, [pc, #348]	; (80034a0 <PID+0x2d8>)
 8003344:	edd3 7a00 	vldr	s15, [r3]
 8003348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800334c:	4b58      	ldr	r3, [pc, #352]	; (80034b0 <PID+0x2e8>)
 800334e:	edc3 7a04 	vstr	s15, [r3, #16]
	ERR[R][D2] = ERR[R][D] - err_last[R];
 8003352:	4b57      	ldr	r3, [pc, #348]	; (80034b0 <PID+0x2e8>)
 8003354:	ed93 7a06 	vldr	s14, [r3, #24]
 8003358:	4b56      	ldr	r3, [pc, #344]	; (80034b4 <PID+0x2ec>)
 800335a:	edd3 7a01 	vldr	s15, [r3, #4]
 800335e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003362:	4b53      	ldr	r3, [pc, #332]	; (80034b0 <PID+0x2e8>)
 8003364:	edc3 7a07 	vstr	s15, [r3, #28]

	ERR[Y][P] = -IMU.gyrz - InputY;
 8003368:	4b54      	ldr	r3, [pc, #336]	; (80034bc <PID+0x2f4>)
 800336a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800336e:	eeb1 7a67 	vneg.f32	s14, s15
 8003372:	4b54      	ldr	r3, [pc, #336]	; (80034c4 <PID+0x2fc>)
 8003374:	edd3 7a00 	vldr	s15, [r3]
 8003378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800337c:	4b4c      	ldr	r3, [pc, #304]	; (80034b0 <PID+0x2e8>)
 800337e:	edc3 7a08 	vstr	s15, [r3, #32]

	pitch_factor = (K[P][P]*ERR[P][P]) + (K[P][I]*ERR[P][I]) + (K[P][D]*ERR[P][D]) + (K[P][D2]*ERR[P][D2]);
 8003382:	4b51      	ldr	r3, [pc, #324]	; (80034c8 <PID+0x300>)
 8003384:	ed93 7a00 	vldr	s14, [r3]
 8003388:	4b49      	ldr	r3, [pc, #292]	; (80034b0 <PID+0x2e8>)
 800338a:	edd3 7a00 	vldr	s15, [r3]
 800338e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003392:	4b4d      	ldr	r3, [pc, #308]	; (80034c8 <PID+0x300>)
 8003394:	edd3 6a01 	vldr	s13, [r3, #4]
 8003398:	4b45      	ldr	r3, [pc, #276]	; (80034b0 <PID+0x2e8>)
 800339a:	edd3 7a01 	vldr	s15, [r3, #4]
 800339e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033a6:	4b48      	ldr	r3, [pc, #288]	; (80034c8 <PID+0x300>)
 80033a8:	edd3 6a02 	vldr	s13, [r3, #8]
 80033ac:	4b40      	ldr	r3, [pc, #256]	; (80034b0 <PID+0x2e8>)
 80033ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80033b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033ba:	4b43      	ldr	r3, [pc, #268]	; (80034c8 <PID+0x300>)
 80033bc:	edd3 6a03 	vldr	s13, [r3, #12]
 80033c0:	4b3b      	ldr	r3, [pc, #236]	; (80034b0 <PID+0x2e8>)
 80033c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80033c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ce:	4b3f      	ldr	r3, [pc, #252]	; (80034cc <PID+0x304>)
 80033d0:	edc3 7a00 	vstr	s15, [r3]
	roll_factor = (K[R][P]*ERR[R][P]) + (K[R][I]*ERR[R][I]) + (K[R][D]*ERR[R][D]) + (K[R][D2]*ERR[R][D2]);
 80033d4:	4b3c      	ldr	r3, [pc, #240]	; (80034c8 <PID+0x300>)
 80033d6:	ed93 7a04 	vldr	s14, [r3, #16]
 80033da:	4b35      	ldr	r3, [pc, #212]	; (80034b0 <PID+0x2e8>)
 80033dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80033e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033e4:	4b38      	ldr	r3, [pc, #224]	; (80034c8 <PID+0x300>)
 80033e6:	edd3 6a05 	vldr	s13, [r3, #20]
 80033ea:	4b31      	ldr	r3, [pc, #196]	; (80034b0 <PID+0x2e8>)
 80033ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80033f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033f8:	4b33      	ldr	r3, [pc, #204]	; (80034c8 <PID+0x300>)
 80033fa:	edd3 6a06 	vldr	s13, [r3, #24]
 80033fe:	4b2c      	ldr	r3, [pc, #176]	; (80034b0 <PID+0x2e8>)
 8003400:	edd3 7a06 	vldr	s15, [r3, #24]
 8003404:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003408:	ee37 7a27 	vadd.f32	s14, s14, s15
 800340c:	4b2e      	ldr	r3, [pc, #184]	; (80034c8 <PID+0x300>)
 800340e:	edd3 6a07 	vldr	s13, [r3, #28]
 8003412:	4b27      	ldr	r3, [pc, #156]	; (80034b0 <PID+0x2e8>)
 8003414:	edd3 7a07 	vldr	s15, [r3, #28]
 8003418:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800341c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003420:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <PID+0x308>)
 8003422:	edc3 7a00 	vstr	s15, [r3]
	yaw_factor = (K[Y][P]*ERR[Y][P]) + (K[Y][I]*ERR[Y][I]);
 8003426:	4b28      	ldr	r3, [pc, #160]	; (80034c8 <PID+0x300>)
 8003428:	ed93 7a08 	vldr	s14, [r3, #32]
 800342c:	4b20      	ldr	r3, [pc, #128]	; (80034b0 <PID+0x2e8>)
 800342e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003432:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003436:	4b24      	ldr	r3, [pc, #144]	; (80034c8 <PID+0x300>)
 8003438:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800343c:	4b1c      	ldr	r3, [pc, #112]	; (80034b0 <PID+0x2e8>)
 800343e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003442:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800344a:	4b22      	ldr	r3, [pc, #136]	; (80034d4 <PID+0x30c>)
 800344c:	edc3 7a00 	vstr	s15, [r3]
	//alt = alt_est;
	//d_alt = (biquadFilterApply(&delta_alt_biquad,(alt - alt1))); //   bandpass 2 lp 1 hp
//	alt_setpoint = 300;
	//alt_err  = alt - alt_setpoint;

	input_throttle = InputT*60 - NavAlt.Vel*alt_Kp;
 8003450:	4b21      	ldr	r3, [pc, #132]	; (80034d8 <PID+0x310>)
 8003452:	edd3 7a00 	vldr	s15, [r3]
 8003456:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80034dc <PID+0x314>
 800345a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800345e:	4b20      	ldr	r3, [pc, #128]	; (80034e0 <PID+0x318>)
 8003460:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003464:	4b1f      	ldr	r3, [pc, #124]	; (80034e4 <PID+0x31c>)
 8003466:	edd3 7a00 	vldr	s15, [r3]
 800346a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800346e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003472:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <PID+0x320>)
 8003474:	edc3 7a00 	vstr	s15, [r3]
	//input_throttle = InputT*60;
	//input_throttle = ( InputT*60 - d_alt*alt_Kp - alt_err * 0)/constrainf(costilt,1,0.6);
	motor_mix();
 8003478:	f000 f838 	bl	80034ec <motor_mix>
	//ERR[R][D2] = ERR[R][D];
	//ERR[P][D2] = ERR[P][D];
	//alt1 = alt;
}
 800347c:	bf00      	nop
 800347e:	bdb0      	pop	{r4, r5, r7, pc}
 8003480:	9db22d0e 	.word	0x9db22d0e
 8003484:	3feea7ef 	.word	0x3feea7ef
 8003488:	eb851eb8 	.word	0xeb851eb8
 800348c:	3f8eb851 	.word	0x3f8eb851
 8003490:	20001808 	.word	0x20001808
 8003494:	200017bc 	.word	0x200017bc
 8003498:	200017ec 	.word	0x200017ec
 800349c:	200017f4 	.word	0x200017f4
 80034a0:	20001318 	.word	0x20001318
 80034a4:	446aae10 	.word	0x446aae10
 80034a8:	20001430 	.word	0x20001430
 80034ac:	457a0000 	.word	0x457a0000
 80034b0:	2000178c 	.word	0x2000178c
 80034b4:	20001750 	.word	0x20001750
 80034b8:	20001448 	.word	0x20001448
 80034bc:	200012bc 	.word	0x200012bc
 80034c0:	2000144c 	.word	0x2000144c
 80034c4:	2000135c 	.word	0x2000135c
 80034c8:	20000010 	.word	0x20000010
 80034cc:	200017e4 	.word	0x200017e4
 80034d0:	2000180c 	.word	0x2000180c
 80034d4:	200017f8 	.word	0x200017f8
 80034d8:	2000139c 	.word	0x2000139c
 80034dc:	42700000 	.word	0x42700000
 80034e0:	20001454 	.word	0x20001454
 80034e4:	20000aa0 	.word	0x20000aa0
 80034e8:	20001810 	.word	0x20001810

080034ec <motor_mix>:
	}
}


void motor_mix (void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
	motor1_out = +roll_factor - pitch_factor - yaw_factor + input_throttle + 0x2000;
 80034f0:	4b58      	ldr	r3, [pc, #352]	; (8003654 <motor_mix+0x168>)
 80034f2:	ed93 7a00 	vldr	s14, [r3]
 80034f6:	4b58      	ldr	r3, [pc, #352]	; (8003658 <motor_mix+0x16c>)
 80034f8:	edd3 7a00 	vldr	s15, [r3]
 80034fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003500:	4b56      	ldr	r3, [pc, #344]	; (800365c <motor_mix+0x170>)
 8003502:	edd3 7a00 	vldr	s15, [r3]
 8003506:	ee37 7a67 	vsub.f32	s14, s14, s15
 800350a:	4b55      	ldr	r3, [pc, #340]	; (8003660 <motor_mix+0x174>)
 800350c:	edd3 7a00 	vldr	s15, [r3]
 8003510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003514:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003664 <motor_mix+0x178>
 8003518:	ee77 7a87 	vadd.f32	s15, s15, s14
 800351c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003520:	ee17 3a90 	vmov	r3, s15
 8003524:	b29a      	uxth	r2, r3
 8003526:	4b50      	ldr	r3, [pc, #320]	; (8003668 <motor_mix+0x17c>)
 8003528:	801a      	strh	r2, [r3, #0]
	if (motor1_out < 0x1900)
 800352a:	4b4f      	ldr	r3, [pc, #316]	; (8003668 <motor_mix+0x17c>)
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 8003532:	d203      	bcs.n	800353c <motor_mix+0x50>
	{
		motor1_out = 0x1900;
 8003534:	4b4c      	ldr	r3, [pc, #304]	; (8003668 <motor_mix+0x17c>)
 8003536:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 800353a:	801a      	strh	r2, [r3, #0]
	}
	motor2_out = +roll_factor + pitch_factor + yaw_factor + input_throttle + 0x2000 ;
 800353c:	4b45      	ldr	r3, [pc, #276]	; (8003654 <motor_mix+0x168>)
 800353e:	ed93 7a00 	vldr	s14, [r3]
 8003542:	4b45      	ldr	r3, [pc, #276]	; (8003658 <motor_mix+0x16c>)
 8003544:	edd3 7a00 	vldr	s15, [r3]
 8003548:	ee37 7a27 	vadd.f32	s14, s14, s15
 800354c:	4b43      	ldr	r3, [pc, #268]	; (800365c <motor_mix+0x170>)
 800354e:	edd3 7a00 	vldr	s15, [r3]
 8003552:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003556:	4b42      	ldr	r3, [pc, #264]	; (8003660 <motor_mix+0x174>)
 8003558:	edd3 7a00 	vldr	s15, [r3]
 800355c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003560:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003664 <motor_mix+0x178>
 8003564:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800356c:	ee17 3a90 	vmov	r3, s15
 8003570:	b29a      	uxth	r2, r3
 8003572:	4b3e      	ldr	r3, [pc, #248]	; (800366c <motor_mix+0x180>)
 8003574:	801a      	strh	r2, [r3, #0]
	if (motor2_out < 0x1900)
 8003576:	4b3d      	ldr	r3, [pc, #244]	; (800366c <motor_mix+0x180>)
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 800357e:	d203      	bcs.n	8003588 <motor_mix+0x9c>
	{
		motor2_out = 0x1900;
 8003580:	4b3a      	ldr	r3, [pc, #232]	; (800366c <motor_mix+0x180>)
 8003582:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8003586:	801a      	strh	r2, [r3, #0]
	}
	motor3_out = -roll_factor - pitch_factor + yaw_factor + input_throttle + 0x2000;
 8003588:	4b32      	ldr	r3, [pc, #200]	; (8003654 <motor_mix+0x168>)
 800358a:	edd3 7a00 	vldr	s15, [r3]
 800358e:	eeb1 7a67 	vneg.f32	s14, s15
 8003592:	4b31      	ldr	r3, [pc, #196]	; (8003658 <motor_mix+0x16c>)
 8003594:	edd3 7a00 	vldr	s15, [r3]
 8003598:	ee37 7a67 	vsub.f32	s14, s14, s15
 800359c:	4b2f      	ldr	r3, [pc, #188]	; (800365c <motor_mix+0x170>)
 800359e:	edd3 7a00 	vldr	s15, [r3]
 80035a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035a6:	4b2e      	ldr	r3, [pc, #184]	; (8003660 <motor_mix+0x174>)
 80035a8:	edd3 7a00 	vldr	s15, [r3]
 80035ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8003664 <motor_mix+0x178>
 80035b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035bc:	ee17 3a90 	vmov	r3, s15
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	4b2b      	ldr	r3, [pc, #172]	; (8003670 <motor_mix+0x184>)
 80035c4:	801a      	strh	r2, [r3, #0]
	if (motor3_out < 0x1900)
 80035c6:	4b2a      	ldr	r3, [pc, #168]	; (8003670 <motor_mix+0x184>)
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 80035ce:	d203      	bcs.n	80035d8 <motor_mix+0xec>
	{
		motor3_out = 0x1900;
 80035d0:	4b27      	ldr	r3, [pc, #156]	; (8003670 <motor_mix+0x184>)
 80035d2:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80035d6:	801a      	strh	r2, [r3, #0]
	}
	motor4_out = -roll_factor + pitch_factor - yaw_factor + input_throttle + 0x2000;
 80035d8:	4b1f      	ldr	r3, [pc, #124]	; (8003658 <motor_mix+0x16c>)
 80035da:	ed93 7a00 	vldr	s14, [r3]
 80035de:	4b1d      	ldr	r3, [pc, #116]	; (8003654 <motor_mix+0x168>)
 80035e0:	edd3 7a00 	vldr	s15, [r3]
 80035e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035e8:	4b1c      	ldr	r3, [pc, #112]	; (800365c <motor_mix+0x170>)
 80035ea:	edd3 7a00 	vldr	s15, [r3]
 80035ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035f2:	4b1b      	ldr	r3, [pc, #108]	; (8003660 <motor_mix+0x174>)
 80035f4:	edd3 7a00 	vldr	s15, [r3]
 80035f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035fc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003664 <motor_mix+0x178>
 8003600:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003608:	ee17 3a90 	vmov	r3, s15
 800360c:	b29a      	uxth	r2, r3
 800360e:	4b19      	ldr	r3, [pc, #100]	; (8003674 <motor_mix+0x188>)
 8003610:	801a      	strh	r2, [r3, #0]
	if (motor4_out < 0x1900)
 8003612:	4b18      	ldr	r3, [pc, #96]	; (8003674 <motor_mix+0x188>)
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 800361a:	d203      	bcs.n	8003624 <motor_mix+0x138>
	{
		motor4_out = 0x1900;
 800361c:	4b15      	ldr	r3, [pc, #84]	; (8003674 <motor_mix+0x188>)
 800361e:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8003622:	801a      	strh	r2, [r3, #0]
	}

	if (safety_flag == 1)
 8003624:	4b14      	ldr	r3, [pc, #80]	; (8003678 <motor_mix+0x18c>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <motor_mix+0x156>
	{
		update_motors(motor1_out,motor2_out,motor3_out,motor4_out);
 800362c:	4b0e      	ldr	r3, [pc, #56]	; (8003668 <motor_mix+0x17c>)
 800362e:	8818      	ldrh	r0, [r3, #0]
 8003630:	4b0e      	ldr	r3, [pc, #56]	; (800366c <motor_mix+0x180>)
 8003632:	8819      	ldrh	r1, [r3, #0]
 8003634:	4b0e      	ldr	r3, [pc, #56]	; (8003670 <motor_mix+0x184>)
 8003636:	881a      	ldrh	r2, [r3, #0]
 8003638:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <motor_mix+0x188>)
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	f7ff fd78 	bl	8003130 <update_motors>
	else
	{
		update_motors(0,0,0,0);
	}
	//debug++;
}
 8003640:	e005      	b.n	800364e <motor_mix+0x162>
		update_motors(0,0,0,0);
 8003642:	2300      	movs	r3, #0
 8003644:	2200      	movs	r2, #0
 8003646:	2100      	movs	r1, #0
 8003648:	2000      	movs	r0, #0
 800364a:	f7ff fd71 	bl	8003130 <update_motors>
}
 800364e:	bf00      	nop
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	2000180c 	.word	0x2000180c
 8003658:	200017e4 	.word	0x200017e4
 800365c:	200017f8 	.word	0x200017f8
 8003660:	20001810 	.word	0x20001810
 8003664:	46000000 	.word	0x46000000
 8003668:	20001804 	.word	0x20001804
 800366c:	200017fe 	.word	0x200017fe
 8003670:	20001758 	.word	0x20001758
 8003674:	2000175c 	.word	0x2000175c
 8003678:	20001800 	.word	0x20001800
 800367c:	00000000 	.word	0x00000000

08003680 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003684:	b088      	sub	sp, #32
 8003686:	af06      	add	r7, sp, #24
 8003688:	6078      	str	r0, [r7, #4]

	if (huart == &huart1)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a9e      	ldr	r2, [pc, #632]	; (8003908 <HAL_UART_RxCpltCallback+0x288>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d102      	bne.n	8003698 <HAL_UART_RxCpltCallback+0x18>
	{
		//debug++;
		optical_flow_callback(huart);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fa00 	bl	8003a98 <optical_flow_callback>
		//HAL_UART_Receive_DMA(&huart1, &opticalflow.message.start,60);
	}

	if (huart == &huart2)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a9c      	ldr	r2, [pc, #624]	; (800390c <HAL_UART_RxCpltCallback+0x28c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d104      	bne.n	80036aa <HAL_UART_RxCpltCallback+0x2a>
	{
		failsafe = 0;
 80036a0:	4b9b      	ldr	r3, [pc, #620]	; (8003910 <HAL_UART_RxCpltCallback+0x290>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	801a      	strh	r2, [r3, #0]
	ibus_callback();
 80036a6:	f7ff f933 	bl	8002910 <ibus_callback>
	}

	if (huart == &huart4)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a99      	ldr	r2, [pc, #612]	; (8003914 <HAL_UART_RxCpltCallback+0x294>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	f040 81c7 	bne.w	8003a42 <HAL_UART_RxCpltCallback+0x3c2>
		{
		 switch(buffer)
 80036b4:	4b98      	ldr	r3, [pc, #608]	; (8003918 <HAL_UART_RxCpltCallback+0x298>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	3b61      	subs	r3, #97	; 0x61
 80036ba:	2b19      	cmp	r3, #25
 80036bc:	f200 81bc 	bhi.w	8003a38 <HAL_UART_RxCpltCallback+0x3b8>
 80036c0:	a201      	add	r2, pc, #4	; (adr r2, 80036c8 <HAL_UART_RxCpltCallback+0x48>)
 80036c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c6:	bf00      	nop
 80036c8:	080038b5 	.word	0x080038b5
 80036cc:	08003a39 	.word	0x08003a39
 80036d0:	0800383b 	.word	0x0800383b
 80036d4:	080037bd 	.word	0x080037bd
 80036d8:	08003941 	.word	0x08003941
 80036dc:	08003811 	.word	0x08003811
 80036e0:	0800388d 	.word	0x0800388d
 80036e4:	08003a39 	.word	0x08003a39
 80036e8:	08003a39 	.word	0x08003a39
 80036ec:	08003a39 	.word	0x08003a39
 80036f0:	08003a39 	.word	0x08003a39
 80036f4:	08003793 	.word	0x08003793
 80036f8:	080038e1 	.word	0x080038e1
 80036fc:	08003a39 	.word	0x08003a39
 8003700:	08003a39 	.word	0x08003a39
 8003704:	08003769 	.word	0x08003769
 8003708:	08003731 	.word	0x08003731
 800370c:	08003a39 	.word	0x08003a39
 8003710:	08003a39 	.word	0x08003a39
 8003714:	08003a39 	.word	0x08003a39
 8003718:	08003a39 	.word	0x08003a39
 800371c:	08003a39 	.word	0x08003a39
 8003720:	08003a39 	.word	0x08003a39
 8003724:	080037e7 	.word	0x080037e7
 8003728:	08003865 	.word	0x08003865
 800372c:	080038cb 	.word	0x080038cb
		 	{
		 	case 'q':
		 	safety_flag = !safety_flag;
 8003730:	4b7a      	ldr	r3, [pc, #488]	; (800391c <HAL_UART_RxCpltCallback+0x29c>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	bf14      	ite	ne
 8003738:	2301      	movne	r3, #1
 800373a:	2300      	moveq	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	f083 0301 	eor.w	r3, r3, #1
 8003742:	b2db      	uxtb	r3, r3
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	b2da      	uxtb	r2, r3
 800374a:	4b74      	ldr	r3, [pc, #464]	; (800391c <HAL_UART_RxCpltCallback+0x29c>)
 800374c:	701a      	strb	r2, [r3, #0]
		 	inital_pressure = pressure;
 800374e:	4b74      	ldr	r3, [pc, #464]	; (8003920 <HAL_UART_RxCpltCallback+0x2a0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a74      	ldr	r2, [pc, #464]	; (8003924 <HAL_UART_RxCpltCallback+0x2a4>)
 8003754:	6013      	str	r3, [r2, #0]
		 	alt_est = 0;
 8003756:	4b74      	ldr	r3, [pc, #464]	; (8003928 <HAL_UART_RxCpltCallback+0x2a8>)
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
		 	baro_alt = 0;
 800375e:	4b73      	ldr	r3, [pc, #460]	; (800392c <HAL_UART_RxCpltCallback+0x2ac>)
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
		 	break;
 8003766:	e167      	b.n	8003a38 <HAL_UART_RxCpltCallback+0x3b8>

		 	case 'p':
		 	K[P][P]+=1000;
 8003768:	4b71      	ldr	r3, [pc, #452]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 800376a:	edd3 7a00 	vldr	s15, [r3]
 800376e:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8003934 <HAL_UART_RxCpltCallback+0x2b4>
 8003772:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003776:	4b6e      	ldr	r3, [pc, #440]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 8003778:	edc3 7a00 	vstr	s15, [r3]
		 	K[R][P]+=1000;
 800377c:	4b6c      	ldr	r3, [pc, #432]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 800377e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003782:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8003934 <HAL_UART_RxCpltCallback+0x2b4>
 8003786:	ee77 7a87 	vadd.f32	s15, s15, s14
 800378a:	4b69      	ldr	r3, [pc, #420]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 800378c:	edc3 7a04 	vstr	s15, [r3, #16]
		 	break;
 8003790:	e152      	b.n	8003a38 <HAL_UART_RxCpltCallback+0x3b8>

		 	case 'l':
		 	K[P][P]-=1000;
 8003792:	4b67      	ldr	r3, [pc, #412]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 8003794:	edd3 7a00 	vldr	s15, [r3]
 8003798:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8003934 <HAL_UART_RxCpltCallback+0x2b4>
 800379c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037a0:	4b63      	ldr	r3, [pc, #396]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 80037a2:	edc3 7a00 	vstr	s15, [r3]
		 	K[R][P]-=1000;
 80037a6:	4b62      	ldr	r3, [pc, #392]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 80037a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80037ac:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8003934 <HAL_UART_RxCpltCallback+0x2b4>
 80037b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037b4:	4b5e      	ldr	r3, [pc, #376]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 80037b6:	edc3 7a04 	vstr	s15, [r3, #16]
		 	break;
 80037ba:	e13d      	b.n	8003a38 <HAL_UART_RxCpltCallback+0x3b8>

		 	case 'd':
		 	K[P][D]+=1;
 80037bc:	4b5c      	ldr	r3, [pc, #368]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 80037be:	edd3 7a02 	vldr	s15, [r3, #8]
 80037c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037ca:	4b59      	ldr	r3, [pc, #356]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 80037cc:	edc3 7a02 	vstr	s15, [r3, #8]
		 	K[R][D]+=1;
 80037d0:	4b57      	ldr	r3, [pc, #348]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 80037d2:	edd3 7a06 	vldr	s15, [r3, #24]
 80037d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037de:	4b54      	ldr	r3, [pc, #336]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 80037e0:	edc3 7a06 	vstr	s15, [r3, #24]
		 	break;
 80037e4:	e128      	b.n	8003a38 <HAL_UART_RxCpltCallback+0x3b8>

		 	case 'x':
		 	K[P][D]-=1;
 80037e6:	4b52      	ldr	r3, [pc, #328]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 80037e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80037ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037f4:	4b4e      	ldr	r3, [pc, #312]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 80037f6:	edc3 7a02 	vstr	s15, [r3, #8]
		 	K[R][D]-=1;
 80037fa:	4b4d      	ldr	r3, [pc, #308]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 80037fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8003800:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003804:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003808:	4b49      	ldr	r3, [pc, #292]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 800380a:	edc3 7a06 	vstr	s15, [r3, #24]
		 	break;
 800380e:	e113      	b.n	8003a38 <HAL_UART_RxCpltCallback+0x3b8>

		 	case 'f':
			K[P][D2]+=1;
 8003810:	4b47      	ldr	r3, [pc, #284]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 8003812:	edd3 7a03 	vldr	s15, [r3, #12]
 8003816:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800381a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800381e:	4b44      	ldr	r3, [pc, #272]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 8003820:	edc3 7a03 	vstr	s15, [r3, #12]
			K[R][D2]+=1;
 8003824:	4b42      	ldr	r3, [pc, #264]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 8003826:	edd3 7a07 	vldr	s15, [r3, #28]
 800382a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800382e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003832:	4b3f      	ldr	r3, [pc, #252]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 8003834:	edc3 7a07 	vstr	s15, [r3, #28]
			break;
 8003838:	e0fe      	b.n	8003a38 <HAL_UART_RxCpltCallback+0x3b8>

			case 'c':
			K[P][D2]-=1;
 800383a:	4b3d      	ldr	r3, [pc, #244]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 800383c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003840:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003844:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003848:	4b39      	ldr	r3, [pc, #228]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 800384a:	edc3 7a03 	vstr	s15, [r3, #12]
			K[R][D2]-=1;
 800384e:	4b38      	ldr	r3, [pc, #224]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 8003850:	edd3 7a07 	vldr	s15, [r3, #28]
 8003854:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003858:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800385c:	4b34      	ldr	r3, [pc, #208]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 800385e:	edc3 7a07 	vstr	s15, [r3, #28]
			break;
 8003862:	e0e9      	b.n	8003a38 <HAL_UART_RxCpltCallback+0x3b8>


		 	case 'y':
			K[Y][P]+=0.05;
 8003864:	4b32      	ldr	r3, [pc, #200]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	4618      	mov	r0, r3
 800386a:	f7fc fe95 	bl	8000598 <__aeabi_f2d>
 800386e:	a324      	add	r3, pc, #144	; (adr r3, 8003900 <HAL_UART_RxCpltCallback+0x280>)
 8003870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003874:	f7fc fd32 	bl	80002dc <__adddf3>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4610      	mov	r0, r2
 800387e:	4619      	mov	r1, r3
 8003880:	f7fd f9ba 	bl	8000bf8 <__aeabi_d2f>
 8003884:	4603      	mov	r3, r0
 8003886:	4a2a      	ldr	r2, [pc, #168]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 8003888:	6213      	str	r3, [r2, #32]
			break;
 800388a:	e0d5      	b.n	8003a38 <HAL_UART_RxCpltCallback+0x3b8>

			case 'g':
			K[Y][P]-=0.05;
 800388c:	4b28      	ldr	r3, [pc, #160]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	4618      	mov	r0, r3
 8003892:	f7fc fe81 	bl	8000598 <__aeabi_f2d>
 8003896:	a31a      	add	r3, pc, #104	; (adr r3, 8003900 <HAL_UART_RxCpltCallback+0x280>)
 8003898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389c:	f7fc fd1c 	bl	80002d8 <__aeabi_dsub>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4610      	mov	r0, r2
 80038a6:	4619      	mov	r1, r3
 80038a8:	f7fd f9a6 	bl	8000bf8 <__aeabi_d2f>
 80038ac:	4603      	mov	r3, r0
 80038ae:	4a20      	ldr	r2, [pc, #128]	; (8003930 <HAL_UART_RxCpltCallback+0x2b0>)
 80038b0:	6213      	str	r3, [r2, #32]
			break;
 80038b2:	e0c1      	b.n	8003a38 <HAL_UART_RxCpltCallback+0x3b8>

			case 'a':
			alt_Kp+=1;//0.5
 80038b4:	4b20      	ldr	r3, [pc, #128]	; (8003938 <HAL_UART_RxCpltCallback+0x2b8>)
 80038b6:	edd3 7a00 	vldr	s15, [r3]
 80038ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038c2:	4b1d      	ldr	r3, [pc, #116]	; (8003938 <HAL_UART_RxCpltCallback+0x2b8>)
 80038c4:	edc3 7a00 	vstr	s15, [r3]
			break;
 80038c8:	e0b6      	b.n	8003a38 <HAL_UART_RxCpltCallback+0x3b8>

			case 'z':
			alt_Kp-=1;
 80038ca:	4b1b      	ldr	r3, [pc, #108]	; (8003938 <HAL_UART_RxCpltCallback+0x2b8>)
 80038cc:	edd3 7a00 	vldr	s15, [r3]
 80038d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80038d8:	4b17      	ldr	r3, [pc, #92]	; (8003938 <HAL_UART_RxCpltCallback+0x2b8>)
 80038da:	edc3 7a00 	vstr	s15, [r3]
			break;
 80038de:	e0ab      	b.n	8003a38 <HAL_UART_RxCpltCallback+0x3b8>

			case 'm':
			M_FLAG = !M_FLAG;
 80038e0:	4b16      	ldr	r3, [pc, #88]	; (800393c <HAL_UART_RxCpltCallback+0x2bc>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bf14      	ite	ne
 80038e8:	2301      	movne	r3, #1
 80038ea:	2300      	moveq	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	f083 0301 	eor.w	r3, r3, #1
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	4b10      	ldr	r3, [pc, #64]	; (800393c <HAL_UART_RxCpltCallback+0x2bc>)
 80038fc:	701a      	strb	r2, [r3, #0]
			break;
 80038fe:	e09b      	b.n	8003a38 <HAL_UART_RxCpltCallback+0x3b8>
 8003900:	9999999a 	.word	0x9999999a
 8003904:	3fa99999 	.word	0x3fa99999
 8003908:	20001a20 	.word	0x20001a20
 800390c:	20001b28 	.word	0x20001b28
 8003910:	200017fc 	.word	0x200017fc
 8003914:	20001aa4 	.word	0x20001aa4
 8003918:	200017e8 	.word	0x200017e8
 800391c:	20001800 	.word	0x20001800
 8003920:	20001378 	.word	0x20001378
 8003924:	200014b8 	.word	0x200014b8
 8003928:	20001400 	.word	0x20001400
 800392c:	200013a0 	.word	0x200013a0
 8003930:	20000010 	.word	0x20000010
 8003934:	447a0000 	.word	0x447a0000
 8003938:	20000aa0 	.word	0x20000aa0
 800393c:	2000142c 	.word	0x2000142c


			case'e':
				printf("\r\n\r\n\r\n");
 8003940:	4842      	ldr	r0, [pc, #264]	; (8003a4c <HAL_UART_RxCpltCallback+0x3cc>)
 8003942:	f006 fe2b 	bl	800a59c <puts>
		printf("%f	%f	%f	%f\r\n",K[P][P],K[P][I],K[P][D],K[P][D2]);
 8003946:	4b42      	ldr	r3, [pc, #264]	; (8003a50 <HAL_UART_RxCpltCallback+0x3d0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f7fc fe24 	bl	8000598 <__aeabi_f2d>
 8003950:	4682      	mov	sl, r0
 8003952:	468b      	mov	fp, r1
 8003954:	4b3e      	ldr	r3, [pc, #248]	; (8003a50 <HAL_UART_RxCpltCallback+0x3d0>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	4618      	mov	r0, r3
 800395a:	f7fc fe1d 	bl	8000598 <__aeabi_f2d>
 800395e:	4604      	mov	r4, r0
 8003960:	460d      	mov	r5, r1
 8003962:	4b3b      	ldr	r3, [pc, #236]	; (8003a50 <HAL_UART_RxCpltCallback+0x3d0>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	4618      	mov	r0, r3
 8003968:	f7fc fe16 	bl	8000598 <__aeabi_f2d>
 800396c:	4680      	mov	r8, r0
 800396e:	4689      	mov	r9, r1
 8003970:	4b37      	ldr	r3, [pc, #220]	; (8003a50 <HAL_UART_RxCpltCallback+0x3d0>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4618      	mov	r0, r3
 8003976:	f7fc fe0f 	bl	8000598 <__aeabi_f2d>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003982:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003986:	e9cd 4500 	strd	r4, r5, [sp]
 800398a:	4652      	mov	r2, sl
 800398c:	465b      	mov	r3, fp
 800398e:	4831      	ldr	r0, [pc, #196]	; (8003a54 <HAL_UART_RxCpltCallback+0x3d4>)
 8003990:	f006 fdac 	bl	800a4ec <printf>
		printf("%f	%f	%f	%f\r\n",K[R][P],K[R][I],K[R][D],K[R][D2]);
 8003994:	4b2e      	ldr	r3, [pc, #184]	; (8003a50 <HAL_UART_RxCpltCallback+0x3d0>)
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	4618      	mov	r0, r3
 800399a:	f7fc fdfd 	bl	8000598 <__aeabi_f2d>
 800399e:	4682      	mov	sl, r0
 80039a0:	468b      	mov	fp, r1
 80039a2:	4b2b      	ldr	r3, [pc, #172]	; (8003a50 <HAL_UART_RxCpltCallback+0x3d0>)
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fc fdf6 	bl	8000598 <__aeabi_f2d>
 80039ac:	4604      	mov	r4, r0
 80039ae:	460d      	mov	r5, r1
 80039b0:	4b27      	ldr	r3, [pc, #156]	; (8003a50 <HAL_UART_RxCpltCallback+0x3d0>)
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fc fdef 	bl	8000598 <__aeabi_f2d>
 80039ba:	4680      	mov	r8, r0
 80039bc:	4689      	mov	r9, r1
 80039be:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <HAL_UART_RxCpltCallback+0x3d0>)
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fc fde8 	bl	8000598 <__aeabi_f2d>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80039d0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80039d4:	e9cd 4500 	strd	r4, r5, [sp]
 80039d8:	4652      	mov	r2, sl
 80039da:	465b      	mov	r3, fp
 80039dc:	481d      	ldr	r0, [pc, #116]	; (8003a54 <HAL_UART_RxCpltCallback+0x3d4>)
 80039de:	f006 fd85 	bl	800a4ec <printf>
		printf("%f	%f	%f	%f\r\n",K[Y][P],K[Y][I],K[Y][D],K[Y][D2]);
 80039e2:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <HAL_UART_RxCpltCallback+0x3d0>)
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fc fdd6 	bl	8000598 <__aeabi_f2d>
 80039ec:	4682      	mov	sl, r0
 80039ee:	468b      	mov	fp, r1
 80039f0:	4b17      	ldr	r3, [pc, #92]	; (8003a50 <HAL_UART_RxCpltCallback+0x3d0>)
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fc fdcf 	bl	8000598 <__aeabi_f2d>
 80039fa:	4604      	mov	r4, r0
 80039fc:	460d      	mov	r5, r1
 80039fe:	4b14      	ldr	r3, [pc, #80]	; (8003a50 <HAL_UART_RxCpltCallback+0x3d0>)
 8003a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fc fdc8 	bl	8000598 <__aeabi_f2d>
 8003a08:	4680      	mov	r8, r0
 8003a0a:	4689      	mov	r9, r1
 8003a0c:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <HAL_UART_RxCpltCallback+0x3d0>)
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fc fdc1 	bl	8000598 <__aeabi_f2d>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003a1e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003a22:	e9cd 4500 	strd	r4, r5, [sp]
 8003a26:	4652      	mov	r2, sl
 8003a28:	465b      	mov	r3, fp
 8003a2a:	480a      	ldr	r0, [pc, #40]	; (8003a54 <HAL_UART_RxCpltCallback+0x3d4>)
 8003a2c:	f006 fd5e 	bl	800a4ec <printf>
		printf("\r\n\r\n\r\n");
 8003a30:	4806      	ldr	r0, [pc, #24]	; (8003a4c <HAL_UART_RxCpltCallback+0x3cc>)
 8003a32:	f006 fdb3 	bl	800a59c <puts>


		break;
 8003a36:	bf00      	nop
		 	}
		 HAL_UART_Receive_IT(&huart4, &buffer, 1);
 8003a38:	2201      	movs	r2, #1
 8003a3a:	4907      	ldr	r1, [pc, #28]	; (8003a58 <HAL_UART_RxCpltCallback+0x3d8>)
 8003a3c:	4807      	ldr	r0, [pc, #28]	; (8003a5c <HAL_UART_RxCpltCallback+0x3dc>)
 8003a3e:	f005 fbfe 	bl	800923e <HAL_UART_Receive_IT>
		}



}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a4c:	08010e7c 	.word	0x08010e7c
 8003a50:	20000010 	.word	0x20000010
 8003a54:	08010e84 	.word	0x08010e84
 8003a58:	200017e8 	.word	0x200017e8
 8003a5c:	20001aa4 	.word	0x20001aa4

08003a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a64:	b672      	cpsid	i
}
 8003a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a68:	e7fe      	b.n	8003a68 <Error_Handler+0x8>
	...

08003a6c <enable_opticalflow>:
UART_HandleTypeDef *optiflow_huart;



void enable_opticalflow (UART_HandleTypeDef *huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
	optiflow_huart = huart;
 8003a74:	4a06      	ldr	r2, [pc, #24]	; (8003a90 <enable_opticalflow+0x24>)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6013      	str	r3, [r2, #0]

HAL_UART_Receive_DMA(optiflow_huart, &opticalflow.message.start,7);
 8003a7a:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <enable_opticalflow+0x24>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2207      	movs	r2, #7
 8003a80:	4904      	ldr	r1, [pc, #16]	; (8003a94 <enable_opticalflow+0x28>)
 8003a82:	4618      	mov	r0, r3
 8003a84:	f005 fc18 	bl	80092b8 <HAL_UART_Receive_DMA>
}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20001814 	.word	0x20001814
 8003a94:	2000129c 	.word	0x2000129c

08003a98 <optical_flow_callback>:

void optical_flow_callback(UART_HandleTypeDef *huart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
		//{
		//	HAL_UART_Receive_DMA(optiflow_huart, &opticalflow.message.start,7);
		//}
		//else
		//{
			switch(opticalflow.message.type)
 8003aa0:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <optical_flow_callback+0x5c>)
 8003aa2:	791b      	ldrb	r3, [r3, #4]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d002      	beq.n	8003ab0 <optical_flow_callback+0x18>
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d00b      	beq.n	8003ac6 <optical_flow_callback+0x2e>
 8003aae:	e015      	b.n	8003adc <optical_flow_callback+0x44>
			{
			case 0x01:
			HAL_UART_Receive_DMA(optiflow_huart,&opticalflow.lidar.start,7);
 8003ab0:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <optical_flow_callback+0x60>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2207      	movs	r2, #7
 8003ab6:	4911      	ldr	r1, [pc, #68]	; (8003afc <optical_flow_callback+0x64>)
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f005 fbfd 	bl	80092b8 <HAL_UART_Receive_DMA>
			opticalflow.message.type = 0;
 8003abe:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <optical_flow_callback+0x5c>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	711a      	strb	r2, [r3, #4]
			break;
 8003ac4:	e012      	b.n	8003aec <optical_flow_callback+0x54>

			case 0x02:
			HAL_UART_Receive_DMA(optiflow_huart,&opticalflow.flow.start,11);
 8003ac6:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <optical_flow_callback+0x60>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	220b      	movs	r2, #11
 8003acc:	490c      	ldr	r1, [pc, #48]	; (8003b00 <optical_flow_callback+0x68>)
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f005 fbf2 	bl	80092b8 <HAL_UART_Receive_DMA>
			opticalflow.message.type = 0;
 8003ad4:	4b07      	ldr	r3, [pc, #28]	; (8003af4 <optical_flow_callback+0x5c>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	711a      	strb	r2, [r3, #4]
			break;
 8003ada:	e007      	b.n	8003aec <optical_flow_callback+0x54>

			default:
			HAL_UART_Receive_DMA(optiflow_huart, &opticalflow.message.start,7);
 8003adc:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <optical_flow_callback+0x60>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2207      	movs	r2, #7
 8003ae2:	4904      	ldr	r1, [pc, #16]	; (8003af4 <optical_flow_callback+0x5c>)
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f005 fbe7 	bl	80092b8 <HAL_UART_Receive_DMA>

			}

		//}

}
 8003aea:	bf00      	nop
 8003aec:	bf00      	nop
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	2000129c 	.word	0x2000129c
 8003af8:	20001814 	.word	0x20001814
 8003afc:	200012ae 	.word	0x200012ae
 8003b00:	200012a4 	.word	0x200012a4

08003b04 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003b08:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <MX_SPI1_Init+0x74>)
 8003b0a:	4a1c      	ldr	r2, [pc, #112]	; (8003b7c <MX_SPI1_Init+0x78>)
 8003b0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b0e:	4b1a      	ldr	r3, [pc, #104]	; (8003b78 <MX_SPI1_Init+0x74>)
 8003b10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b16:	4b18      	ldr	r3, [pc, #96]	; (8003b78 <MX_SPI1_Init+0x74>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b1c:	4b16      	ldr	r3, [pc, #88]	; (8003b78 <MX_SPI1_Init+0x74>)
 8003b1e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b22:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b24:	4b14      	ldr	r3, [pc, #80]	; (8003b78 <MX_SPI1_Init+0x74>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b2a:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <MX_SPI1_Init+0x74>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b30:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <MX_SPI1_Init+0x74>)
 8003b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b36:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003b38:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <MX_SPI1_Init+0x74>)
 8003b3a:	2218      	movs	r2, #24
 8003b3c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b3e:	4b0e      	ldr	r3, [pc, #56]	; (8003b78 <MX_SPI1_Init+0x74>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b44:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <MX_SPI1_Init+0x74>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b4a:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <MX_SPI1_Init+0x74>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003b50:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <MX_SPI1_Init+0x74>)
 8003b52:	2207      	movs	r2, #7
 8003b54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003b56:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <MX_SPI1_Init+0x74>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003b5c:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <MX_SPI1_Init+0x74>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b62:	4805      	ldr	r0, [pc, #20]	; (8003b78 <MX_SPI1_Init+0x74>)
 8003b64:	f003 fa7a 	bl	800705c <HAL_SPI_Init>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003b6e:	f7ff ff77 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b72:	bf00      	nop
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20001818 	.word	0x20001818
 8003b7c:	40013000 	.word	0x40013000

08003b80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08a      	sub	sp, #40	; 0x28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b88:	f107 0314 	add.w	r3, r7, #20
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	609a      	str	r2, [r3, #8]
 8003b94:	60da      	str	r2, [r3, #12]
 8003b96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a17      	ldr	r2, [pc, #92]	; (8003bfc <HAL_SPI_MspInit+0x7c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d127      	bne.n	8003bf2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ba2:	4b17      	ldr	r3, [pc, #92]	; (8003c00 <HAL_SPI_MspInit+0x80>)
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	4a16      	ldr	r2, [pc, #88]	; (8003c00 <HAL_SPI_MspInit+0x80>)
 8003ba8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bac:	6453      	str	r3, [r2, #68]	; 0x44
 8003bae:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <HAL_SPI_MspInit+0x80>)
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bba:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <HAL_SPI_MspInit+0x80>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	4a10      	ldr	r2, [pc, #64]	; (8003c00 <HAL_SPI_MspInit+0x80>)
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bc6:	4b0e      	ldr	r3, [pc, #56]	; (8003c00 <HAL_SPI_MspInit+0x80>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003bd2:	23e0      	movs	r3, #224	; 0xe0
 8003bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bde:	2303      	movs	r3, #3
 8003be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003be2:	2305      	movs	r3, #5
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003be6:	f107 0314 	add.w	r3, r7, #20
 8003bea:	4619      	mov	r1, r3
 8003bec:	4805      	ldr	r0, [pc, #20]	; (8003c04 <HAL_SPI_MspInit+0x84>)
 8003bee:	f001 facf 	bl	8005190 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003bf2:	bf00      	nop
 8003bf4:	3728      	adds	r7, #40	; 0x28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40013000 	.word	0x40013000
 8003c00:	40023800 	.word	0x40023800
 8003c04:	40020000 	.word	0x40020000

08003c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c0e:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <HAL_MspInit+0x44>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	4a0e      	ldr	r2, [pc, #56]	; (8003c4c <HAL_MspInit+0x44>)
 8003c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c18:	6413      	str	r3, [r2, #64]	; 0x40
 8003c1a:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <HAL_MspInit+0x44>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c22:	607b      	str	r3, [r7, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c26:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <HAL_MspInit+0x44>)
 8003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2a:	4a08      	ldr	r2, [pc, #32]	; (8003c4c <HAL_MspInit+0x44>)
 8003c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c30:	6453      	str	r3, [r2, #68]	; 0x44
 8003c32:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <HAL_MspInit+0x44>)
 8003c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40023800 	.word	0x40023800

08003c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c54:	e7fe      	b.n	8003c54 <NMI_Handler+0x4>

08003c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c56:	b480      	push	{r7}
 8003c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c5a:	e7fe      	b.n	8003c5a <HardFault_Handler+0x4>

08003c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c60:	e7fe      	b.n	8003c60 <MemManage_Handler+0x4>

08003c62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c62:	b480      	push	{r7}
 8003c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c66:	e7fe      	b.n	8003c66 <BusFault_Handler+0x4>

08003c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c6c:	e7fe      	b.n	8003c6c <UsageFault_Handler+0x4>

08003c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c72:	bf00      	nop
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c80:	bf00      	nop
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c9c:	f000 fd18 	bl	80046d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ca0:	bf00      	nop
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003ca8:	4802      	ldr	r0, [pc, #8]	; (8003cb4 <DMA1_Stream5_IRQHandler+0x10>)
 8003caa:	f001 f807 	bl	8004cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003cae:	bf00      	nop
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20001960 	.word	0x20001960

08003cb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003cbc:	4802      	ldr	r0, [pc, #8]	; (8003cc8 <TIM2_IRQHandler+0x10>)
 8003cbe:	f004 f985 	bl	8007fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003cc2:	bf00      	nop
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20001914 	.word	0x20001914

08003ccc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003cd0:	4802      	ldr	r0, [pc, #8]	; (8003cdc <TIM3_IRQHandler+0x10>)
 8003cd2:	f004 f97b 	bl	8007fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003cd6:	bf00      	nop
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	200018c8 	.word	0x200018c8

08003ce0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003ce4:	4802      	ldr	r0, [pc, #8]	; (8003cf0 <TIM4_IRQHandler+0x10>)
 8003ce6:	f004 f971 	bl	8007fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	2000187c 	.word	0x2000187c

08003cf4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003cf8:	4802      	ldr	r0, [pc, #8]	; (8003d04 <I2C1_EV_IRQHandler+0x10>)
 8003cfa:	f001 febd 	bl	8005a78 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003cfe:	bf00      	nop
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20001670 	.word	0x20001670

08003d08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d0c:	4802      	ldr	r0, [pc, #8]	; (8003d18 <USART1_IRQHandler+0x10>)
 8003d0e:	f005 fb11 	bl	8009334 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003d12:	bf00      	nop
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20001a20 	.word	0x20001a20

08003d1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003d20:	4802      	ldr	r0, [pc, #8]	; (8003d2c <USART2_IRQHandler+0x10>)
 8003d22:	f005 fb07 	bl	8009334 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003d26:	bf00      	nop
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20001b28 	.word	0x20001b28

08003d30 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003d34:	4802      	ldr	r0, [pc, #8]	; (8003d40 <UART4_IRQHandler+0x10>)
 8003d36:	f005 fafd 	bl	8009334 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003d3a:	bf00      	nop
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20001aa4 	.word	0x20001aa4

08003d44 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003d48:	4802      	ldr	r0, [pc, #8]	; (8003d54 <DMA2_Stream2_IRQHandler+0x10>)
 8003d4a:	f000 ffb7 	bl	8004cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	200019c0 	.word	0x200019c0

08003d58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
	return 1;
 8003d5c:	2301      	movs	r3, #1
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <_kill>:

int _kill(int pid, int sig)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d72:	f006 fb89 	bl	800a488 <__errno>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2216      	movs	r2, #22
 8003d7a:	601a      	str	r2, [r3, #0]
	return -1;
 8003d7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <_exit>:

void _exit (int status)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003d90:	f04f 31ff 	mov.w	r1, #4294967295
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff ffe7 	bl	8003d68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003d9a:	e7fe      	b.n	8003d9a <_exit+0x12>

08003d9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	e00a      	b.n	8003dc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003dae:	f3af 8000 	nop.w
 8003db2:	4601      	mov	r1, r0
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	60ba      	str	r2, [r7, #8]
 8003dba:	b2ca      	uxtb	r2, r1
 8003dbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	dbf0      	blt.n	8003dae <_read+0x12>
	}

return len;
 8003dcc:	687b      	ldr	r3, [r7, #4]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b086      	sub	sp, #24
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	e009      	b.n	8003dfc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	60ba      	str	r2, [r7, #8]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fe ffcb 	bl	8002d8c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	dbf1      	blt.n	8003de8 <_write+0x12>
	}
	return len;
 8003e04:	687b      	ldr	r3, [r7, #4]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <_close>:

int _close(int file)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
	return -1;
 8003e16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e36:	605a      	str	r2, [r3, #4]
	return 0;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <_isatty>:

int _isatty(int file)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
	return 1;
 8003e4e:	2301      	movs	r3, #1
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
	return 0;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
	...

08003e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e80:	4a14      	ldr	r2, [pc, #80]	; (8003ed4 <_sbrk+0x5c>)
 8003e82:	4b15      	ldr	r3, [pc, #84]	; (8003ed8 <_sbrk+0x60>)
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e8c:	4b13      	ldr	r3, [pc, #76]	; (8003edc <_sbrk+0x64>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d102      	bne.n	8003e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e94:	4b11      	ldr	r3, [pc, #68]	; (8003edc <_sbrk+0x64>)
 8003e96:	4a12      	ldr	r2, [pc, #72]	; (8003ee0 <_sbrk+0x68>)
 8003e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e9a:	4b10      	ldr	r3, [pc, #64]	; (8003edc <_sbrk+0x64>)
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d207      	bcs.n	8003eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ea8:	f006 faee 	bl	800a488 <__errno>
 8003eac:	4603      	mov	r3, r0
 8003eae:	220c      	movs	r2, #12
 8003eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb6:	e009      	b.n	8003ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003eb8:	4b08      	ldr	r3, [pc, #32]	; (8003edc <_sbrk+0x64>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ebe:	4b07      	ldr	r3, [pc, #28]	; (8003edc <_sbrk+0x64>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	4a05      	ldr	r2, [pc, #20]	; (8003edc <_sbrk+0x64>)
 8003ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003eca:	68fb      	ldr	r3, [r7, #12]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20040000 	.word	0x20040000
 8003ed8:	00000400 	.word	0x00000400
 8003edc:	20000a24 	.word	0x20000a24
 8003ee0:	20001bc0 	.word	0x20001bc0

08003ee4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <SystemInit+0x20>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eee:	4a05      	ldr	r2, [pc, #20]	; (8003f04 <SystemInit+0x20>)
 8003ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ef8:	bf00      	nop
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	e000ed00 	.word	0xe000ed00

08003f08 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b088      	sub	sp, #32
 8003f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f0e:	f107 0310 	add.w	r3, r7, #16
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	605a      	str	r2, [r3, #4]
 8003f18:	609a      	str	r2, [r3, #8]
 8003f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f1c:	1d3b      	adds	r3, r7, #4
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	605a      	str	r2, [r3, #4]
 8003f24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f26:	4b1e      	ldr	r3, [pc, #120]	; (8003fa0 <MX_TIM2_Init+0x98>)
 8003f28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003f2e:	4b1c      	ldr	r3, [pc, #112]	; (8003fa0 <MX_TIM2_Init+0x98>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f34:	4b1a      	ldr	r3, [pc, #104]	; (8003fa0 <MX_TIM2_Init+0x98>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 27000;
 8003f3a:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <MX_TIM2_Init+0x98>)
 8003f3c:	f646 1278 	movw	r2, #27000	; 0x6978
 8003f40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f42:	4b17      	ldr	r3, [pc, #92]	; (8003fa0 <MX_TIM2_Init+0x98>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f48:	4b15      	ldr	r3, [pc, #84]	; (8003fa0 <MX_TIM2_Init+0x98>)
 8003f4a:	2280      	movs	r2, #128	; 0x80
 8003f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003f4e:	4814      	ldr	r0, [pc, #80]	; (8003fa0 <MX_TIM2_Init+0x98>)
 8003f50:	f003 fe10 	bl	8007b74 <HAL_TIM_Base_Init>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003f5a:	f7ff fd81 	bl	8003a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003f64:	f107 0310 	add.w	r3, r7, #16
 8003f68:	4619      	mov	r1, r3
 8003f6a:	480d      	ldr	r0, [pc, #52]	; (8003fa0 <MX_TIM2_Init+0x98>)
 8003f6c:	f004 fa5e 	bl	800842c <HAL_TIM_ConfigClockSource>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003f76:	f7ff fd73 	bl	8003a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f82:	1d3b      	adds	r3, r7, #4
 8003f84:	4619      	mov	r1, r3
 8003f86:	4806      	ldr	r0, [pc, #24]	; (8003fa0 <MX_TIM2_Init+0x98>)
 8003f88:	f004 fefc 	bl	8008d84 <HAL_TIMEx_MasterConfigSynchronization>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003f92:	f7ff fd65 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003f96:	bf00      	nop
 8003f98:	3720      	adds	r7, #32
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20001914 	.word	0x20001914

08003fa4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08e      	sub	sp, #56	; 0x38
 8003fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	605a      	str	r2, [r3, #4]
 8003fb4:	609a      	str	r2, [r3, #8]
 8003fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fb8:	f107 031c 	add.w	r3, r7, #28
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	605a      	str	r2, [r3, #4]
 8003fc2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fc4:	463b      	mov	r3, r7
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	605a      	str	r2, [r3, #4]
 8003fcc:	609a      	str	r2, [r3, #8]
 8003fce:	60da      	str	r2, [r3, #12]
 8003fd0:	611a      	str	r2, [r3, #16]
 8003fd2:	615a      	str	r2, [r3, #20]
 8003fd4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003fd6:	4b3e      	ldr	r3, [pc, #248]	; (80040d0 <MX_TIM3_Init+0x12c>)
 8003fd8:	4a3e      	ldr	r2, [pc, #248]	; (80040d4 <MX_TIM3_Init+0x130>)
 8003fda:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003fdc:	4b3c      	ldr	r3, [pc, #240]	; (80040d0 <MX_TIM3_Init+0x12c>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fe2:	4b3b      	ldr	r3, [pc, #236]	; (80040d0 <MX_TIM3_Init+0x12c>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2700;
 8003fe8:	4b39      	ldr	r3, [pc, #228]	; (80040d0 <MX_TIM3_Init+0x12c>)
 8003fea:	f640 228c 	movw	r2, #2700	; 0xa8c
 8003fee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ff0:	4b37      	ldr	r3, [pc, #220]	; (80040d0 <MX_TIM3_Init+0x12c>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ff6:	4b36      	ldr	r3, [pc, #216]	; (80040d0 <MX_TIM3_Init+0x12c>)
 8003ff8:	2280      	movs	r2, #128	; 0x80
 8003ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003ffc:	4834      	ldr	r0, [pc, #208]	; (80040d0 <MX_TIM3_Init+0x12c>)
 8003ffe:	f003 fdb9 	bl	8007b74 <HAL_TIM_Base_Init>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004008:	f7ff fd2a 	bl	8003a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800400c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004010:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004012:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004016:	4619      	mov	r1, r3
 8004018:	482d      	ldr	r0, [pc, #180]	; (80040d0 <MX_TIM3_Init+0x12c>)
 800401a:	f004 fa07 	bl	800842c <HAL_TIM_ConfigClockSource>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004024:	f7ff fd1c 	bl	8003a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004028:	4829      	ldr	r0, [pc, #164]	; (80040d0 <MX_TIM3_Init+0x12c>)
 800402a:	f003 fe73 	bl	8007d14 <HAL_TIM_PWM_Init>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004034:	f7ff fd14 	bl	8003a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004038:	2300      	movs	r3, #0
 800403a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800403c:	2300      	movs	r3, #0
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004040:	f107 031c 	add.w	r3, r7, #28
 8004044:	4619      	mov	r1, r3
 8004046:	4822      	ldr	r0, [pc, #136]	; (80040d0 <MX_TIM3_Init+0x12c>)
 8004048:	f004 fe9c 	bl	8008d84 <HAL_TIMEx_MasterConfigSynchronization>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004052:	f7ff fd05 	bl	8003a60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004056:	2360      	movs	r3, #96	; 0x60
 8004058:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 540;
 800405a:	f44f 7307 	mov.w	r3, #540	; 0x21c
 800405e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004060:	2300      	movs	r3, #0
 8004062:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004064:	2300      	movs	r3, #0
 8004066:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004068:	463b      	mov	r3, r7
 800406a:	2200      	movs	r2, #0
 800406c:	4619      	mov	r1, r3
 800406e:	4818      	ldr	r0, [pc, #96]	; (80040d0 <MX_TIM3_Init+0x12c>)
 8004070:	f004 f8cc 	bl	800820c <HAL_TIM_PWM_ConfigChannel>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800407a:	f7ff fcf1 	bl	8003a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800407e:	463b      	mov	r3, r7
 8004080:	2204      	movs	r2, #4
 8004082:	4619      	mov	r1, r3
 8004084:	4812      	ldr	r0, [pc, #72]	; (80040d0 <MX_TIM3_Init+0x12c>)
 8004086:	f004 f8c1 	bl	800820c <HAL_TIM_PWM_ConfigChannel>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8004090:	f7ff fce6 	bl	8003a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004094:	463b      	mov	r3, r7
 8004096:	2208      	movs	r2, #8
 8004098:	4619      	mov	r1, r3
 800409a:	480d      	ldr	r0, [pc, #52]	; (80040d0 <MX_TIM3_Init+0x12c>)
 800409c:	f004 f8b6 	bl	800820c <HAL_TIM_PWM_ConfigChannel>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 80040a6:	f7ff fcdb 	bl	8003a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80040aa:	463b      	mov	r3, r7
 80040ac:	220c      	movs	r2, #12
 80040ae:	4619      	mov	r1, r3
 80040b0:	4807      	ldr	r0, [pc, #28]	; (80040d0 <MX_TIM3_Init+0x12c>)
 80040b2:	f004 f8ab 	bl	800820c <HAL_TIM_PWM_ConfigChannel>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 80040bc:	f7ff fcd0 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80040c0:	4803      	ldr	r0, [pc, #12]	; (80040d0 <MX_TIM3_Init+0x12c>)
 80040c2:	f000 f8b5 	bl	8004230 <HAL_TIM_MspPostInit>

}
 80040c6:	bf00      	nop
 80040c8:	3738      	adds	r7, #56	; 0x38
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	200018c8 	.word	0x200018c8
 80040d4:	40000400 	.word	0x40000400

080040d8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040de:	f107 0310 	add.w	r3, r7, #16
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	605a      	str	r2, [r3, #4]
 80040e8:	609a      	str	r2, [r3, #8]
 80040ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040ec:	1d3b      	adds	r3, r7, #4
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	605a      	str	r2, [r3, #4]
 80040f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80040f6:	4b1e      	ldr	r3, [pc, #120]	; (8004170 <MX_TIM4_Init+0x98>)
 80040f8:	4a1e      	ldr	r2, [pc, #120]	; (8004174 <MX_TIM4_Init+0x9c>)
 80040fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4000;
 80040fc:	4b1c      	ldr	r3, [pc, #112]	; (8004170 <MX_TIM4_Init+0x98>)
 80040fe:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004102:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004104:	4b1a      	ldr	r3, [pc, #104]	; (8004170 <MX_TIM4_Init+0x98>)
 8004106:	2200      	movs	r2, #0
 8004108:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1620;
 800410a:	4b19      	ldr	r3, [pc, #100]	; (8004170 <MX_TIM4_Init+0x98>)
 800410c:	f240 6254 	movw	r2, #1620	; 0x654
 8004110:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004112:	4b17      	ldr	r3, [pc, #92]	; (8004170 <MX_TIM4_Init+0x98>)
 8004114:	2200      	movs	r2, #0
 8004116:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004118:	4b15      	ldr	r3, [pc, #84]	; (8004170 <MX_TIM4_Init+0x98>)
 800411a:	2280      	movs	r2, #128	; 0x80
 800411c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800411e:	4814      	ldr	r0, [pc, #80]	; (8004170 <MX_TIM4_Init+0x98>)
 8004120:	f003 fd28 	bl	8007b74 <HAL_TIM_Base_Init>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800412a:	f7ff fc99 	bl	8003a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800412e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004132:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004134:	f107 0310 	add.w	r3, r7, #16
 8004138:	4619      	mov	r1, r3
 800413a:	480d      	ldr	r0, [pc, #52]	; (8004170 <MX_TIM4_Init+0x98>)
 800413c:	f004 f976 	bl	800842c <HAL_TIM_ConfigClockSource>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8004146:	f7ff fc8b 	bl	8003a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800414a:	2300      	movs	r3, #0
 800414c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004152:	1d3b      	adds	r3, r7, #4
 8004154:	4619      	mov	r1, r3
 8004156:	4806      	ldr	r0, [pc, #24]	; (8004170 <MX_TIM4_Init+0x98>)
 8004158:	f004 fe14 	bl	8008d84 <HAL_TIMEx_MasterConfigSynchronization>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8004162:	f7ff fc7d 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004166:	bf00      	nop
 8004168:	3720      	adds	r7, #32
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	2000187c 	.word	0x2000187c
 8004174:	40000800 	.word	0x40000800

08004178 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004188:	d114      	bne.n	80041b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800418a:	4b26      	ldr	r3, [pc, #152]	; (8004224 <HAL_TIM_Base_MspInit+0xac>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	4a25      	ldr	r2, [pc, #148]	; (8004224 <HAL_TIM_Base_MspInit+0xac>)
 8004190:	f043 0301 	orr.w	r3, r3, #1
 8004194:	6413      	str	r3, [r2, #64]	; 0x40
 8004196:	4b23      	ldr	r3, [pc, #140]	; (8004224 <HAL_TIM_Base_MspInit+0xac>)
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80041a2:	2200      	movs	r2, #0
 80041a4:	2103      	movs	r1, #3
 80041a6:	201c      	movs	r0, #28
 80041a8:	f000 fbb1 	bl	800490e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80041ac:	201c      	movs	r0, #28
 80041ae:	f000 fbca 	bl	8004946 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80041b2:	e032      	b.n	800421a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a1b      	ldr	r2, [pc, #108]	; (8004228 <HAL_TIM_Base_MspInit+0xb0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d114      	bne.n	80041e8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041be:	4b19      	ldr	r3, [pc, #100]	; (8004224 <HAL_TIM_Base_MspInit+0xac>)
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	4a18      	ldr	r2, [pc, #96]	; (8004224 <HAL_TIM_Base_MspInit+0xac>)
 80041c4:	f043 0302 	orr.w	r3, r3, #2
 80041c8:	6413      	str	r3, [r2, #64]	; 0x40
 80041ca:	4b16      	ldr	r3, [pc, #88]	; (8004224 <HAL_TIM_Base_MspInit+0xac>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80041d6:	2200      	movs	r2, #0
 80041d8:	2100      	movs	r1, #0
 80041da:	201d      	movs	r0, #29
 80041dc:	f000 fb97 	bl	800490e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80041e0:	201d      	movs	r0, #29
 80041e2:	f000 fbb0 	bl	8004946 <HAL_NVIC_EnableIRQ>
}
 80041e6:	e018      	b.n	800421a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM4)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a0f      	ldr	r2, [pc, #60]	; (800422c <HAL_TIM_Base_MspInit+0xb4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d113      	bne.n	800421a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80041f2:	4b0c      	ldr	r3, [pc, #48]	; (8004224 <HAL_TIM_Base_MspInit+0xac>)
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	4a0b      	ldr	r2, [pc, #44]	; (8004224 <HAL_TIM_Base_MspInit+0xac>)
 80041f8:	f043 0304 	orr.w	r3, r3, #4
 80041fc:	6413      	str	r3, [r2, #64]	; 0x40
 80041fe:	4b09      	ldr	r3, [pc, #36]	; (8004224 <HAL_TIM_Base_MspInit+0xac>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	f003 0304 	and.w	r3, r3, #4
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800420a:	2200      	movs	r2, #0
 800420c:	2100      	movs	r1, #0
 800420e:	201e      	movs	r0, #30
 8004210:	f000 fb7d 	bl	800490e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004214:	201e      	movs	r0, #30
 8004216:	f000 fb96 	bl	8004946 <HAL_NVIC_EnableIRQ>
}
 800421a:	bf00      	nop
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40023800 	.word	0x40023800
 8004228:	40000400 	.word	0x40000400
 800422c:	40000800 	.word	0x40000800

08004230 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004238:	f107 030c 	add.w	r3, r7, #12
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	605a      	str	r2, [r3, #4]
 8004242:	609a      	str	r2, [r3, #8]
 8004244:	60da      	str	r2, [r3, #12]
 8004246:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a11      	ldr	r2, [pc, #68]	; (8004294 <HAL_TIM_MspPostInit+0x64>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d11b      	bne.n	800428a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004252:	4b11      	ldr	r3, [pc, #68]	; (8004298 <HAL_TIM_MspPostInit+0x68>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	4a10      	ldr	r2, [pc, #64]	; (8004298 <HAL_TIM_MspPostInit+0x68>)
 8004258:	f043 0302 	orr.w	r3, r3, #2
 800425c:	6313      	str	r3, [r2, #48]	; 0x30
 800425e:	4b0e      	ldr	r3, [pc, #56]	; (8004298 <HAL_TIM_MspPostInit+0x68>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	60bb      	str	r3, [r7, #8]
 8004268:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800426a:	2333      	movs	r3, #51	; 0x33
 800426c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800426e:	2302      	movs	r3, #2
 8004270:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004276:	2300      	movs	r3, #0
 8004278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800427a:	2302      	movs	r3, #2
 800427c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800427e:	f107 030c 	add.w	r3, r7, #12
 8004282:	4619      	mov	r1, r3
 8004284:	4805      	ldr	r0, [pc, #20]	; (800429c <HAL_TIM_MspPostInit+0x6c>)
 8004286:	f000 ff83 	bl	8005190 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800428a:	bf00      	nop
 800428c:	3720      	adds	r7, #32
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40000400 	.word	0x40000400
 8004298:	40023800 	.word	0x40023800
 800429c:	40020400 	.word	0x40020400

080042a0 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80042a4:	4b14      	ldr	r3, [pc, #80]	; (80042f8 <MX_UART4_Init+0x58>)
 80042a6:	4a15      	ldr	r2, [pc, #84]	; (80042fc <MX_UART4_Init+0x5c>)
 80042a8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 80042aa:	4b13      	ldr	r3, [pc, #76]	; (80042f8 <MX_UART4_Init+0x58>)
 80042ac:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80042b0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80042b2:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <MX_UART4_Init+0x58>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80042b8:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <MX_UART4_Init+0x58>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80042be:	4b0e      	ldr	r3, [pc, #56]	; (80042f8 <MX_UART4_Init+0x58>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80042c4:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <MX_UART4_Init+0x58>)
 80042c6:	220c      	movs	r2, #12
 80042c8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042ca:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <MX_UART4_Init+0x58>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80042d0:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <MX_UART4_Init+0x58>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042d6:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <MX_UART4_Init+0x58>)
 80042d8:	2200      	movs	r2, #0
 80042da:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042dc:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <MX_UART4_Init+0x58>)
 80042de:	2200      	movs	r2, #0
 80042e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80042e2:	4805      	ldr	r0, [pc, #20]	; (80042f8 <MX_UART4_Init+0x58>)
 80042e4:	f004 fdfa 	bl	8008edc <HAL_UART_Init>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80042ee:	f7ff fbb7 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80042f2:	bf00      	nop
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20001aa4 	.word	0x20001aa4
 80042fc:	40004c00 	.word	0x40004c00

08004300 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004304:	4b14      	ldr	r3, [pc, #80]	; (8004358 <MX_USART1_UART_Init+0x58>)
 8004306:	4a15      	ldr	r2, [pc, #84]	; (800435c <MX_USART1_UART_Init+0x5c>)
 8004308:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800430a:	4b13      	ldr	r3, [pc, #76]	; (8004358 <MX_USART1_UART_Init+0x58>)
 800430c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004310:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004312:	4b11      	ldr	r3, [pc, #68]	; (8004358 <MX_USART1_UART_Init+0x58>)
 8004314:	2200      	movs	r2, #0
 8004316:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004318:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <MX_USART1_UART_Init+0x58>)
 800431a:	2200      	movs	r2, #0
 800431c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800431e:	4b0e      	ldr	r3, [pc, #56]	; (8004358 <MX_USART1_UART_Init+0x58>)
 8004320:	2200      	movs	r2, #0
 8004322:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004324:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <MX_USART1_UART_Init+0x58>)
 8004326:	220c      	movs	r2, #12
 8004328:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800432a:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <MX_USART1_UART_Init+0x58>)
 800432c:	2200      	movs	r2, #0
 800432e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004330:	4b09      	ldr	r3, [pc, #36]	; (8004358 <MX_USART1_UART_Init+0x58>)
 8004332:	2200      	movs	r2, #0
 8004334:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004336:	4b08      	ldr	r3, [pc, #32]	; (8004358 <MX_USART1_UART_Init+0x58>)
 8004338:	2200      	movs	r2, #0
 800433a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <MX_USART1_UART_Init+0x58>)
 800433e:	2200      	movs	r2, #0
 8004340:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004342:	4805      	ldr	r0, [pc, #20]	; (8004358 <MX_USART1_UART_Init+0x58>)
 8004344:	f004 fdca 	bl	8008edc <HAL_UART_Init>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800434e:	f7ff fb87 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004352:	bf00      	nop
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20001a20 	.word	0x20001a20
 800435c:	40011000 	.word	0x40011000

08004360 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004364:	4b14      	ldr	r3, [pc, #80]	; (80043b8 <MX_USART2_UART_Init+0x58>)
 8004366:	4a15      	ldr	r2, [pc, #84]	; (80043bc <MX_USART2_UART_Init+0x5c>)
 8004368:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800436a:	4b13      	ldr	r3, [pc, #76]	; (80043b8 <MX_USART2_UART_Init+0x58>)
 800436c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004370:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004372:	4b11      	ldr	r3, [pc, #68]	; (80043b8 <MX_USART2_UART_Init+0x58>)
 8004374:	2200      	movs	r2, #0
 8004376:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004378:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <MX_USART2_UART_Init+0x58>)
 800437a:	2200      	movs	r2, #0
 800437c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800437e:	4b0e      	ldr	r3, [pc, #56]	; (80043b8 <MX_USART2_UART_Init+0x58>)
 8004380:	2200      	movs	r2, #0
 8004382:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004384:	4b0c      	ldr	r3, [pc, #48]	; (80043b8 <MX_USART2_UART_Init+0x58>)
 8004386:	220c      	movs	r2, #12
 8004388:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800438a:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <MX_USART2_UART_Init+0x58>)
 800438c:	2200      	movs	r2, #0
 800438e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004390:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <MX_USART2_UART_Init+0x58>)
 8004392:	2200      	movs	r2, #0
 8004394:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004396:	4b08      	ldr	r3, [pc, #32]	; (80043b8 <MX_USART2_UART_Init+0x58>)
 8004398:	2200      	movs	r2, #0
 800439a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800439c:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <MX_USART2_UART_Init+0x58>)
 800439e:	2200      	movs	r2, #0
 80043a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80043a2:	4805      	ldr	r0, [pc, #20]	; (80043b8 <MX_USART2_UART_Init+0x58>)
 80043a4:	f004 fd9a 	bl	8008edc <HAL_UART_Init>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80043ae:	f7ff fb57 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80043b2:	bf00      	nop
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20001b28 	.word	0x20001b28
 80043bc:	40004400 	.word	0x40004400

080043c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08e      	sub	sp, #56	; 0x38
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	605a      	str	r2, [r3, #4]
 80043d2:	609a      	str	r2, [r3, #8]
 80043d4:	60da      	str	r2, [r3, #12]
 80043d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a80      	ldr	r2, [pc, #512]	; (80045e0 <HAL_UART_MspInit+0x220>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d130      	bne.n	8004444 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80043e2:	4b80      	ldr	r3, [pc, #512]	; (80045e4 <HAL_UART_MspInit+0x224>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	4a7f      	ldr	r2, [pc, #508]	; (80045e4 <HAL_UART_MspInit+0x224>)
 80043e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043ec:	6413      	str	r3, [r2, #64]	; 0x40
 80043ee:	4b7d      	ldr	r3, [pc, #500]	; (80045e4 <HAL_UART_MspInit+0x224>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043f6:	623b      	str	r3, [r7, #32]
 80043f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043fa:	4b7a      	ldr	r3, [pc, #488]	; (80045e4 <HAL_UART_MspInit+0x224>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	4a79      	ldr	r2, [pc, #484]	; (80045e4 <HAL_UART_MspInit+0x224>)
 8004400:	f043 0301 	orr.w	r3, r3, #1
 8004404:	6313      	str	r3, [r2, #48]	; 0x30
 8004406:	4b77      	ldr	r3, [pc, #476]	; (80045e4 <HAL_UART_MspInit+0x224>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	61fb      	str	r3, [r7, #28]
 8004410:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004412:	2303      	movs	r3, #3
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004416:	2302      	movs	r3, #2
 8004418:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800441a:	2300      	movs	r3, #0
 800441c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800441e:	2303      	movs	r3, #3
 8004420:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004422:	2308      	movs	r3, #8
 8004424:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800442a:	4619      	mov	r1, r3
 800442c:	486e      	ldr	r0, [pc, #440]	; (80045e8 <HAL_UART_MspInit+0x228>)
 800442e:	f000 feaf 	bl	8005190 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004432:	2200      	movs	r2, #0
 8004434:	2100      	movs	r1, #0
 8004436:	2034      	movs	r0, #52	; 0x34
 8004438:	f000 fa69 	bl	800490e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800443c:	2034      	movs	r0, #52	; 0x34
 800443e:	f000 fa82 	bl	8004946 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004442:	e0c8      	b.n	80045d6 <HAL_UART_MspInit+0x216>
  else if(uartHandle->Instance==USART1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a68      	ldr	r2, [pc, #416]	; (80045ec <HAL_UART_MspInit+0x22c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d15f      	bne.n	800450e <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART1_CLK_ENABLE();
 800444e:	4b65      	ldr	r3, [pc, #404]	; (80045e4 <HAL_UART_MspInit+0x224>)
 8004450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004452:	4a64      	ldr	r2, [pc, #400]	; (80045e4 <HAL_UART_MspInit+0x224>)
 8004454:	f043 0310 	orr.w	r3, r3, #16
 8004458:	6453      	str	r3, [r2, #68]	; 0x44
 800445a:	4b62      	ldr	r3, [pc, #392]	; (80045e4 <HAL_UART_MspInit+0x224>)
 800445c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	61bb      	str	r3, [r7, #24]
 8004464:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004466:	4b5f      	ldr	r3, [pc, #380]	; (80045e4 <HAL_UART_MspInit+0x224>)
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	4a5e      	ldr	r2, [pc, #376]	; (80045e4 <HAL_UART_MspInit+0x224>)
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	6313      	str	r3, [r2, #48]	; 0x30
 8004472:	4b5c      	ldr	r3, [pc, #368]	; (80045e4 <HAL_UART_MspInit+0x224>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800447e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004484:	2302      	movs	r3, #2
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004488:	2300      	movs	r3, #0
 800448a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800448c:	2303      	movs	r3, #3
 800448e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004490:	2307      	movs	r3, #7
 8004492:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004498:	4619      	mov	r1, r3
 800449a:	4853      	ldr	r0, [pc, #332]	; (80045e8 <HAL_UART_MspInit+0x228>)
 800449c:	f000 fe78 	bl	8005190 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80044a0:	4b53      	ldr	r3, [pc, #332]	; (80045f0 <HAL_UART_MspInit+0x230>)
 80044a2:	4a54      	ldr	r2, [pc, #336]	; (80045f4 <HAL_UART_MspInit+0x234>)
 80044a4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80044a6:	4b52      	ldr	r3, [pc, #328]	; (80045f0 <HAL_UART_MspInit+0x230>)
 80044a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044ac:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044ae:	4b50      	ldr	r3, [pc, #320]	; (80045f0 <HAL_UART_MspInit+0x230>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044b4:	4b4e      	ldr	r3, [pc, #312]	; (80045f0 <HAL_UART_MspInit+0x230>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044ba:	4b4d      	ldr	r3, [pc, #308]	; (80045f0 <HAL_UART_MspInit+0x230>)
 80044bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044c0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044c2:	4b4b      	ldr	r3, [pc, #300]	; (80045f0 <HAL_UART_MspInit+0x230>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044c8:	4b49      	ldr	r3, [pc, #292]	; (80045f0 <HAL_UART_MspInit+0x230>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80044ce:	4b48      	ldr	r3, [pc, #288]	; (80045f0 <HAL_UART_MspInit+0x230>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80044d4:	4b46      	ldr	r3, [pc, #280]	; (80045f0 <HAL_UART_MspInit+0x230>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044da:	4b45      	ldr	r3, [pc, #276]	; (80045f0 <HAL_UART_MspInit+0x230>)
 80044dc:	2200      	movs	r2, #0
 80044de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80044e0:	4843      	ldr	r0, [pc, #268]	; (80045f0 <HAL_UART_MspInit+0x230>)
 80044e2:	f000 fa4b 	bl	800497c <HAL_DMA_Init>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <HAL_UART_MspInit+0x130>
      Error_Handler();
 80044ec:	f7ff fab8 	bl	8003a60 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a3f      	ldr	r2, [pc, #252]	; (80045f0 <HAL_UART_MspInit+0x230>)
 80044f4:	671a      	str	r2, [r3, #112]	; 0x70
 80044f6:	4a3e      	ldr	r2, [pc, #248]	; (80045f0 <HAL_UART_MspInit+0x230>)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80044fc:	2200      	movs	r2, #0
 80044fe:	2100      	movs	r1, #0
 8004500:	2025      	movs	r0, #37	; 0x25
 8004502:	f000 fa04 	bl	800490e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004506:	2025      	movs	r0, #37	; 0x25
 8004508:	f000 fa1d 	bl	8004946 <HAL_NVIC_EnableIRQ>
}
 800450c:	e063      	b.n	80045d6 <HAL_UART_MspInit+0x216>
  else if(uartHandle->Instance==USART2)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a39      	ldr	r2, [pc, #228]	; (80045f8 <HAL_UART_MspInit+0x238>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d15e      	bne.n	80045d6 <HAL_UART_MspInit+0x216>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004518:	4b32      	ldr	r3, [pc, #200]	; (80045e4 <HAL_UART_MspInit+0x224>)
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	4a31      	ldr	r2, [pc, #196]	; (80045e4 <HAL_UART_MspInit+0x224>)
 800451e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004522:	6413      	str	r3, [r2, #64]	; 0x40
 8004524:	4b2f      	ldr	r3, [pc, #188]	; (80045e4 <HAL_UART_MspInit+0x224>)
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004530:	4b2c      	ldr	r3, [pc, #176]	; (80045e4 <HAL_UART_MspInit+0x224>)
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	4a2b      	ldr	r2, [pc, #172]	; (80045e4 <HAL_UART_MspInit+0x224>)
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	6313      	str	r3, [r2, #48]	; 0x30
 800453c:	4b29      	ldr	r3, [pc, #164]	; (80045e4 <HAL_UART_MspInit+0x224>)
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004548:	230c      	movs	r3, #12
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800454c:	2302      	movs	r3, #2
 800454e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004550:	2300      	movs	r3, #0
 8004552:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004554:	2303      	movs	r3, #3
 8004556:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004558:	2307      	movs	r3, #7
 800455a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800455c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004560:	4619      	mov	r1, r3
 8004562:	4821      	ldr	r0, [pc, #132]	; (80045e8 <HAL_UART_MspInit+0x228>)
 8004564:	f000 fe14 	bl	8005190 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004568:	4b24      	ldr	r3, [pc, #144]	; (80045fc <HAL_UART_MspInit+0x23c>)
 800456a:	4a25      	ldr	r2, [pc, #148]	; (8004600 <HAL_UART_MspInit+0x240>)
 800456c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800456e:	4b23      	ldr	r3, [pc, #140]	; (80045fc <HAL_UART_MspInit+0x23c>)
 8004570:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004574:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004576:	4b21      	ldr	r3, [pc, #132]	; (80045fc <HAL_UART_MspInit+0x23c>)
 8004578:	2200      	movs	r2, #0
 800457a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800457c:	4b1f      	ldr	r3, [pc, #124]	; (80045fc <HAL_UART_MspInit+0x23c>)
 800457e:	2200      	movs	r2, #0
 8004580:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004582:	4b1e      	ldr	r3, [pc, #120]	; (80045fc <HAL_UART_MspInit+0x23c>)
 8004584:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004588:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800458a:	4b1c      	ldr	r3, [pc, #112]	; (80045fc <HAL_UART_MspInit+0x23c>)
 800458c:	2200      	movs	r2, #0
 800458e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004590:	4b1a      	ldr	r3, [pc, #104]	; (80045fc <HAL_UART_MspInit+0x23c>)
 8004592:	2200      	movs	r2, #0
 8004594:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004596:	4b19      	ldr	r3, [pc, #100]	; (80045fc <HAL_UART_MspInit+0x23c>)
 8004598:	f44f 7280 	mov.w	r2, #256	; 0x100
 800459c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800459e:	4b17      	ldr	r3, [pc, #92]	; (80045fc <HAL_UART_MspInit+0x23c>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045a4:	4b15      	ldr	r3, [pc, #84]	; (80045fc <HAL_UART_MspInit+0x23c>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80045aa:	4814      	ldr	r0, [pc, #80]	; (80045fc <HAL_UART_MspInit+0x23c>)
 80045ac:	f000 f9e6 	bl	800497c <HAL_DMA_Init>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 80045b6:	f7ff fa53 	bl	8003a60 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a0f      	ldr	r2, [pc, #60]	; (80045fc <HAL_UART_MspInit+0x23c>)
 80045be:	671a      	str	r2, [r3, #112]	; 0x70
 80045c0:	4a0e      	ldr	r2, [pc, #56]	; (80045fc <HAL_UART_MspInit+0x23c>)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80045c6:	2200      	movs	r2, #0
 80045c8:	2100      	movs	r1, #0
 80045ca:	2026      	movs	r0, #38	; 0x26
 80045cc:	f000 f99f 	bl	800490e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80045d0:	2026      	movs	r0, #38	; 0x26
 80045d2:	f000 f9b8 	bl	8004946 <HAL_NVIC_EnableIRQ>
}
 80045d6:	bf00      	nop
 80045d8:	3738      	adds	r7, #56	; 0x38
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40004c00 	.word	0x40004c00
 80045e4:	40023800 	.word	0x40023800
 80045e8:	40020000 	.word	0x40020000
 80045ec:	40011000 	.word	0x40011000
 80045f0:	200019c0 	.word	0x200019c0
 80045f4:	40026440 	.word	0x40026440
 80045f8:	40004400 	.word	0x40004400
 80045fc:	20001960 	.word	0x20001960
 8004600:	40026088 	.word	0x40026088

08004604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800463c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004608:	480d      	ldr	r0, [pc, #52]	; (8004640 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800460a:	490e      	ldr	r1, [pc, #56]	; (8004644 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800460c:	4a0e      	ldr	r2, [pc, #56]	; (8004648 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800460e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004610:	e002      	b.n	8004618 <LoopCopyDataInit>

08004612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004616:	3304      	adds	r3, #4

08004618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800461a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800461c:	d3f9      	bcc.n	8004612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800461e:	4a0b      	ldr	r2, [pc, #44]	; (800464c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004620:	4c0b      	ldr	r4, [pc, #44]	; (8004650 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004624:	e001      	b.n	800462a <LoopFillZerobss>

08004626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004628:	3204      	adds	r2, #4

0800462a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800462a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800462c:	d3fb      	bcc.n	8004626 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800462e:	f7ff fc59 	bl	8003ee4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004632:	f005 ff2f 	bl	800a494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004636:	f7fe fbbb 	bl	8002db0 <main>
  bx  lr    
 800463a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800463c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8004640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004644:	200009fc 	.word	0x200009fc
  ldr r2, =_sidata
 8004648:	0801149c 	.word	0x0801149c
  ldr r2, =_sbss
 800464c:	200009fc 	.word	0x200009fc
  ldr r4, =_ebss
 8004650:	20001bc0 	.word	0x20001bc0

08004654 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004654:	e7fe      	b.n	8004654 <ADC_IRQHandler>

08004656 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800465a:	2003      	movs	r0, #3
 800465c:	f000 f94c 	bl	80048f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004660:	2000      	movs	r0, #0
 8004662:	f000 f805 	bl	8004670 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004666:	f7ff facf 	bl	8003c08 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004678:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <HAL_InitTick+0x54>)
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <HAL_InitTick+0x58>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	4619      	mov	r1, r3
 8004682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004686:	fbb3 f3f1 	udiv	r3, r3, r1
 800468a:	fbb2 f3f3 	udiv	r3, r2, r3
 800468e:	4618      	mov	r0, r3
 8004690:	f000 f967 	bl	8004962 <HAL_SYSTICK_Config>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e00e      	b.n	80046bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b0f      	cmp	r3, #15
 80046a2:	d80a      	bhi.n	80046ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046a4:	2200      	movs	r2, #0
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ac:	f000 f92f 	bl	800490e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046b0:	4a06      	ldr	r2, [pc, #24]	; (80046cc <HAL_InitTick+0x5c>)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	e000      	b.n	80046bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	20000040 	.word	0x20000040
 80046c8:	20000048 	.word	0x20000048
 80046cc:	20000044 	.word	0x20000044

080046d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046d4:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <HAL_IncTick+0x20>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	461a      	mov	r2, r3
 80046da:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <HAL_IncTick+0x24>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4413      	add	r3, r2
 80046e0:	4a04      	ldr	r2, [pc, #16]	; (80046f4 <HAL_IncTick+0x24>)
 80046e2:	6013      	str	r3, [r2, #0]
}
 80046e4:	bf00      	nop
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	20000048 	.word	0x20000048
 80046f4:	20001bac 	.word	0x20001bac

080046f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  return uwTick;
 80046fc:	4b03      	ldr	r3, [pc, #12]	; (800470c <HAL_GetTick+0x14>)
 80046fe:	681b      	ldr	r3, [r3, #0]
}
 8004700:	4618      	mov	r0, r3
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20001bac 	.word	0x20001bac

08004710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004718:	f7ff ffee 	bl	80046f8 <HAL_GetTick>
 800471c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d005      	beq.n	8004736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800472a:	4b0a      	ldr	r3, [pc, #40]	; (8004754 <HAL_Delay+0x44>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004736:	bf00      	nop
 8004738:	f7ff ffde 	bl	80046f8 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	429a      	cmp	r2, r3
 8004746:	d8f7      	bhi.n	8004738 <HAL_Delay+0x28>
  {
  }
}
 8004748:	bf00      	nop
 800474a:	bf00      	nop
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	20000048 	.word	0x20000048

08004758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004768:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <__NVIC_SetPriorityGrouping+0x40>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004774:	4013      	ands	r3, r2
 8004776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004780:	4b06      	ldr	r3, [pc, #24]	; (800479c <__NVIC_SetPriorityGrouping+0x44>)
 8004782:	4313      	orrs	r3, r2
 8004784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004786:	4a04      	ldr	r2, [pc, #16]	; (8004798 <__NVIC_SetPriorityGrouping+0x40>)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	60d3      	str	r3, [r2, #12]
}
 800478c:	bf00      	nop
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	e000ed00 	.word	0xe000ed00
 800479c:	05fa0000 	.word	0x05fa0000

080047a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047a4:	4b04      	ldr	r3, [pc, #16]	; (80047b8 <__NVIC_GetPriorityGrouping+0x18>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	0a1b      	lsrs	r3, r3, #8
 80047aa:	f003 0307 	and.w	r3, r3, #7
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	e000ed00 	.word	0xe000ed00

080047bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	db0b      	blt.n	80047e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ce:	79fb      	ldrb	r3, [r7, #7]
 80047d0:	f003 021f 	and.w	r2, r3, #31
 80047d4:	4907      	ldr	r1, [pc, #28]	; (80047f4 <__NVIC_EnableIRQ+0x38>)
 80047d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047da:	095b      	lsrs	r3, r3, #5
 80047dc:	2001      	movs	r0, #1
 80047de:	fa00 f202 	lsl.w	r2, r0, r2
 80047e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	e000e100 	.word	0xe000e100

080047f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	4603      	mov	r3, r0
 8004800:	6039      	str	r1, [r7, #0]
 8004802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004808:	2b00      	cmp	r3, #0
 800480a:	db0a      	blt.n	8004822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	b2da      	uxtb	r2, r3
 8004810:	490c      	ldr	r1, [pc, #48]	; (8004844 <__NVIC_SetPriority+0x4c>)
 8004812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004816:	0112      	lsls	r2, r2, #4
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	440b      	add	r3, r1
 800481c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004820:	e00a      	b.n	8004838 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	b2da      	uxtb	r2, r3
 8004826:	4908      	ldr	r1, [pc, #32]	; (8004848 <__NVIC_SetPriority+0x50>)
 8004828:	79fb      	ldrb	r3, [r7, #7]
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	3b04      	subs	r3, #4
 8004830:	0112      	lsls	r2, r2, #4
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	440b      	add	r3, r1
 8004836:	761a      	strb	r2, [r3, #24]
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	e000e100 	.word	0xe000e100
 8004848:	e000ed00 	.word	0xe000ed00

0800484c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800484c:	b480      	push	{r7}
 800484e:	b089      	sub	sp, #36	; 0x24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	f1c3 0307 	rsb	r3, r3, #7
 8004866:	2b04      	cmp	r3, #4
 8004868:	bf28      	it	cs
 800486a:	2304      	movcs	r3, #4
 800486c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	3304      	adds	r3, #4
 8004872:	2b06      	cmp	r3, #6
 8004874:	d902      	bls.n	800487c <NVIC_EncodePriority+0x30>
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	3b03      	subs	r3, #3
 800487a:	e000      	b.n	800487e <NVIC_EncodePriority+0x32>
 800487c:	2300      	movs	r3, #0
 800487e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004880:	f04f 32ff 	mov.w	r2, #4294967295
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	43da      	mvns	r2, r3
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	401a      	ands	r2, r3
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004894:	f04f 31ff 	mov.w	r1, #4294967295
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	fa01 f303 	lsl.w	r3, r1, r3
 800489e:	43d9      	mvns	r1, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a4:	4313      	orrs	r3, r2
         );
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3724      	adds	r7, #36	; 0x24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3b01      	subs	r3, #1
 80048c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048c4:	d301      	bcc.n	80048ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048c6:	2301      	movs	r3, #1
 80048c8:	e00f      	b.n	80048ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048ca:	4a0a      	ldr	r2, [pc, #40]	; (80048f4 <SysTick_Config+0x40>)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048d2:	210f      	movs	r1, #15
 80048d4:	f04f 30ff 	mov.w	r0, #4294967295
 80048d8:	f7ff ff8e 	bl	80047f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <SysTick_Config+0x40>)
 80048de:	2200      	movs	r2, #0
 80048e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048e2:	4b04      	ldr	r3, [pc, #16]	; (80048f4 <SysTick_Config+0x40>)
 80048e4:	2207      	movs	r2, #7
 80048e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	e000e010 	.word	0xe000e010

080048f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff ff29 	bl	8004758 <__NVIC_SetPriorityGrouping>
}
 8004906:	bf00      	nop
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800490e:	b580      	push	{r7, lr}
 8004910:	b086      	sub	sp, #24
 8004912:	af00      	add	r7, sp, #0
 8004914:	4603      	mov	r3, r0
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	607a      	str	r2, [r7, #4]
 800491a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800491c:	2300      	movs	r3, #0
 800491e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004920:	f7ff ff3e 	bl	80047a0 <__NVIC_GetPriorityGrouping>
 8004924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	6978      	ldr	r0, [r7, #20]
 800492c:	f7ff ff8e 	bl	800484c <NVIC_EncodePriority>
 8004930:	4602      	mov	r2, r0
 8004932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004936:	4611      	mov	r1, r2
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff ff5d 	bl	80047f8 <__NVIC_SetPriority>
}
 800493e:	bf00      	nop
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	af00      	add	r7, sp, #0
 800494c:	4603      	mov	r3, r0
 800494e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff ff31 	bl	80047bc <__NVIC_EnableIRQ>
}
 800495a:	bf00      	nop
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7ff ffa2 	bl	80048b4 <SysTick_Config>
 8004970:	4603      	mov	r3, r0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004988:	f7ff feb6 	bl	80046f8 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e099      	b.n	8004acc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0201 	bic.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049b8:	e00f      	b.n	80049da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049ba:	f7ff fe9d 	bl	80046f8 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b05      	cmp	r3, #5
 80049c6:	d908      	bls.n	80049da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2220      	movs	r2, #32
 80049cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2203      	movs	r2, #3
 80049d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e078      	b.n	8004acc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e8      	bne.n	80049ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4b38      	ldr	r3, [pc, #224]	; (8004ad4 <HAL_DMA_Init+0x158>)
 80049f4:	4013      	ands	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d107      	bne.n	8004a44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f023 0307 	bic.w	r3, r3, #7
 8004a5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d117      	bne.n	8004a9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00e      	beq.n	8004a9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 fb09 	bl	8005098 <DMA_CheckFifoParam>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d008      	beq.n	8004a9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2240      	movs	r2, #64	; 0x40
 8004a90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e016      	b.n	8004acc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fac0 	bl	800502c <DMA_CalcBaseAndBitshift>
 8004aac:	4603      	mov	r3, r0
 8004aae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab4:	223f      	movs	r2, #63	; 0x3f
 8004ab6:	409a      	lsls	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	e010803f 	.word	0xe010803f

08004ad8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <HAL_DMA_Start_IT+0x26>
 8004afa:	2302      	movs	r3, #2
 8004afc:	e048      	b.n	8004b90 <HAL_DMA_Start_IT+0xb8>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d137      	bne.n	8004b82 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2202      	movs	r2, #2
 8004b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	68b9      	ldr	r1, [r7, #8]
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f000 fa52 	bl	8004fd0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b30:	223f      	movs	r2, #63	; 0x3f
 8004b32:	409a      	lsls	r2, r3
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0216 	orr.w	r2, r2, #22
 8004b46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695a      	ldr	r2, [r3, #20]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b56:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d007      	beq.n	8004b70 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0208 	orr.w	r2, r2, #8
 8004b6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0201 	orr.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	e005      	b.n	8004b8e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004ba6:	f7ff fda7 	bl	80046f8 <HAL_GetTick>
 8004baa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d008      	beq.n	8004bca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2280      	movs	r2, #128	; 0x80
 8004bbc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e052      	b.n	8004c70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0216 	bic.w	r2, r2, #22
 8004bd8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695a      	ldr	r2, [r3, #20]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004be8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d103      	bne.n	8004bfa <HAL_DMA_Abort+0x62>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d007      	beq.n	8004c0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0208 	bic.w	r2, r2, #8
 8004c08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0201 	bic.w	r2, r2, #1
 8004c18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c1a:	e013      	b.n	8004c44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c1c:	f7ff fd6c 	bl	80046f8 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b05      	cmp	r3, #5
 8004c28:	d90c      	bls.n	8004c44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2203      	movs	r2, #3
 8004c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e015      	b.n	8004c70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e4      	bne.n	8004c1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c56:	223f      	movs	r2, #63	; 0x3f
 8004c58:	409a      	lsls	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d004      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2280      	movs	r2, #128	; 0x80
 8004c90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e00c      	b.n	8004cb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2205      	movs	r2, #5
 8004c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0201 	bic.w	r2, r2, #1
 8004cac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004cc8:	4b92      	ldr	r3, [pc, #584]	; (8004f14 <HAL_DMA_IRQHandler+0x258>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a92      	ldr	r2, [pc, #584]	; (8004f18 <HAL_DMA_IRQHandler+0x25c>)
 8004cce:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd2:	0a9b      	lsrs	r3, r3, #10
 8004cd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce6:	2208      	movs	r2, #8
 8004ce8:	409a      	lsls	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	4013      	ands	r3, r2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d01a      	beq.n	8004d28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d013      	beq.n	8004d28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0204 	bic.w	r2, r2, #4
 8004d0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d14:	2208      	movs	r2, #8
 8004d16:	409a      	lsls	r2, r3
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d20:	f043 0201 	orr.w	r2, r3, #1
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	409a      	lsls	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4013      	ands	r3, r2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d012      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00b      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	409a      	lsls	r2, r3
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d56:	f043 0202 	orr.w	r2, r3, #2
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d62:	2204      	movs	r2, #4
 8004d64:	409a      	lsls	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d012      	beq.n	8004d94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00b      	beq.n	8004d94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d80:	2204      	movs	r2, #4
 8004d82:	409a      	lsls	r2, r3
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8c:	f043 0204 	orr.w	r2, r3, #4
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d98:	2210      	movs	r2, #16
 8004d9a:	409a      	lsls	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d043      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0308 	and.w	r3, r3, #8
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d03c      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db6:	2210      	movs	r2, #16
 8004db8:	409a      	lsls	r2, r3
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d018      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d108      	bne.n	8004dec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d024      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	4798      	blx	r3
 8004dea:	e01f      	b.n	8004e2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d01b      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	4798      	blx	r3
 8004dfc:	e016      	b.n	8004e2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d107      	bne.n	8004e1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0208 	bic.w	r2, r2, #8
 8004e1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e30:	2220      	movs	r2, #32
 8004e32:	409a      	lsls	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4013      	ands	r3, r2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 808e 	beq.w	8004f5a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0310 	and.w	r3, r3, #16
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 8086 	beq.w	8004f5a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e52:	2220      	movs	r2, #32
 8004e54:	409a      	lsls	r2, r3
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b05      	cmp	r3, #5
 8004e64:	d136      	bne.n	8004ed4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0216 	bic.w	r2, r2, #22
 8004e74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	695a      	ldr	r2, [r3, #20]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d103      	bne.n	8004e96 <HAL_DMA_IRQHandler+0x1da>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d007      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0208 	bic.w	r2, r2, #8
 8004ea4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eaa:	223f      	movs	r2, #63	; 0x3f
 8004eac:	409a      	lsls	r2, r3
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d07d      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	4798      	blx	r3
        }
        return;
 8004ed2:	e078      	b.n	8004fc6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d01c      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d108      	bne.n	8004f02 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d030      	beq.n	8004f5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	4798      	blx	r3
 8004f00:	e02b      	b.n	8004f5a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d027      	beq.n	8004f5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	4798      	blx	r3
 8004f12:	e022      	b.n	8004f5a <HAL_DMA_IRQHandler+0x29e>
 8004f14:	20000040 	.word	0x20000040
 8004f18:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10f      	bne.n	8004f4a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0210 	bic.w	r2, r2, #16
 8004f38:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d032      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d022      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2205      	movs	r2, #5
 8004f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0201 	bic.w	r2, r2, #1
 8004f84:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	60bb      	str	r3, [r7, #8]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d307      	bcc.n	8004fa2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1f2      	bne.n	8004f86 <HAL_DMA_IRQHandler+0x2ca>
 8004fa0:	e000      	b.n	8004fa4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004fa2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	4798      	blx	r3
 8004fc4:	e000      	b.n	8004fc8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004fc6:	bf00      	nop
    }
  }
}
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop

08004fd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	2b40      	cmp	r3, #64	; 0x40
 8004ffc:	d108      	bne.n	8005010 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800500e:	e007      	b.n	8005020 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	60da      	str	r2, [r3, #12]
}
 8005020:	bf00      	nop
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	b2db      	uxtb	r3, r3
 800503a:	3b10      	subs	r3, #16
 800503c:	4a13      	ldr	r2, [pc, #76]	; (800508c <DMA_CalcBaseAndBitshift+0x60>)
 800503e:	fba2 2303 	umull	r2, r3, r2, r3
 8005042:	091b      	lsrs	r3, r3, #4
 8005044:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005046:	4a12      	ldr	r2, [pc, #72]	; (8005090 <DMA_CalcBaseAndBitshift+0x64>)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4413      	add	r3, r2
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	461a      	mov	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b03      	cmp	r3, #3
 8005058:	d908      	bls.n	800506c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <DMA_CalcBaseAndBitshift+0x68>)
 8005062:	4013      	ands	r3, r2
 8005064:	1d1a      	adds	r2, r3, #4
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	659a      	str	r2, [r3, #88]	; 0x58
 800506a:	e006      	b.n	800507a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	461a      	mov	r2, r3
 8005072:	4b08      	ldr	r3, [pc, #32]	; (8005094 <DMA_CalcBaseAndBitshift+0x68>)
 8005074:	4013      	ands	r3, r2
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	aaaaaaab 	.word	0xaaaaaaab
 8005090:	08010eac 	.word	0x08010eac
 8005094:	fffffc00 	.word	0xfffffc00

08005098 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050a0:	2300      	movs	r3, #0
 80050a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d11f      	bne.n	80050f2 <DMA_CheckFifoParam+0x5a>
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	d856      	bhi.n	8005166 <DMA_CheckFifoParam+0xce>
 80050b8:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <DMA_CheckFifoParam+0x28>)
 80050ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050be:	bf00      	nop
 80050c0:	080050d1 	.word	0x080050d1
 80050c4:	080050e3 	.word	0x080050e3
 80050c8:	080050d1 	.word	0x080050d1
 80050cc:	08005167 	.word	0x08005167
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d046      	beq.n	800516a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050e0:	e043      	b.n	800516a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050ea:	d140      	bne.n	800516e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050f0:	e03d      	b.n	800516e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050fa:	d121      	bne.n	8005140 <DMA_CheckFifoParam+0xa8>
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d837      	bhi.n	8005172 <DMA_CheckFifoParam+0xda>
 8005102:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <DMA_CheckFifoParam+0x70>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	08005119 	.word	0x08005119
 800510c:	0800511f 	.word	0x0800511f
 8005110:	08005119 	.word	0x08005119
 8005114:	08005131 	.word	0x08005131
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	73fb      	strb	r3, [r7, #15]
      break;
 800511c:	e030      	b.n	8005180 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005122:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d025      	beq.n	8005176 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800512e:	e022      	b.n	8005176 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005138:	d11f      	bne.n	800517a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800513e:	e01c      	b.n	800517a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2b02      	cmp	r3, #2
 8005144:	d903      	bls.n	800514e <DMA_CheckFifoParam+0xb6>
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b03      	cmp	r3, #3
 800514a:	d003      	beq.n	8005154 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800514c:	e018      	b.n	8005180 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	73fb      	strb	r3, [r7, #15]
      break;
 8005152:	e015      	b.n	8005180 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00e      	beq.n	800517e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	73fb      	strb	r3, [r7, #15]
      break;
 8005164:	e00b      	b.n	800517e <DMA_CheckFifoParam+0xe6>
      break;
 8005166:	bf00      	nop
 8005168:	e00a      	b.n	8005180 <DMA_CheckFifoParam+0xe8>
      break;
 800516a:	bf00      	nop
 800516c:	e008      	b.n	8005180 <DMA_CheckFifoParam+0xe8>
      break;
 800516e:	bf00      	nop
 8005170:	e006      	b.n	8005180 <DMA_CheckFifoParam+0xe8>
      break;
 8005172:	bf00      	nop
 8005174:	e004      	b.n	8005180 <DMA_CheckFifoParam+0xe8>
      break;
 8005176:	bf00      	nop
 8005178:	e002      	b.n	8005180 <DMA_CheckFifoParam+0xe8>
      break;   
 800517a:	bf00      	nop
 800517c:	e000      	b.n	8005180 <DMA_CheckFifoParam+0xe8>
      break;
 800517e:	bf00      	nop
    }
  } 
  
  return status; 
 8005180:	7bfb      	ldrb	r3, [r7, #15]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop

08005190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005190:	b480      	push	{r7}
 8005192:	b089      	sub	sp, #36	; 0x24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800519a:	2300      	movs	r3, #0
 800519c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800519e:	2300      	movs	r3, #0
 80051a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80051a2:	2300      	movs	r3, #0
 80051a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80051a6:	2300      	movs	r3, #0
 80051a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80051aa:	2300      	movs	r3, #0
 80051ac:	61fb      	str	r3, [r7, #28]
 80051ae:	e169      	b.n	8005484 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80051b0:	2201      	movs	r2, #1
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	fa02 f303 	lsl.w	r3, r2, r3
 80051b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	4013      	ands	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	f040 8158 	bne.w	800547e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d00b      	beq.n	80051ee <HAL_GPIO_Init+0x5e>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d007      	beq.n	80051ee <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051e2:	2b11      	cmp	r3, #17
 80051e4:	d003      	beq.n	80051ee <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2b12      	cmp	r3, #18
 80051ec:	d130      	bne.n	8005250 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	2203      	movs	r2, #3
 80051fa:	fa02 f303 	lsl.w	r3, r2, r3
 80051fe:	43db      	mvns	r3, r3
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	4013      	ands	r3, r2
 8005204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	fa02 f303 	lsl.w	r3, r2, r3
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	4313      	orrs	r3, r2
 8005216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005224:	2201      	movs	r2, #1
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	fa02 f303 	lsl.w	r3, r2, r3
 800522c:	43db      	mvns	r3, r3
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	4013      	ands	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	091b      	lsrs	r3, r3, #4
 800523a:	f003 0201 	and.w	r2, r3, #1
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	4313      	orrs	r3, r2
 8005248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	2203      	movs	r2, #3
 800525c:	fa02 f303 	lsl.w	r3, r2, r3
 8005260:	43db      	mvns	r3, r3
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	4013      	ands	r3, r2
 8005266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	fa02 f303 	lsl.w	r3, r2, r3
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	4313      	orrs	r3, r2
 8005278:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2b02      	cmp	r3, #2
 8005286:	d003      	beq.n	8005290 <HAL_GPIO_Init+0x100>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2b12      	cmp	r3, #18
 800528e:	d123      	bne.n	80052d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	08da      	lsrs	r2, r3, #3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3208      	adds	r2, #8
 8005298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800529c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	220f      	movs	r2, #15
 80052a8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ac:	43db      	mvns	r3, r3
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	4013      	ands	r3, r2
 80052b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	fa02 f303 	lsl.w	r3, r2, r3
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	08da      	lsrs	r2, r3, #3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3208      	adds	r2, #8
 80052d2:	69b9      	ldr	r1, [r7, #24]
 80052d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	2203      	movs	r2, #3
 80052e4:	fa02 f303 	lsl.w	r3, r2, r3
 80052e8:	43db      	mvns	r3, r3
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	4013      	ands	r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f003 0203 	and.w	r2, r3, #3
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	4313      	orrs	r3, r2
 8005304:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 80b2 	beq.w	800547e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800531a:	4b60      	ldr	r3, [pc, #384]	; (800549c <HAL_GPIO_Init+0x30c>)
 800531c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531e:	4a5f      	ldr	r2, [pc, #380]	; (800549c <HAL_GPIO_Init+0x30c>)
 8005320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005324:	6453      	str	r3, [r2, #68]	; 0x44
 8005326:	4b5d      	ldr	r3, [pc, #372]	; (800549c <HAL_GPIO_Init+0x30c>)
 8005328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005332:	4a5b      	ldr	r2, [pc, #364]	; (80054a0 <HAL_GPIO_Init+0x310>)
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	089b      	lsrs	r3, r3, #2
 8005338:	3302      	adds	r3, #2
 800533a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800533e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	220f      	movs	r2, #15
 800534a:	fa02 f303 	lsl.w	r3, r2, r3
 800534e:	43db      	mvns	r3, r3
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	4013      	ands	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a52      	ldr	r2, [pc, #328]	; (80054a4 <HAL_GPIO_Init+0x314>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d02b      	beq.n	80053b6 <HAL_GPIO_Init+0x226>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a51      	ldr	r2, [pc, #324]	; (80054a8 <HAL_GPIO_Init+0x318>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d025      	beq.n	80053b2 <HAL_GPIO_Init+0x222>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a50      	ldr	r2, [pc, #320]	; (80054ac <HAL_GPIO_Init+0x31c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d01f      	beq.n	80053ae <HAL_GPIO_Init+0x21e>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a4f      	ldr	r2, [pc, #316]	; (80054b0 <HAL_GPIO_Init+0x320>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d019      	beq.n	80053aa <HAL_GPIO_Init+0x21a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a4e      	ldr	r2, [pc, #312]	; (80054b4 <HAL_GPIO_Init+0x324>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d013      	beq.n	80053a6 <HAL_GPIO_Init+0x216>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a4d      	ldr	r2, [pc, #308]	; (80054b8 <HAL_GPIO_Init+0x328>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d00d      	beq.n	80053a2 <HAL_GPIO_Init+0x212>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a4c      	ldr	r2, [pc, #304]	; (80054bc <HAL_GPIO_Init+0x32c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d007      	beq.n	800539e <HAL_GPIO_Init+0x20e>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a4b      	ldr	r2, [pc, #300]	; (80054c0 <HAL_GPIO_Init+0x330>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d101      	bne.n	800539a <HAL_GPIO_Init+0x20a>
 8005396:	2307      	movs	r3, #7
 8005398:	e00e      	b.n	80053b8 <HAL_GPIO_Init+0x228>
 800539a:	2308      	movs	r3, #8
 800539c:	e00c      	b.n	80053b8 <HAL_GPIO_Init+0x228>
 800539e:	2306      	movs	r3, #6
 80053a0:	e00a      	b.n	80053b8 <HAL_GPIO_Init+0x228>
 80053a2:	2305      	movs	r3, #5
 80053a4:	e008      	b.n	80053b8 <HAL_GPIO_Init+0x228>
 80053a6:	2304      	movs	r3, #4
 80053a8:	e006      	b.n	80053b8 <HAL_GPIO_Init+0x228>
 80053aa:	2303      	movs	r3, #3
 80053ac:	e004      	b.n	80053b8 <HAL_GPIO_Init+0x228>
 80053ae:	2302      	movs	r3, #2
 80053b0:	e002      	b.n	80053b8 <HAL_GPIO_Init+0x228>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <HAL_GPIO_Init+0x228>
 80053b6:	2300      	movs	r3, #0
 80053b8:	69fa      	ldr	r2, [r7, #28]
 80053ba:	f002 0203 	and.w	r2, r2, #3
 80053be:	0092      	lsls	r2, r2, #2
 80053c0:	4093      	lsls	r3, r2
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80053c8:	4935      	ldr	r1, [pc, #212]	; (80054a0 <HAL_GPIO_Init+0x310>)
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	089b      	lsrs	r3, r3, #2
 80053ce:	3302      	adds	r3, #2
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053d6:	4b3b      	ldr	r3, [pc, #236]	; (80054c4 <HAL_GPIO_Init+0x334>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	43db      	mvns	r3, r3
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	4013      	ands	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053fa:	4a32      	ldr	r2, [pc, #200]	; (80054c4 <HAL_GPIO_Init+0x334>)
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005400:	4b30      	ldr	r3, [pc, #192]	; (80054c4 <HAL_GPIO_Init+0x334>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	43db      	mvns	r3, r3
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	4013      	ands	r3, r2
 800540e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	4313      	orrs	r3, r2
 8005422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005424:	4a27      	ldr	r2, [pc, #156]	; (80054c4 <HAL_GPIO_Init+0x334>)
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800542a:	4b26      	ldr	r3, [pc, #152]	; (80054c4 <HAL_GPIO_Init+0x334>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	43db      	mvns	r3, r3
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	4013      	ands	r3, r2
 8005438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	4313      	orrs	r3, r2
 800544c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800544e:	4a1d      	ldr	r2, [pc, #116]	; (80054c4 <HAL_GPIO_Init+0x334>)
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005454:	4b1b      	ldr	r3, [pc, #108]	; (80054c4 <HAL_GPIO_Init+0x334>)
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	43db      	mvns	r3, r3
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	4013      	ands	r3, r2
 8005462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	4313      	orrs	r3, r2
 8005476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005478:	4a12      	ldr	r2, [pc, #72]	; (80054c4 <HAL_GPIO_Init+0x334>)
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	3301      	adds	r3, #1
 8005482:	61fb      	str	r3, [r7, #28]
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	2b0f      	cmp	r3, #15
 8005488:	f67f ae92 	bls.w	80051b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800548c:	bf00      	nop
 800548e:	bf00      	nop
 8005490:	3724      	adds	r7, #36	; 0x24
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40023800 	.word	0x40023800
 80054a0:	40013800 	.word	0x40013800
 80054a4:	40020000 	.word	0x40020000
 80054a8:	40020400 	.word	0x40020400
 80054ac:	40020800 	.word	0x40020800
 80054b0:	40020c00 	.word	0x40020c00
 80054b4:	40021000 	.word	0x40021000
 80054b8:	40021400 	.word	0x40021400
 80054bc:	40021800 	.word	0x40021800
 80054c0:	40021c00 	.word	0x40021c00
 80054c4:	40013c00 	.word	0x40013c00

080054c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	807b      	strh	r3, [r7, #2]
 80054d4:	4613      	mov	r3, r2
 80054d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054d8:	787b      	ldrb	r3, [r7, #1]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054de:	887a      	ldrh	r2, [r7, #2]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80054e4:	e003      	b.n	80054ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80054e6:	887b      	ldrh	r3, [r7, #2]
 80054e8:	041a      	lsls	r2, r3, #16
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	619a      	str	r2, [r3, #24]
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
	...

080054fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e07f      	b.n	800560e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d106      	bne.n	8005528 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7fd f966 	bl	80027f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2224      	movs	r2, #36	; 0x24
 800552c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0201 	bic.w	r2, r2, #1
 800553e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800554c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800555c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d107      	bne.n	8005576 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005572:	609a      	str	r2, [r3, #8]
 8005574:	e006      	b.n	8005584 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689a      	ldr	r2, [r3, #8]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005582:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	2b02      	cmp	r3, #2
 800558a:	d104      	bne.n	8005596 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005594:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6859      	ldr	r1, [r3, #4]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	4b1d      	ldr	r3, [pc, #116]	; (8005618 <HAL_I2C_Init+0x11c>)
 80055a2:	430b      	orrs	r3, r1
 80055a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691a      	ldr	r2, [r3, #16]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	ea42 0103 	orr.w	r1, r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	021a      	lsls	r2, r3, #8
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	69d9      	ldr	r1, [r3, #28]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1a      	ldr	r2, [r3, #32]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0201 	orr.w	r2, r2, #1
 80055ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	02008000 	.word	0x02008000

0800561c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af02      	add	r7, sp, #8
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	4608      	mov	r0, r1
 8005626:	4611      	mov	r1, r2
 8005628:	461a      	mov	r2, r3
 800562a:	4603      	mov	r3, r0
 800562c:	817b      	strh	r3, [r7, #10]
 800562e:	460b      	mov	r3, r1
 8005630:	813b      	strh	r3, [r7, #8]
 8005632:	4613      	mov	r3, r2
 8005634:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b20      	cmp	r3, #32
 8005640:	f040 80f9 	bne.w	8005836 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <HAL_I2C_Mem_Write+0x34>
 800564a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800564c:	2b00      	cmp	r3, #0
 800564e:	d105      	bne.n	800565c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005656:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e0ed      	b.n	8005838 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005662:	2b01      	cmp	r3, #1
 8005664:	d101      	bne.n	800566a <HAL_I2C_Mem_Write+0x4e>
 8005666:	2302      	movs	r3, #2
 8005668:	e0e6      	b.n	8005838 <HAL_I2C_Mem_Write+0x21c>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005672:	f7ff f841 	bl	80046f8 <HAL_GetTick>
 8005676:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	2319      	movs	r3, #25
 800567e:	2201      	movs	r2, #1
 8005680:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 fadd 	bl	8005c44 <I2C_WaitOnFlagUntilTimeout>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e0d1      	b.n	8005838 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2221      	movs	r2, #33	; 0x21
 8005698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2240      	movs	r2, #64	; 0x40
 80056a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a3a      	ldr	r2, [r7, #32]
 80056ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80056b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056bc:	88f8      	ldrh	r0, [r7, #6]
 80056be:	893a      	ldrh	r2, [r7, #8]
 80056c0:	8979      	ldrh	r1, [r7, #10]
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	9301      	str	r3, [sp, #4]
 80056c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	4603      	mov	r3, r0
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f000 f9ed 	bl	8005aac <I2C_RequestMemoryWrite>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d005      	beq.n	80056e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e0a9      	b.n	8005838 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2bff      	cmp	r3, #255	; 0xff
 80056ec:	d90e      	bls.n	800570c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	22ff      	movs	r2, #255	; 0xff
 80056f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	8979      	ldrh	r1, [r7, #10]
 80056fc:	2300      	movs	r3, #0
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 fbbf 	bl	8005e88 <I2C_TransferConfig>
 800570a:	e00f      	b.n	800572c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005710:	b29a      	uxth	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571a:	b2da      	uxtb	r2, r3
 800571c:	8979      	ldrh	r1, [r7, #10]
 800571e:	2300      	movs	r3, #0
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 fbae 	bl	8005e88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 fac7 	bl	8005cc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e07b      	b.n	8005838 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	781a      	ldrb	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575a:	b29b      	uxth	r3, r3
 800575c:	3b01      	subs	r3, #1
 800575e:	b29a      	uxth	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005768:	3b01      	subs	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d034      	beq.n	80057e4 <HAL_I2C_Mem_Write+0x1c8>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800577e:	2b00      	cmp	r3, #0
 8005780:	d130      	bne.n	80057e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005788:	2200      	movs	r2, #0
 800578a:	2180      	movs	r1, #128	; 0x80
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 fa59 	bl	8005c44 <I2C_WaitOnFlagUntilTimeout>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e04d      	b.n	8005838 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2bff      	cmp	r3, #255	; 0xff
 80057a4:	d90e      	bls.n	80057c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	22ff      	movs	r2, #255	; 0xff
 80057aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	8979      	ldrh	r1, [r7, #10]
 80057b4:	2300      	movs	r3, #0
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 fb63 	bl	8005e88 <I2C_TransferConfig>
 80057c2:	e00f      	b.n	80057e4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	8979      	ldrh	r1, [r7, #10]
 80057d6:	2300      	movs	r3, #0
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f000 fb52 	bl	8005e88 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d19e      	bne.n	800572c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 faa6 	bl	8005d44 <I2C_WaitOnSTOPFlagUntilTimeout>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e01a      	b.n	8005838 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2220      	movs	r2, #32
 8005808:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6859      	ldr	r1, [r3, #4]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	4b0a      	ldr	r3, [pc, #40]	; (8005840 <HAL_I2C_Mem_Write+0x224>)
 8005816:	400b      	ands	r3, r1
 8005818:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2220      	movs	r2, #32
 800581e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	e000      	b.n	8005838 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005836:	2302      	movs	r3, #2
  }
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	fe00e800 	.word	0xfe00e800

08005844 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b088      	sub	sp, #32
 8005848:	af02      	add	r7, sp, #8
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	4608      	mov	r0, r1
 800584e:	4611      	mov	r1, r2
 8005850:	461a      	mov	r2, r3
 8005852:	4603      	mov	r3, r0
 8005854:	817b      	strh	r3, [r7, #10]
 8005856:	460b      	mov	r3, r1
 8005858:	813b      	strh	r3, [r7, #8]
 800585a:	4613      	mov	r3, r2
 800585c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b20      	cmp	r3, #32
 8005868:	f040 80fd 	bne.w	8005a66 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <HAL_I2C_Mem_Read+0x34>
 8005872:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005874:	2b00      	cmp	r3, #0
 8005876:	d105      	bne.n	8005884 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800587e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e0f1      	b.n	8005a68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <HAL_I2C_Mem_Read+0x4e>
 800588e:	2302      	movs	r3, #2
 8005890:	e0ea      	b.n	8005a68 <HAL_I2C_Mem_Read+0x224>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800589a:	f7fe ff2d 	bl	80046f8 <HAL_GetTick>
 800589e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	2319      	movs	r3, #25
 80058a6:	2201      	movs	r2, #1
 80058a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 f9c9 	bl	8005c44 <I2C_WaitOnFlagUntilTimeout>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e0d5      	b.n	8005a68 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2222      	movs	r2, #34	; 0x22
 80058c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2240      	movs	r2, #64	; 0x40
 80058c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6a3a      	ldr	r2, [r7, #32]
 80058d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80058dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058e4:	88f8      	ldrh	r0, [r7, #6]
 80058e6:	893a      	ldrh	r2, [r7, #8]
 80058e8:	8979      	ldrh	r1, [r7, #10]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	9301      	str	r3, [sp, #4]
 80058ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	4603      	mov	r3, r0
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 f92d 	bl	8005b54 <I2C_RequestMemoryRead>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e0ad      	b.n	8005a68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005910:	b29b      	uxth	r3, r3
 8005912:	2bff      	cmp	r3, #255	; 0xff
 8005914:	d90e      	bls.n	8005934 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	22ff      	movs	r2, #255	; 0xff
 800591a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005920:	b2da      	uxtb	r2, r3
 8005922:	8979      	ldrh	r1, [r7, #10]
 8005924:	4b52      	ldr	r3, [pc, #328]	; (8005a70 <HAL_I2C_Mem_Read+0x22c>)
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 faab 	bl	8005e88 <I2C_TransferConfig>
 8005932:	e00f      	b.n	8005954 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005938:	b29a      	uxth	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005942:	b2da      	uxtb	r2, r3
 8005944:	8979      	ldrh	r1, [r7, #10]
 8005946:	4b4a      	ldr	r3, [pc, #296]	; (8005a70 <HAL_I2C_Mem_Read+0x22c>)
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 fa9a 	bl	8005e88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	2200      	movs	r2, #0
 800595c:	2104      	movs	r1, #4
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 f970 	bl	8005c44 <I2C_WaitOnFlagUntilTimeout>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e07c      	b.n	8005a68 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	b2d2      	uxtb	r2, r2
 800597a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	1c5a      	adds	r2, r3, #1
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800598a:	3b01      	subs	r3, #1
 800598c:	b29a      	uxth	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005996:	b29b      	uxth	r3, r3
 8005998:	3b01      	subs	r3, #1
 800599a:	b29a      	uxth	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d034      	beq.n	8005a14 <HAL_I2C_Mem_Read+0x1d0>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d130      	bne.n	8005a14 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b8:	2200      	movs	r2, #0
 80059ba:	2180      	movs	r1, #128	; 0x80
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 f941 	bl	8005c44 <I2C_WaitOnFlagUntilTimeout>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d001      	beq.n	80059cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e04d      	b.n	8005a68 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2bff      	cmp	r3, #255	; 0xff
 80059d4:	d90e      	bls.n	80059f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	22ff      	movs	r2, #255	; 0xff
 80059da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	8979      	ldrh	r1, [r7, #10]
 80059e4:	2300      	movs	r3, #0
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 fa4b 	bl	8005e88 <I2C_TransferConfig>
 80059f2:	e00f      	b.n	8005a14 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	8979      	ldrh	r1, [r7, #10]
 8005a06:	2300      	movs	r3, #0
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 fa3a 	bl	8005e88 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d19a      	bne.n	8005954 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 f98e 	bl	8005d44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e01a      	b.n	8005a68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2220      	movs	r2, #32
 8005a38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6859      	ldr	r1, [r3, #4]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	4b0b      	ldr	r3, [pc, #44]	; (8005a74 <HAL_I2C_Mem_Read+0x230>)
 8005a46:	400b      	ands	r3, r1
 8005a48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	e000      	b.n	8005a68 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005a66:	2302      	movs	r3, #2
  }
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	80002400 	.word	0x80002400
 8005a74:	fe00e800 	.word	0xfe00e800

08005a78 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d005      	beq.n	8005aa4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	68f9      	ldr	r1, [r7, #12]
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	4798      	blx	r3
  }
}
 8005aa4:	bf00      	nop
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af02      	add	r7, sp, #8
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	4608      	mov	r0, r1
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	461a      	mov	r2, r3
 8005aba:	4603      	mov	r3, r0
 8005abc:	817b      	strh	r3, [r7, #10]
 8005abe:	460b      	mov	r3, r1
 8005ac0:	813b      	strh	r3, [r7, #8]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005ac6:	88fb      	ldrh	r3, [r7, #6]
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	8979      	ldrh	r1, [r7, #10]
 8005acc:	4b20      	ldr	r3, [pc, #128]	; (8005b50 <I2C_RequestMemoryWrite+0xa4>)
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 f9d7 	bl	8005e88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	69b9      	ldr	r1, [r7, #24]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 f8f0 	bl	8005cc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e02c      	b.n	8005b48 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005aee:	88fb      	ldrh	r3, [r7, #6]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d105      	bne.n	8005b00 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005af4:	893b      	ldrh	r3, [r7, #8]
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	629a      	str	r2, [r3, #40]	; 0x28
 8005afe:	e015      	b.n	8005b2c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b00:	893b      	ldrh	r3, [r7, #8]
 8005b02:	0a1b      	lsrs	r3, r3, #8
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b0e:	69fa      	ldr	r2, [r7, #28]
 8005b10:	69b9      	ldr	r1, [r7, #24]
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 f8d6 	bl	8005cc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e012      	b.n	8005b48 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b22:	893b      	ldrh	r3, [r7, #8]
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	2200      	movs	r2, #0
 8005b34:	2180      	movs	r1, #128	; 0x80
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f000 f884 	bl	8005c44 <I2C_WaitOnFlagUntilTimeout>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e000      	b.n	8005b48 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	80002000 	.word	0x80002000

08005b54 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af02      	add	r7, sp, #8
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	4608      	mov	r0, r1
 8005b5e:	4611      	mov	r1, r2
 8005b60:	461a      	mov	r2, r3
 8005b62:	4603      	mov	r3, r0
 8005b64:	817b      	strh	r3, [r7, #10]
 8005b66:	460b      	mov	r3, r1
 8005b68:	813b      	strh	r3, [r7, #8]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005b6e:	88fb      	ldrh	r3, [r7, #6]
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	8979      	ldrh	r1, [r7, #10]
 8005b74:	4b20      	ldr	r3, [pc, #128]	; (8005bf8 <I2C_RequestMemoryRead+0xa4>)
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	2300      	movs	r3, #0
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 f984 	bl	8005e88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b80:	69fa      	ldr	r2, [r7, #28]
 8005b82:	69b9      	ldr	r1, [r7, #24]
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 f89d 	bl	8005cc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e02c      	b.n	8005bee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b94:	88fb      	ldrh	r3, [r7, #6]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d105      	bne.n	8005ba6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b9a:	893b      	ldrh	r3, [r7, #8]
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	629a      	str	r2, [r3, #40]	; 0x28
 8005ba4:	e015      	b.n	8005bd2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005ba6:	893b      	ldrh	r3, [r7, #8]
 8005ba8:	0a1b      	lsrs	r3, r3, #8
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bb4:	69fa      	ldr	r2, [r7, #28]
 8005bb6:	69b9      	ldr	r1, [r7, #24]
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 f883 	bl	8005cc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e012      	b.n	8005bee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bc8:	893b      	ldrh	r3, [r7, #8]
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	2140      	movs	r1, #64	; 0x40
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 f831 	bl	8005c44 <I2C_WaitOnFlagUntilTimeout>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	80002000 	.word	0x80002000

08005bfc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d103      	bne.n	8005c1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2200      	movs	r2, #0
 8005c18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d007      	beq.n	8005c38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	699a      	ldr	r2, [r3, #24]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0201 	orr.w	r2, r2, #1
 8005c36:	619a      	str	r2, [r3, #24]
  }
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	603b      	str	r3, [r7, #0]
 8005c50:	4613      	mov	r3, r2
 8005c52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c54:	e022      	b.n	8005c9c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5c:	d01e      	beq.n	8005c9c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c5e:	f7fe fd4b 	bl	80046f8 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d302      	bcc.n	8005c74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d113      	bne.n	8005c9c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c78:	f043 0220 	orr.w	r2, r3, #32
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2220      	movs	r2, #32
 8005c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e00f      	b.n	8005cbc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699a      	ldr	r2, [r3, #24]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	bf0c      	ite	eq
 8005cac:	2301      	moveq	r3, #1
 8005cae:	2300      	movne	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	79fb      	ldrb	r3, [r7, #7]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d0cd      	beq.n	8005c56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005cd0:	e02c      	b.n	8005d2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	68b9      	ldr	r1, [r7, #8]
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 f870 	bl	8005dbc <I2C_IsAcknowledgeFailed>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e02a      	b.n	8005d3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cec:	d01e      	beq.n	8005d2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cee:	f7fe fd03 	bl	80046f8 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d302      	bcc.n	8005d04 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d113      	bne.n	8005d2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d08:	f043 0220 	orr.w	r2, r3, #32
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e007      	b.n	8005d3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d1cb      	bne.n	8005cd2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d50:	e028      	b.n	8005da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	68b9      	ldr	r1, [r7, #8]
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f000 f830 	bl	8005dbc <I2C_IsAcknowledgeFailed>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e026      	b.n	8005db4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d66:	f7fe fcc7 	bl	80046f8 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d302      	bcc.n	8005d7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d113      	bne.n	8005da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d80:	f043 0220 	orr.w	r2, r3, #32
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e007      	b.n	8005db4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	f003 0320 	and.w	r3, r3, #32
 8005dae:	2b20      	cmp	r3, #32
 8005db0:	d1cf      	bne.n	8005d52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	f003 0310 	and.w	r3, r3, #16
 8005dd2:	2b10      	cmp	r3, #16
 8005dd4:	d151      	bne.n	8005e7a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005dd6:	e022      	b.n	8005e1e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dde:	d01e      	beq.n	8005e1e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de0:	f7fe fc8a 	bl	80046f8 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d302      	bcc.n	8005df6 <I2C_IsAcknowledgeFailed+0x3a>
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d113      	bne.n	8005e1e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfa:	f043 0220 	orr.w	r2, r3, #32
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e02e      	b.n	8005e7c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	f003 0320 	and.w	r3, r3, #32
 8005e28:	2b20      	cmp	r3, #32
 8005e2a:	d1d5      	bne.n	8005dd8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2210      	movs	r2, #16
 8005e32:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f7ff fedd 	bl	8005bfc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6859      	ldr	r1, [r3, #4]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	4b0d      	ldr	r3, [pc, #52]	; (8005e84 <I2C_IsAcknowledgeFailed+0xc8>)
 8005e4e:	400b      	ands	r3, r1
 8005e50:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e56:	f043 0204 	orr.w	r2, r3, #4
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e000      	b.n	8005e7c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	fe00e800 	.word	0xfe00e800

08005e88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	607b      	str	r3, [r7, #4]
 8005e92:	460b      	mov	r3, r1
 8005e94:	817b      	strh	r3, [r7, #10]
 8005e96:	4613      	mov	r3, r2
 8005e98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	0d5b      	lsrs	r3, r3, #21
 8005ea4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005ea8:	4b0d      	ldr	r3, [pc, #52]	; (8005ee0 <I2C_TransferConfig+0x58>)
 8005eaa:	430b      	orrs	r3, r1
 8005eac:	43db      	mvns	r3, r3
 8005eae:	ea02 0103 	and.w	r1, r2, r3
 8005eb2:	897b      	ldrh	r3, [r7, #10]
 8005eb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005eb8:	7a7b      	ldrb	r3, [r7, #9]
 8005eba:	041b      	lsls	r3, r3, #16
 8005ebc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005ed2:	bf00      	nop
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	03ff63ff 	.word	0x03ff63ff

08005ee4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b20      	cmp	r3, #32
 8005ef8:	d138      	bne.n	8005f6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d101      	bne.n	8005f08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005f04:	2302      	movs	r3, #2
 8005f06:	e032      	b.n	8005f6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2224      	movs	r2, #36	; 0x24
 8005f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0201 	bic.w	r2, r2, #1
 8005f26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6819      	ldr	r1, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	430a      	orrs	r2, r1
 8005f46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f042 0201 	orr.w	r2, r2, #1
 8005f56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	e000      	b.n	8005f6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005f6c:	2302      	movs	r3, #2
  }
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b085      	sub	sp, #20
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b20      	cmp	r3, #32
 8005f8e:	d139      	bne.n	8006004 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d101      	bne.n	8005f9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	e033      	b.n	8006006 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2224      	movs	r2, #36	; 0x24
 8005faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 0201 	bic.w	r2, r2, #1
 8005fbc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005fcc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	021b      	lsls	r3, r3, #8
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f042 0201 	orr.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006000:	2300      	movs	r3, #0
 8006002:	e000      	b.n	8006006 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006004:	2302      	movs	r3, #2
  }
}
 8006006:	4618      	mov	r0, r3
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
	...

08006014 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006014:	b480      	push	{r7}
 8006016:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006018:	4b05      	ldr	r3, [pc, #20]	; (8006030 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a04      	ldr	r2, [pc, #16]	; (8006030 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800601e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006022:	6013      	str	r3, [r2, #0]
}
 8006024:	bf00      	nop
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	40007000 	.word	0x40007000

08006034 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800603a:	2300      	movs	r3, #0
 800603c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800603e:	4b23      	ldr	r3, [pc, #140]	; (80060cc <HAL_PWREx_EnableOverDrive+0x98>)
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	4a22      	ldr	r2, [pc, #136]	; (80060cc <HAL_PWREx_EnableOverDrive+0x98>)
 8006044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006048:	6413      	str	r3, [r2, #64]	; 0x40
 800604a:	4b20      	ldr	r3, [pc, #128]	; (80060cc <HAL_PWREx_EnableOverDrive+0x98>)
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006052:	603b      	str	r3, [r7, #0]
 8006054:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006056:	4b1e      	ldr	r3, [pc, #120]	; (80060d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a1d      	ldr	r2, [pc, #116]	; (80060d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800605c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006060:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006062:	f7fe fb49 	bl	80046f8 <HAL_GetTick>
 8006066:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006068:	e009      	b.n	800607e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800606a:	f7fe fb45 	bl	80046f8 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006078:	d901      	bls.n	800607e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e022      	b.n	80060c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800607e:	4b14      	ldr	r3, [pc, #80]	; (80060d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800608a:	d1ee      	bne.n	800606a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800608c:	4b10      	ldr	r3, [pc, #64]	; (80060d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a0f      	ldr	r2, [pc, #60]	; (80060d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006096:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006098:	f7fe fb2e 	bl	80046f8 <HAL_GetTick>
 800609c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800609e:	e009      	b.n	80060b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80060a0:	f7fe fb2a 	bl	80046f8 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060ae:	d901      	bls.n	80060b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e007      	b.n	80060c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80060b4:	4b06      	ldr	r3, [pc, #24]	; (80060d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060c0:	d1ee      	bne.n	80060a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	40023800 	.word	0x40023800
 80060d0:	40007000 	.word	0x40007000

080060d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80060dc:	2300      	movs	r3, #0
 80060de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e291      	b.n	800660e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f000 8087 	beq.w	8006206 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80060f8:	4b96      	ldr	r3, [pc, #600]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f003 030c 	and.w	r3, r3, #12
 8006100:	2b04      	cmp	r3, #4
 8006102:	d00c      	beq.n	800611e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006104:	4b93      	ldr	r3, [pc, #588]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f003 030c 	and.w	r3, r3, #12
 800610c:	2b08      	cmp	r3, #8
 800610e:	d112      	bne.n	8006136 <HAL_RCC_OscConfig+0x62>
 8006110:	4b90      	ldr	r3, [pc, #576]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006118:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800611c:	d10b      	bne.n	8006136 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800611e:	4b8d      	ldr	r3, [pc, #564]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d06c      	beq.n	8006204 <HAL_RCC_OscConfig+0x130>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d168      	bne.n	8006204 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e26b      	b.n	800660e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800613e:	d106      	bne.n	800614e <HAL_RCC_OscConfig+0x7a>
 8006140:	4b84      	ldr	r3, [pc, #528]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a83      	ldr	r2, [pc, #524]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 8006146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800614a:	6013      	str	r3, [r2, #0]
 800614c:	e02e      	b.n	80061ac <HAL_RCC_OscConfig+0xd8>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10c      	bne.n	8006170 <HAL_RCC_OscConfig+0x9c>
 8006156:	4b7f      	ldr	r3, [pc, #508]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a7e      	ldr	r2, [pc, #504]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 800615c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006160:	6013      	str	r3, [r2, #0]
 8006162:	4b7c      	ldr	r3, [pc, #496]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a7b      	ldr	r2, [pc, #492]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 8006168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	e01d      	b.n	80061ac <HAL_RCC_OscConfig+0xd8>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006178:	d10c      	bne.n	8006194 <HAL_RCC_OscConfig+0xc0>
 800617a:	4b76      	ldr	r3, [pc, #472]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a75      	ldr	r2, [pc, #468]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 8006180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006184:	6013      	str	r3, [r2, #0]
 8006186:	4b73      	ldr	r3, [pc, #460]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a72      	ldr	r2, [pc, #456]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 800618c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006190:	6013      	str	r3, [r2, #0]
 8006192:	e00b      	b.n	80061ac <HAL_RCC_OscConfig+0xd8>
 8006194:	4b6f      	ldr	r3, [pc, #444]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a6e      	ldr	r2, [pc, #440]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 800619a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800619e:	6013      	str	r3, [r2, #0]
 80061a0:	4b6c      	ldr	r3, [pc, #432]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a6b      	ldr	r2, [pc, #428]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 80061a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d013      	beq.n	80061dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b4:	f7fe faa0 	bl	80046f8 <HAL_GetTick>
 80061b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ba:	e008      	b.n	80061ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061bc:	f7fe fa9c 	bl	80046f8 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	2b64      	cmp	r3, #100	; 0x64
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e21f      	b.n	800660e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ce:	4b61      	ldr	r3, [pc, #388]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d0f0      	beq.n	80061bc <HAL_RCC_OscConfig+0xe8>
 80061da:	e014      	b.n	8006206 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061dc:	f7fe fa8c 	bl	80046f8 <HAL_GetTick>
 80061e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061e2:	e008      	b.n	80061f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061e4:	f7fe fa88 	bl	80046f8 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b64      	cmp	r3, #100	; 0x64
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e20b      	b.n	800660e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061f6:	4b57      	ldr	r3, [pc, #348]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1f0      	bne.n	80061e4 <HAL_RCC_OscConfig+0x110>
 8006202:	e000      	b.n	8006206 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d069      	beq.n	80062e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006212:	4b50      	ldr	r3, [pc, #320]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f003 030c 	and.w	r3, r3, #12
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00b      	beq.n	8006236 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800621e:	4b4d      	ldr	r3, [pc, #308]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 030c 	and.w	r3, r3, #12
 8006226:	2b08      	cmp	r3, #8
 8006228:	d11c      	bne.n	8006264 <HAL_RCC_OscConfig+0x190>
 800622a:	4b4a      	ldr	r3, [pc, #296]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d116      	bne.n	8006264 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006236:	4b47      	ldr	r3, [pc, #284]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d005      	beq.n	800624e <HAL_RCC_OscConfig+0x17a>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d001      	beq.n	800624e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e1df      	b.n	800660e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800624e:	4b41      	ldr	r3, [pc, #260]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	00db      	lsls	r3, r3, #3
 800625c:	493d      	ldr	r1, [pc, #244]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 800625e:	4313      	orrs	r3, r2
 8006260:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006262:	e040      	b.n	80062e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d023      	beq.n	80062b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800626c:	4b39      	ldr	r3, [pc, #228]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a38      	ldr	r2, [pc, #224]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 8006272:	f043 0301 	orr.w	r3, r3, #1
 8006276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006278:	f7fe fa3e 	bl	80046f8 <HAL_GetTick>
 800627c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800627e:	e008      	b.n	8006292 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006280:	f7fe fa3a 	bl	80046f8 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b02      	cmp	r3, #2
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e1bd      	b.n	800660e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006292:	4b30      	ldr	r3, [pc, #192]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0f0      	beq.n	8006280 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800629e:	4b2d      	ldr	r3, [pc, #180]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	4929      	ldr	r1, [pc, #164]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	600b      	str	r3, [r1, #0]
 80062b2:	e018      	b.n	80062e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062b4:	4b27      	ldr	r3, [pc, #156]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a26      	ldr	r2, [pc, #152]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 80062ba:	f023 0301 	bic.w	r3, r3, #1
 80062be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c0:	f7fe fa1a 	bl	80046f8 <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062c6:	e008      	b.n	80062da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062c8:	f7fe fa16 	bl	80046f8 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e199      	b.n	800660e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062da:	4b1e      	ldr	r3, [pc, #120]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1f0      	bne.n	80062c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0308 	and.w	r3, r3, #8
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d038      	beq.n	8006364 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d019      	beq.n	800632e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062fa:	4b16      	ldr	r3, [pc, #88]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 80062fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062fe:	4a15      	ldr	r2, [pc, #84]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 8006300:	f043 0301 	orr.w	r3, r3, #1
 8006304:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006306:	f7fe f9f7 	bl	80046f8 <HAL_GetTick>
 800630a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800630c:	e008      	b.n	8006320 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800630e:	f7fe f9f3 	bl	80046f8 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	2b02      	cmp	r3, #2
 800631a:	d901      	bls.n	8006320 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e176      	b.n	800660e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006320:	4b0c      	ldr	r3, [pc, #48]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 8006322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0f0      	beq.n	800630e <HAL_RCC_OscConfig+0x23a>
 800632c:	e01a      	b.n	8006364 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800632e:	4b09      	ldr	r3, [pc, #36]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 8006330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006332:	4a08      	ldr	r2, [pc, #32]	; (8006354 <HAL_RCC_OscConfig+0x280>)
 8006334:	f023 0301 	bic.w	r3, r3, #1
 8006338:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800633a:	f7fe f9dd 	bl	80046f8 <HAL_GetTick>
 800633e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006340:	e00a      	b.n	8006358 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006342:	f7fe f9d9 	bl	80046f8 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	2b02      	cmp	r3, #2
 800634e:	d903      	bls.n	8006358 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e15c      	b.n	800660e <HAL_RCC_OscConfig+0x53a>
 8006354:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006358:	4b91      	ldr	r3, [pc, #580]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 800635a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1ee      	bne.n	8006342 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0304 	and.w	r3, r3, #4
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 80a4 	beq.w	80064ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006372:	4b8b      	ldr	r3, [pc, #556]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10d      	bne.n	800639a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800637e:	4b88      	ldr	r3, [pc, #544]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	4a87      	ldr	r2, [pc, #540]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 8006384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006388:	6413      	str	r3, [r2, #64]	; 0x40
 800638a:	4b85      	ldr	r3, [pc, #532]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006392:	60bb      	str	r3, [r7, #8]
 8006394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006396:	2301      	movs	r3, #1
 8006398:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800639a:	4b82      	ldr	r3, [pc, #520]	; (80065a4 <HAL_RCC_OscConfig+0x4d0>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d118      	bne.n	80063d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80063a6:	4b7f      	ldr	r3, [pc, #508]	; (80065a4 <HAL_RCC_OscConfig+0x4d0>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a7e      	ldr	r2, [pc, #504]	; (80065a4 <HAL_RCC_OscConfig+0x4d0>)
 80063ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063b2:	f7fe f9a1 	bl	80046f8 <HAL_GetTick>
 80063b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063b8:	e008      	b.n	80063cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ba:	f7fe f99d 	bl	80046f8 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b64      	cmp	r3, #100	; 0x64
 80063c6:	d901      	bls.n	80063cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e120      	b.n	800660e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063cc:	4b75      	ldr	r3, [pc, #468]	; (80065a4 <HAL_RCC_OscConfig+0x4d0>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d0f0      	beq.n	80063ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d106      	bne.n	80063ee <HAL_RCC_OscConfig+0x31a>
 80063e0:	4b6f      	ldr	r3, [pc, #444]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 80063e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e4:	4a6e      	ldr	r2, [pc, #440]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 80063e6:	f043 0301 	orr.w	r3, r3, #1
 80063ea:	6713      	str	r3, [r2, #112]	; 0x70
 80063ec:	e02d      	b.n	800644a <HAL_RCC_OscConfig+0x376>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10c      	bne.n	8006410 <HAL_RCC_OscConfig+0x33c>
 80063f6:	4b6a      	ldr	r3, [pc, #424]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 80063f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fa:	4a69      	ldr	r2, [pc, #420]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 80063fc:	f023 0301 	bic.w	r3, r3, #1
 8006400:	6713      	str	r3, [r2, #112]	; 0x70
 8006402:	4b67      	ldr	r3, [pc, #412]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 8006404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006406:	4a66      	ldr	r2, [pc, #408]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 8006408:	f023 0304 	bic.w	r3, r3, #4
 800640c:	6713      	str	r3, [r2, #112]	; 0x70
 800640e:	e01c      	b.n	800644a <HAL_RCC_OscConfig+0x376>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	2b05      	cmp	r3, #5
 8006416:	d10c      	bne.n	8006432 <HAL_RCC_OscConfig+0x35e>
 8006418:	4b61      	ldr	r3, [pc, #388]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 800641a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800641c:	4a60      	ldr	r2, [pc, #384]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 800641e:	f043 0304 	orr.w	r3, r3, #4
 8006422:	6713      	str	r3, [r2, #112]	; 0x70
 8006424:	4b5e      	ldr	r3, [pc, #376]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 8006426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006428:	4a5d      	ldr	r2, [pc, #372]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 800642a:	f043 0301 	orr.w	r3, r3, #1
 800642e:	6713      	str	r3, [r2, #112]	; 0x70
 8006430:	e00b      	b.n	800644a <HAL_RCC_OscConfig+0x376>
 8006432:	4b5b      	ldr	r3, [pc, #364]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 8006434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006436:	4a5a      	ldr	r2, [pc, #360]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 8006438:	f023 0301 	bic.w	r3, r3, #1
 800643c:	6713      	str	r3, [r2, #112]	; 0x70
 800643e:	4b58      	ldr	r3, [pc, #352]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 8006440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006442:	4a57      	ldr	r2, [pc, #348]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 8006444:	f023 0304 	bic.w	r3, r3, #4
 8006448:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d015      	beq.n	800647e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006452:	f7fe f951 	bl	80046f8 <HAL_GetTick>
 8006456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006458:	e00a      	b.n	8006470 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800645a:	f7fe f94d 	bl	80046f8 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	f241 3288 	movw	r2, #5000	; 0x1388
 8006468:	4293      	cmp	r3, r2
 800646a:	d901      	bls.n	8006470 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e0ce      	b.n	800660e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006470:	4b4b      	ldr	r3, [pc, #300]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 8006472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d0ee      	beq.n	800645a <HAL_RCC_OscConfig+0x386>
 800647c:	e014      	b.n	80064a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800647e:	f7fe f93b 	bl	80046f8 <HAL_GetTick>
 8006482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006484:	e00a      	b.n	800649c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006486:	f7fe f937 	bl	80046f8 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	f241 3288 	movw	r2, #5000	; 0x1388
 8006494:	4293      	cmp	r3, r2
 8006496:	d901      	bls.n	800649c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e0b8      	b.n	800660e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800649c:	4b40      	ldr	r3, [pc, #256]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 800649e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1ee      	bne.n	8006486 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80064a8:	7dfb      	ldrb	r3, [r7, #23]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d105      	bne.n	80064ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064ae:	4b3c      	ldr	r3, [pc, #240]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	4a3b      	ldr	r2, [pc, #236]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 80064b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f000 80a4 	beq.w	800660c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064c4:	4b36      	ldr	r3, [pc, #216]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f003 030c 	and.w	r3, r3, #12
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	d06b      	beq.n	80065a8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d149      	bne.n	800656c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064d8:	4b31      	ldr	r3, [pc, #196]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a30      	ldr	r2, [pc, #192]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 80064de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e4:	f7fe f908 	bl	80046f8 <HAL_GetTick>
 80064e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064ea:	e008      	b.n	80064fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064ec:	f7fe f904 	bl	80046f8 <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d901      	bls.n	80064fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e087      	b.n	800660e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064fe:	4b28      	ldr	r3, [pc, #160]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1f0      	bne.n	80064ec <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	69da      	ldr	r2, [r3, #28]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	431a      	orrs	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006518:	019b      	lsls	r3, r3, #6
 800651a:	431a      	orrs	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006520:	085b      	lsrs	r3, r3, #1
 8006522:	3b01      	subs	r3, #1
 8006524:	041b      	lsls	r3, r3, #16
 8006526:	431a      	orrs	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652c:	061b      	lsls	r3, r3, #24
 800652e:	4313      	orrs	r3, r2
 8006530:	4a1b      	ldr	r2, [pc, #108]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 8006532:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006536:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006538:	4b19      	ldr	r3, [pc, #100]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a18      	ldr	r2, [pc, #96]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 800653e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006544:	f7fe f8d8 	bl	80046f8 <HAL_GetTick>
 8006548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800654a:	e008      	b.n	800655e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800654c:	f7fe f8d4 	bl	80046f8 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b02      	cmp	r3, #2
 8006558:	d901      	bls.n	800655e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e057      	b.n	800660e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800655e:	4b10      	ldr	r3, [pc, #64]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d0f0      	beq.n	800654c <HAL_RCC_OscConfig+0x478>
 800656a:	e04f      	b.n	800660c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800656c:	4b0c      	ldr	r3, [pc, #48]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a0b      	ldr	r2, [pc, #44]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 8006572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006578:	f7fe f8be 	bl	80046f8 <HAL_GetTick>
 800657c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800657e:	e008      	b.n	8006592 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006580:	f7fe f8ba 	bl	80046f8 <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e03d      	b.n	800660e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006592:	4b03      	ldr	r3, [pc, #12]	; (80065a0 <HAL_RCC_OscConfig+0x4cc>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1f0      	bne.n	8006580 <HAL_RCC_OscConfig+0x4ac>
 800659e:	e035      	b.n	800660c <HAL_RCC_OscConfig+0x538>
 80065a0:	40023800 	.word	0x40023800
 80065a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80065a8:	4b1b      	ldr	r3, [pc, #108]	; (8006618 <HAL_RCC_OscConfig+0x544>)
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d028      	beq.n	8006608 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d121      	bne.n	8006608 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d11a      	bne.n	8006608 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80065d8:	4013      	ands	r3, r2
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80065de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d111      	bne.n	8006608 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ee:	085b      	lsrs	r3, r3, #1
 80065f0:	3b01      	subs	r3, #1
 80065f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d107      	bne.n	8006608 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006602:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006604:	429a      	cmp	r2, r3
 8006606:	d001      	beq.n	800660c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e000      	b.n	800660e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	40023800 	.word	0x40023800

0800661c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006626:	2300      	movs	r3, #0
 8006628:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d101      	bne.n	8006634 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e0d0      	b.n	80067d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006634:	4b6a      	ldr	r3, [pc, #424]	; (80067e0 <HAL_RCC_ClockConfig+0x1c4>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 030f 	and.w	r3, r3, #15
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	429a      	cmp	r2, r3
 8006640:	d910      	bls.n	8006664 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006642:	4b67      	ldr	r3, [pc, #412]	; (80067e0 <HAL_RCC_ClockConfig+0x1c4>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f023 020f 	bic.w	r2, r3, #15
 800664a:	4965      	ldr	r1, [pc, #404]	; (80067e0 <HAL_RCC_ClockConfig+0x1c4>)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	4313      	orrs	r3, r2
 8006650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006652:	4b63      	ldr	r3, [pc, #396]	; (80067e0 <HAL_RCC_ClockConfig+0x1c4>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 030f 	and.w	r3, r3, #15
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	429a      	cmp	r2, r3
 800665e:	d001      	beq.n	8006664 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e0b8      	b.n	80067d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b00      	cmp	r3, #0
 800666e:	d020      	beq.n	80066b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b00      	cmp	r3, #0
 800667a:	d005      	beq.n	8006688 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800667c:	4b59      	ldr	r3, [pc, #356]	; (80067e4 <HAL_RCC_ClockConfig+0x1c8>)
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	4a58      	ldr	r2, [pc, #352]	; (80067e4 <HAL_RCC_ClockConfig+0x1c8>)
 8006682:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006686:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0308 	and.w	r3, r3, #8
 8006690:	2b00      	cmp	r3, #0
 8006692:	d005      	beq.n	80066a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006694:	4b53      	ldr	r3, [pc, #332]	; (80067e4 <HAL_RCC_ClockConfig+0x1c8>)
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	4a52      	ldr	r2, [pc, #328]	; (80067e4 <HAL_RCC_ClockConfig+0x1c8>)
 800669a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800669e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066a0:	4b50      	ldr	r3, [pc, #320]	; (80067e4 <HAL_RCC_ClockConfig+0x1c8>)
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	494d      	ldr	r1, [pc, #308]	; (80067e4 <HAL_RCC_ClockConfig+0x1c8>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0301 	and.w	r3, r3, #1
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d040      	beq.n	8006740 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d107      	bne.n	80066d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066c6:	4b47      	ldr	r3, [pc, #284]	; (80067e4 <HAL_RCC_ClockConfig+0x1c8>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d115      	bne.n	80066fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e07f      	b.n	80067d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d107      	bne.n	80066ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066de:	4b41      	ldr	r3, [pc, #260]	; (80067e4 <HAL_RCC_ClockConfig+0x1c8>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d109      	bne.n	80066fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e073      	b.n	80067d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066ee:	4b3d      	ldr	r3, [pc, #244]	; (80067e4 <HAL_RCC_ClockConfig+0x1c8>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e06b      	b.n	80067d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066fe:	4b39      	ldr	r3, [pc, #228]	; (80067e4 <HAL_RCC_ClockConfig+0x1c8>)
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f023 0203 	bic.w	r2, r3, #3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	4936      	ldr	r1, [pc, #216]	; (80067e4 <HAL_RCC_ClockConfig+0x1c8>)
 800670c:	4313      	orrs	r3, r2
 800670e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006710:	f7fd fff2 	bl	80046f8 <HAL_GetTick>
 8006714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006716:	e00a      	b.n	800672e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006718:	f7fd ffee 	bl	80046f8 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	f241 3288 	movw	r2, #5000	; 0x1388
 8006726:	4293      	cmp	r3, r2
 8006728:	d901      	bls.n	800672e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e053      	b.n	80067d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800672e:	4b2d      	ldr	r3, [pc, #180]	; (80067e4 <HAL_RCC_ClockConfig+0x1c8>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f003 020c 	and.w	r2, r3, #12
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	429a      	cmp	r2, r3
 800673e:	d1eb      	bne.n	8006718 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006740:	4b27      	ldr	r3, [pc, #156]	; (80067e0 <HAL_RCC_ClockConfig+0x1c4>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 030f 	and.w	r3, r3, #15
 8006748:	683a      	ldr	r2, [r7, #0]
 800674a:	429a      	cmp	r2, r3
 800674c:	d210      	bcs.n	8006770 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800674e:	4b24      	ldr	r3, [pc, #144]	; (80067e0 <HAL_RCC_ClockConfig+0x1c4>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f023 020f 	bic.w	r2, r3, #15
 8006756:	4922      	ldr	r1, [pc, #136]	; (80067e0 <HAL_RCC_ClockConfig+0x1c4>)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	4313      	orrs	r3, r2
 800675c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800675e:	4b20      	ldr	r3, [pc, #128]	; (80067e0 <HAL_RCC_ClockConfig+0x1c4>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 030f 	and.w	r3, r3, #15
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	429a      	cmp	r2, r3
 800676a:	d001      	beq.n	8006770 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e032      	b.n	80067d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0304 	and.w	r3, r3, #4
 8006778:	2b00      	cmp	r3, #0
 800677a:	d008      	beq.n	800678e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800677c:	4b19      	ldr	r3, [pc, #100]	; (80067e4 <HAL_RCC_ClockConfig+0x1c8>)
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	4916      	ldr	r1, [pc, #88]	; (80067e4 <HAL_RCC_ClockConfig+0x1c8>)
 800678a:	4313      	orrs	r3, r2
 800678c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0308 	and.w	r3, r3, #8
 8006796:	2b00      	cmp	r3, #0
 8006798:	d009      	beq.n	80067ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800679a:	4b12      	ldr	r3, [pc, #72]	; (80067e4 <HAL_RCC_ClockConfig+0x1c8>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	00db      	lsls	r3, r3, #3
 80067a8:	490e      	ldr	r1, [pc, #56]	; (80067e4 <HAL_RCC_ClockConfig+0x1c8>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80067ae:	f000 f821 	bl	80067f4 <HAL_RCC_GetSysClockFreq>
 80067b2:	4602      	mov	r2, r0
 80067b4:	4b0b      	ldr	r3, [pc, #44]	; (80067e4 <HAL_RCC_ClockConfig+0x1c8>)
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	091b      	lsrs	r3, r3, #4
 80067ba:	f003 030f 	and.w	r3, r3, #15
 80067be:	490a      	ldr	r1, [pc, #40]	; (80067e8 <HAL_RCC_ClockConfig+0x1cc>)
 80067c0:	5ccb      	ldrb	r3, [r1, r3]
 80067c2:	fa22 f303 	lsr.w	r3, r2, r3
 80067c6:	4a09      	ldr	r2, [pc, #36]	; (80067ec <HAL_RCC_ClockConfig+0x1d0>)
 80067c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80067ca:	4b09      	ldr	r3, [pc, #36]	; (80067f0 <HAL_RCC_ClockConfig+0x1d4>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fd ff4e 	bl	8004670 <HAL_InitTick>

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	40023c00 	.word	0x40023c00
 80067e4:	40023800 	.word	0x40023800
 80067e8:	08010e94 	.word	0x08010e94
 80067ec:	20000040 	.word	0x20000040
 80067f0:	20000044 	.word	0x20000044

080067f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067f4:	b5b0      	push	{r4, r5, r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80067fa:	2100      	movs	r1, #0
 80067fc:	6079      	str	r1, [r7, #4]
 80067fe:	2100      	movs	r1, #0
 8006800:	60f9      	str	r1, [r7, #12]
 8006802:	2100      	movs	r1, #0
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006806:	2100      	movs	r1, #0
 8006808:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800680a:	4952      	ldr	r1, [pc, #328]	; (8006954 <HAL_RCC_GetSysClockFreq+0x160>)
 800680c:	6889      	ldr	r1, [r1, #8]
 800680e:	f001 010c 	and.w	r1, r1, #12
 8006812:	2908      	cmp	r1, #8
 8006814:	d00d      	beq.n	8006832 <HAL_RCC_GetSysClockFreq+0x3e>
 8006816:	2908      	cmp	r1, #8
 8006818:	f200 8094 	bhi.w	8006944 <HAL_RCC_GetSysClockFreq+0x150>
 800681c:	2900      	cmp	r1, #0
 800681e:	d002      	beq.n	8006826 <HAL_RCC_GetSysClockFreq+0x32>
 8006820:	2904      	cmp	r1, #4
 8006822:	d003      	beq.n	800682c <HAL_RCC_GetSysClockFreq+0x38>
 8006824:	e08e      	b.n	8006944 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006826:	4b4c      	ldr	r3, [pc, #304]	; (8006958 <HAL_RCC_GetSysClockFreq+0x164>)
 8006828:	60bb      	str	r3, [r7, #8]
      break;
 800682a:	e08e      	b.n	800694a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800682c:	4b4b      	ldr	r3, [pc, #300]	; (800695c <HAL_RCC_GetSysClockFreq+0x168>)
 800682e:	60bb      	str	r3, [r7, #8]
      break;
 8006830:	e08b      	b.n	800694a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006832:	4948      	ldr	r1, [pc, #288]	; (8006954 <HAL_RCC_GetSysClockFreq+0x160>)
 8006834:	6849      	ldr	r1, [r1, #4]
 8006836:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800683a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800683c:	4945      	ldr	r1, [pc, #276]	; (8006954 <HAL_RCC_GetSysClockFreq+0x160>)
 800683e:	6849      	ldr	r1, [r1, #4]
 8006840:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006844:	2900      	cmp	r1, #0
 8006846:	d024      	beq.n	8006892 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006848:	4942      	ldr	r1, [pc, #264]	; (8006954 <HAL_RCC_GetSysClockFreq+0x160>)
 800684a:	6849      	ldr	r1, [r1, #4]
 800684c:	0989      	lsrs	r1, r1, #6
 800684e:	4608      	mov	r0, r1
 8006850:	f04f 0100 	mov.w	r1, #0
 8006854:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006858:	f04f 0500 	mov.w	r5, #0
 800685c:	ea00 0204 	and.w	r2, r0, r4
 8006860:	ea01 0305 	and.w	r3, r1, r5
 8006864:	493d      	ldr	r1, [pc, #244]	; (800695c <HAL_RCC_GetSysClockFreq+0x168>)
 8006866:	fb01 f003 	mul.w	r0, r1, r3
 800686a:	2100      	movs	r1, #0
 800686c:	fb01 f102 	mul.w	r1, r1, r2
 8006870:	1844      	adds	r4, r0, r1
 8006872:	493a      	ldr	r1, [pc, #232]	; (800695c <HAL_RCC_GetSysClockFreq+0x168>)
 8006874:	fba2 0101 	umull	r0, r1, r2, r1
 8006878:	1863      	adds	r3, r4, r1
 800687a:	4619      	mov	r1, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	461a      	mov	r2, r3
 8006880:	f04f 0300 	mov.w	r3, #0
 8006884:	f7fa fa08 	bl	8000c98 <__aeabi_uldivmod>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	4613      	mov	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	e04a      	b.n	8006928 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006892:	4b30      	ldr	r3, [pc, #192]	; (8006954 <HAL_RCC_GetSysClockFreq+0x160>)
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	099b      	lsrs	r3, r3, #6
 8006898:	461a      	mov	r2, r3
 800689a:	f04f 0300 	mov.w	r3, #0
 800689e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80068a2:	f04f 0100 	mov.w	r1, #0
 80068a6:	ea02 0400 	and.w	r4, r2, r0
 80068aa:	ea03 0501 	and.w	r5, r3, r1
 80068ae:	4620      	mov	r0, r4
 80068b0:	4629      	mov	r1, r5
 80068b2:	f04f 0200 	mov.w	r2, #0
 80068b6:	f04f 0300 	mov.w	r3, #0
 80068ba:	014b      	lsls	r3, r1, #5
 80068bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80068c0:	0142      	lsls	r2, r0, #5
 80068c2:	4610      	mov	r0, r2
 80068c4:	4619      	mov	r1, r3
 80068c6:	1b00      	subs	r0, r0, r4
 80068c8:	eb61 0105 	sbc.w	r1, r1, r5
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	f04f 0300 	mov.w	r3, #0
 80068d4:	018b      	lsls	r3, r1, #6
 80068d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80068da:	0182      	lsls	r2, r0, #6
 80068dc:	1a12      	subs	r2, r2, r0
 80068de:	eb63 0301 	sbc.w	r3, r3, r1
 80068e2:	f04f 0000 	mov.w	r0, #0
 80068e6:	f04f 0100 	mov.w	r1, #0
 80068ea:	00d9      	lsls	r1, r3, #3
 80068ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068f0:	00d0      	lsls	r0, r2, #3
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	1912      	adds	r2, r2, r4
 80068f8:	eb45 0303 	adc.w	r3, r5, r3
 80068fc:	f04f 0000 	mov.w	r0, #0
 8006900:	f04f 0100 	mov.w	r1, #0
 8006904:	0299      	lsls	r1, r3, #10
 8006906:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800690a:	0290      	lsls	r0, r2, #10
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4610      	mov	r0, r2
 8006912:	4619      	mov	r1, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	461a      	mov	r2, r3
 8006918:	f04f 0300 	mov.w	r3, #0
 800691c:	f7fa f9bc 	bl	8000c98 <__aeabi_uldivmod>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	4613      	mov	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006928:	4b0a      	ldr	r3, [pc, #40]	; (8006954 <HAL_RCC_GetSysClockFreq+0x160>)
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	0c1b      	lsrs	r3, r3, #16
 800692e:	f003 0303 	and.w	r3, r3, #3
 8006932:	3301      	adds	r3, #1
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006940:	60bb      	str	r3, [r7, #8]
      break;
 8006942:	e002      	b.n	800694a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006944:	4b04      	ldr	r3, [pc, #16]	; (8006958 <HAL_RCC_GetSysClockFreq+0x164>)
 8006946:	60bb      	str	r3, [r7, #8]
      break;
 8006948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800694a:	68bb      	ldr	r3, [r7, #8]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bdb0      	pop	{r4, r5, r7, pc}
 8006954:	40023800 	.word	0x40023800
 8006958:	00f42400 	.word	0x00f42400
 800695c:	017d7840 	.word	0x017d7840

08006960 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006960:	b480      	push	{r7}
 8006962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006964:	4b03      	ldr	r3, [pc, #12]	; (8006974 <HAL_RCC_GetHCLKFreq+0x14>)
 8006966:	681b      	ldr	r3, [r3, #0]
}
 8006968:	4618      	mov	r0, r3
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	20000040 	.word	0x20000040

08006978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800697c:	f7ff fff0 	bl	8006960 <HAL_RCC_GetHCLKFreq>
 8006980:	4602      	mov	r2, r0
 8006982:	4b05      	ldr	r3, [pc, #20]	; (8006998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	0a9b      	lsrs	r3, r3, #10
 8006988:	f003 0307 	and.w	r3, r3, #7
 800698c:	4903      	ldr	r1, [pc, #12]	; (800699c <HAL_RCC_GetPCLK1Freq+0x24>)
 800698e:	5ccb      	ldrb	r3, [r1, r3]
 8006990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006994:	4618      	mov	r0, r3
 8006996:	bd80      	pop	{r7, pc}
 8006998:	40023800 	.word	0x40023800
 800699c:	08010ea4 	.word	0x08010ea4

080069a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80069a4:	f7ff ffdc 	bl	8006960 <HAL_RCC_GetHCLKFreq>
 80069a8:	4602      	mov	r2, r0
 80069aa:	4b05      	ldr	r3, [pc, #20]	; (80069c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	0b5b      	lsrs	r3, r3, #13
 80069b0:	f003 0307 	and.w	r3, r3, #7
 80069b4:	4903      	ldr	r1, [pc, #12]	; (80069c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069b6:	5ccb      	ldrb	r3, [r1, r3]
 80069b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069bc:	4618      	mov	r0, r3
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	40023800 	.word	0x40023800
 80069c4:	08010ea4 	.word	0x08010ea4

080069c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80069d0:	2300      	movs	r3, #0
 80069d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80069d4:	2300      	movs	r3, #0
 80069d6:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80069d8:	2300      	movs	r3, #0
 80069da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80069dc:	2300      	movs	r3, #0
 80069de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d012      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80069ec:	4b65      	ldr	r3, [pc, #404]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	4a64      	ldr	r2, [pc, #400]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80069f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80069f6:	6093      	str	r3, [r2, #8]
 80069f8:	4b62      	ldr	r3, [pc, #392]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a00:	4960      	ldr	r1, [pc, #384]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d017      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a1e:	4b59      	ldr	r3, [pc, #356]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a2c:	4955      	ldr	r1, [pc, #340]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a3c:	d101      	bne.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d017      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006a5a:	4b4a      	ldr	r3, [pc, #296]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a68:	4946      	ldr	r1, [pc, #280]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a78:	d101      	bne.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8006a86:	2301      	movs	r3, #1
 8006a88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0320 	and.w	r3, r3, #32
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 808b 	beq.w	8006bae <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a98:	4b3a      	ldr	r3, [pc, #232]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9c:	4a39      	ldr	r2, [pc, #228]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8006aa4:	4b37      	ldr	r3, [pc, #220]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aac:	60fb      	str	r3, [r7, #12]
 8006aae:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ab0:	4b35      	ldr	r3, [pc, #212]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a34      	ldr	r2, [pc, #208]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006abc:	f7fd fe1c 	bl	80046f8 <HAL_GetTick>
 8006ac0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ac2:	e008      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ac4:	f7fd fe18 	bl	80046f8 <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	2b64      	cmp	r3, #100	; 0x64
 8006ad0:	d901      	bls.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e2bc      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ad6:	4b2c      	ldr	r3, [pc, #176]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d0f0      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ae2:	4b28      	ldr	r3, [pc, #160]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d035      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d02e      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b00:	4b20      	ldr	r3, [pc, #128]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b08:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b0a:	4b1e      	ldr	r3, [pc, #120]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0e:	4a1d      	ldr	r2, [pc, #116]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b14:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b16:	4b1b      	ldr	r3, [pc, #108]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b1a:	4a1a      	ldr	r2, [pc, #104]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006b22:	4a18      	ldr	r2, [pc, #96]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b28:	4b16      	ldr	r3, [pc, #88]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d114      	bne.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b34:	f7fd fde0 	bl	80046f8 <HAL_GetTick>
 8006b38:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b3a:	e00a      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b3c:	f7fd fddc 	bl	80046f8 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e27e      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b52:	4b0c      	ldr	r3, [pc, #48]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d0ee      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b6a:	d111      	bne.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8006b6c:	4b05      	ldr	r3, [pc, #20]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006b78:	4b04      	ldr	r3, [pc, #16]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006b7a:	400b      	ands	r3, r1
 8006b7c:	4901      	ldr	r1, [pc, #4]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	608b      	str	r3, [r1, #8]
 8006b82:	e00b      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006b84:	40023800 	.word	0x40023800
 8006b88:	40007000 	.word	0x40007000
 8006b8c:	0ffffcff 	.word	0x0ffffcff
 8006b90:	4ba4      	ldr	r3, [pc, #656]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	4aa3      	ldr	r2, [pc, #652]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006b96:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006b9a:	6093      	str	r3, [r2, #8]
 8006b9c:	4ba1      	ldr	r3, [pc, #644]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006b9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ba8:	499e      	ldr	r1, [pc, #632]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0310 	and.w	r3, r3, #16
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d010      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bba:	4b9a      	ldr	r3, [pc, #616]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bc0:	4a98      	ldr	r2, [pc, #608]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bc6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006bca:	4b96      	ldr	r3, [pc, #600]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006bcc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd4:	4993      	ldr	r1, [pc, #588]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00a      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006be8:	4b8e      	ldr	r3, [pc, #568]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf6:	498b      	ldr	r1, [pc, #556]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c0a:	4b86      	ldr	r3, [pc, #536]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c18:	4982      	ldr	r1, [pc, #520]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c2c:	4b7d      	ldr	r3, [pc, #500]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c3a:	497a      	ldr	r1, [pc, #488]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00a      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c4e:	4b75      	ldr	r3, [pc, #468]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c54:	f023 0203 	bic.w	r2, r3, #3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5c:	4971      	ldr	r1, [pc, #452]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00a      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c70:	4b6c      	ldr	r3, [pc, #432]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c76:	f023 020c 	bic.w	r2, r3, #12
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	4969      	ldr	r1, [pc, #420]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00a      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c92:	4b64      	ldr	r3, [pc, #400]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca0:	4960      	ldr	r1, [pc, #384]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00a      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006cb4:	4b5b      	ldr	r3, [pc, #364]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cc2:	4958      	ldr	r1, [pc, #352]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00a      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006cd6:	4b53      	ldr	r3, [pc, #332]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ce4:	494f      	ldr	r1, [pc, #316]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00a      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006cf8:	4b4a      	ldr	r3, [pc, #296]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cfe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d06:	4947      	ldr	r1, [pc, #284]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00a      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006d1a:	4b42      	ldr	r3, [pc, #264]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d28:	493e      	ldr	r1, [pc, #248]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00a      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006d3c:	4b39      	ldr	r3, [pc, #228]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d4a:	4936      	ldr	r1, [pc, #216]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d011      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006d5e:	4b31      	ldr	r3, [pc, #196]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d64:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d6c:	492d      	ldr	r1, [pc, #180]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d7c:	d101      	bne.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d8e:	4b25      	ldr	r3, [pc, #148]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d94:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d9c:	4921      	ldr	r1, [pc, #132]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00a      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006db0:	4b1c      	ldr	r3, [pc, #112]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dbe:	4919      	ldr	r1, [pc, #100]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00a      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006dd2:	4b14      	ldr	r3, [pc, #80]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006de0:	4910      	ldr	r1, [pc, #64]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d006      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 809d 	beq.w	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006dfc:	4b09      	ldr	r3, [pc, #36]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a08      	ldr	r2, [pc, #32]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006e02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e08:	f7fd fc76 	bl	80046f8 <HAL_GetTick>
 8006e0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e0e:	e00b      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e10:	f7fd fc72 	bl	80046f8 <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	2b64      	cmp	r3, #100	; 0x64
 8006e1c:	d904      	bls.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e116      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8006e22:	bf00      	nop
 8006e24:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e28:	4b8b      	ldr	r3, [pc, #556]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1ed      	bne.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d017      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d113      	bne.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006e48:	4b83      	ldr	r3, [pc, #524]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e4e:	0e1b      	lsrs	r3, r3, #24
 8006e50:	f003 030f 	and.w	r3, r3, #15
 8006e54:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	019a      	lsls	r2, r3, #6
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	061b      	lsls	r3, r3, #24
 8006e60:	431a      	orrs	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	071b      	lsls	r3, r3, #28
 8006e68:	497b      	ldr	r1, [pc, #492]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d004      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e84:	d00a      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d024      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e9a:	d11f      	bne.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006e9c:	4b6e      	ldr	r3, [pc, #440]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ea2:	0f1b      	lsrs	r3, r3, #28
 8006ea4:	f003 0307 	and.w	r3, r3, #7
 8006ea8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	019a      	lsls	r2, r3, #6
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	061b      	lsls	r3, r3, #24
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	071b      	lsls	r3, r3, #28
 8006ebc:	4966      	ldr	r1, [pc, #408]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006ec4:	4b64      	ldr	r3, [pc, #400]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eca:	f023 021f 	bic.w	r2, r3, #31
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	4960      	ldr	r1, [pc, #384]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00d      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	019a      	lsls	r2, r3, #6
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	061b      	lsls	r3, r3, #24
 8006ef4:	431a      	orrs	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	071b      	lsls	r3, r3, #28
 8006efc:	4956      	ldr	r1, [pc, #344]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006f04:	4b54      	ldr	r3, [pc, #336]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a53      	ldr	r2, [pc, #332]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006f0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f10:	f7fd fbf2 	bl	80046f8 <HAL_GetTick>
 8006f14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f16:	e008      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f18:	f7fd fbee 	bl	80046f8 <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	2b64      	cmp	r3, #100	; 0x64
 8006f24:	d901      	bls.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e092      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f2a:	4b4b      	ldr	r3, [pc, #300]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d0f0      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	f040 8088 	bne.w	800704e <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006f3e:	4b46      	ldr	r3, [pc, #280]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a45      	ldr	r2, [pc, #276]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f4a:	f7fd fbd5 	bl	80046f8 <HAL_GetTick>
 8006f4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006f50:	e008      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006f52:	f7fd fbd1 	bl	80046f8 <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	2b64      	cmp	r3, #100	; 0x64
 8006f5e:	d901      	bls.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e075      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006f64:	4b3c      	ldr	r3, [pc, #240]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f70:	d0ef      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d003      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d009      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d024      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d120      	bne.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006f9a:	4b2f      	ldr	r3, [pc, #188]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fa0:	0c1b      	lsrs	r3, r3, #16
 8006fa2:	f003 0303 	and.w	r3, r3, #3
 8006fa6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	019a      	lsls	r2, r3, #6
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	041b      	lsls	r3, r3, #16
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	695b      	ldr	r3, [r3, #20]
 8006fb8:	061b      	lsls	r3, r3, #24
 8006fba:	4927      	ldr	r1, [pc, #156]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006fc2:	4b25      	ldr	r3, [pc, #148]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fc8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a1b      	ldr	r3, [r3, #32]
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	021b      	lsls	r3, r3, #8
 8006fd4:	4920      	ldr	r1, [pc, #128]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d018      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x652>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ff0:	d113      	bne.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006ff2:	4b19      	ldr	r3, [pc, #100]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff8:	0e1b      	lsrs	r3, r3, #24
 8006ffa:	f003 030f 	and.w	r3, r3, #15
 8006ffe:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	019a      	lsls	r2, r3, #6
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	041b      	lsls	r3, r3, #16
 800700c:	431a      	orrs	r2, r3
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	061b      	lsls	r3, r3, #24
 8007012:	4911      	ldr	r1, [pc, #68]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007014:	4313      	orrs	r3, r2
 8007016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800701a:	4b0f      	ldr	r3, [pc, #60]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a0e      	ldr	r2, [pc, #56]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007024:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007026:	f7fd fb67 	bl	80046f8 <HAL_GetTick>
 800702a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800702c:	e008      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800702e:	f7fd fb63 	bl	80046f8 <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	2b64      	cmp	r3, #100	; 0x64
 800703a:	d901      	bls.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e007      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007040:	4b05      	ldr	r3, [pc, #20]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800704c:	d1ef      	bne.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3720      	adds	r7, #32
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	40023800 	.word	0x40023800

0800705c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e09d      	b.n	80071aa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	2b00      	cmp	r3, #0
 8007074:	d108      	bne.n	8007088 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800707e:	d009      	beq.n	8007094 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	61da      	str	r2, [r3, #28]
 8007086:	e005      	b.n	8007094 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d106      	bne.n	80070b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7fc fd66 	bl	8003b80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070d4:	d902      	bls.n	80070dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80070d6:	2300      	movs	r3, #0
 80070d8:	60fb      	str	r3, [r7, #12]
 80070da:	e002      	b.n	80070e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80070dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80070ea:	d007      	beq.n	80070fc <HAL_SPI_Init+0xa0>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070f4:	d002      	beq.n	80070fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800710c:	431a      	orrs	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	431a      	orrs	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	431a      	orrs	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800712a:	431a      	orrs	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	69db      	ldr	r3, [r3, #28]
 8007130:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007134:	431a      	orrs	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800713e:	ea42 0103 	orr.w	r1, r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007146:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	0c1b      	lsrs	r3, r3, #16
 8007158:	f003 0204 	and.w	r2, r3, #4
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007160:	f003 0310 	and.w	r3, r3, #16
 8007164:	431a      	orrs	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716a:	f003 0308 	and.w	r3, r3, #8
 800716e:	431a      	orrs	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007178:	ea42 0103 	orr.w	r1, r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	69da      	ldr	r2, [r3, #28]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007198:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b088      	sub	sp, #32
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	60f8      	str	r0, [r7, #12]
 80071ba:	60b9      	str	r1, [r7, #8]
 80071bc:	603b      	str	r3, [r7, #0]
 80071be:	4613      	mov	r3, r2
 80071c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d101      	bne.n	80071d4 <HAL_SPI_Transmit+0x22>
 80071d0:	2302      	movs	r3, #2
 80071d2:	e158      	b.n	8007486 <HAL_SPI_Transmit+0x2d4>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071dc:	f7fd fa8c 	bl	80046f8 <HAL_GetTick>
 80071e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80071e2:	88fb      	ldrh	r3, [r7, #6]
 80071e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d002      	beq.n	80071f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80071f2:	2302      	movs	r3, #2
 80071f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80071f6:	e13d      	b.n	8007474 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d002      	beq.n	8007204 <HAL_SPI_Transmit+0x52>
 80071fe:	88fb      	ldrh	r3, [r7, #6]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d102      	bne.n	800720a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007208:	e134      	b.n	8007474 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2203      	movs	r2, #3
 800720e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	88fa      	ldrh	r2, [r7, #6]
 8007222:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	88fa      	ldrh	r2, [r7, #6]
 8007228:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007254:	d10f      	bne.n	8007276 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007264:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007274:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007280:	2b40      	cmp	r3, #64	; 0x40
 8007282:	d007      	beq.n	8007294 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007292:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800729c:	d94b      	bls.n	8007336 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d002      	beq.n	80072ac <HAL_SPI_Transmit+0xfa>
 80072a6:	8afb      	ldrh	r3, [r7, #22]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d13e      	bne.n	800732a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b0:	881a      	ldrh	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072bc:	1c9a      	adds	r2, r3, #2
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	3b01      	subs	r3, #1
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80072d0:	e02b      	b.n	800732a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f003 0302 	and.w	r3, r3, #2
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d112      	bne.n	8007306 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e4:	881a      	ldrh	r2, [r3, #0]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f0:	1c9a      	adds	r2, r3, #2
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	3b01      	subs	r3, #1
 80072fe:	b29a      	uxth	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007304:	e011      	b.n	800732a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007306:	f7fd f9f7 	bl	80046f8 <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	429a      	cmp	r2, r3
 8007314:	d803      	bhi.n	800731e <HAL_SPI_Transmit+0x16c>
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731c:	d102      	bne.n	8007324 <HAL_SPI_Transmit+0x172>
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d102      	bne.n	800732a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007328:	e0a4      	b.n	8007474 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800732e:	b29b      	uxth	r3, r3
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1ce      	bne.n	80072d2 <HAL_SPI_Transmit+0x120>
 8007334:	e07c      	b.n	8007430 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <HAL_SPI_Transmit+0x192>
 800733e:	8afb      	ldrh	r3, [r7, #22]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d170      	bne.n	8007426 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007348:	b29b      	uxth	r3, r3
 800734a:	2b01      	cmp	r3, #1
 800734c:	d912      	bls.n	8007374 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007352:	881a      	ldrh	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735e:	1c9a      	adds	r2, r3, #2
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007368:	b29b      	uxth	r3, r3
 800736a:	3b02      	subs	r3, #2
 800736c:	b29a      	uxth	r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007372:	e058      	b.n	8007426 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	330c      	adds	r3, #12
 800737e:	7812      	ldrb	r2, [r2, #0]
 8007380:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007386:	1c5a      	adds	r2, r3, #1
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007390:	b29b      	uxth	r3, r3
 8007392:	3b01      	subs	r3, #1
 8007394:	b29a      	uxth	r2, r3
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800739a:	e044      	b.n	8007426 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f003 0302 	and.w	r3, r3, #2
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d12b      	bne.n	8007402 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d912      	bls.n	80073da <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b8:	881a      	ldrh	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c4:	1c9a      	adds	r2, r3, #2
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	3b02      	subs	r3, #2
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073d8:	e025      	b.n	8007426 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	330c      	adds	r3, #12
 80073e4:	7812      	ldrb	r2, [r2, #0]
 80073e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ec:	1c5a      	adds	r2, r3, #1
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	3b01      	subs	r3, #1
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007400:	e011      	b.n	8007426 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007402:	f7fd f979 	bl	80046f8 <HAL_GetTick>
 8007406:	4602      	mov	r2, r0
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	683a      	ldr	r2, [r7, #0]
 800740e:	429a      	cmp	r2, r3
 8007410:	d803      	bhi.n	800741a <HAL_SPI_Transmit+0x268>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007418:	d102      	bne.n	8007420 <HAL_SPI_Transmit+0x26e>
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d102      	bne.n	8007426 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007424:	e026      	b.n	8007474 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800742a:	b29b      	uxth	r3, r3
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1b5      	bne.n	800739c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007430:	69ba      	ldr	r2, [r7, #24]
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f000 fb57 	bl	8007ae8 <SPI_EndRxTxTransaction>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d002      	beq.n	8007446 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2220      	movs	r2, #32
 8007444:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10a      	bne.n	8007464 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800744e:	2300      	movs	r3, #0
 8007450:	613b      	str	r3, [r7, #16]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	613b      	str	r3, [r7, #16]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	613b      	str	r3, [r7, #16]
 8007462:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007468:	2b00      	cmp	r3, #0
 800746a:	d002      	beq.n	8007472 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	77fb      	strb	r3, [r7, #31]
 8007470:	e000      	b.n	8007474 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007472:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007484:	7ffb      	ldrb	r3, [r7, #31]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3720      	adds	r7, #32
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b08a      	sub	sp, #40	; 0x28
 8007492:	af00      	add	r7, sp, #0
 8007494:	60f8      	str	r0, [r7, #12]
 8007496:	60b9      	str	r1, [r7, #8]
 8007498:	607a      	str	r2, [r7, #4]
 800749a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800749c:	2301      	movs	r3, #1
 800749e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d101      	bne.n	80074b4 <HAL_SPI_TransmitReceive+0x26>
 80074b0:	2302      	movs	r3, #2
 80074b2:	e1fb      	b.n	80078ac <HAL_SPI_TransmitReceive+0x41e>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074bc:	f7fd f91c 	bl	80046f8 <HAL_GetTick>
 80074c0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074c8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80074d0:	887b      	ldrh	r3, [r7, #2]
 80074d2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80074d4:	887b      	ldrh	r3, [r7, #2]
 80074d6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074d8:	7efb      	ldrb	r3, [r7, #27]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d00e      	beq.n	80074fc <HAL_SPI_TransmitReceive+0x6e>
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074e4:	d106      	bne.n	80074f4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d102      	bne.n	80074f4 <HAL_SPI_TransmitReceive+0x66>
 80074ee:	7efb      	ldrb	r3, [r7, #27]
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	d003      	beq.n	80074fc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80074f4:	2302      	movs	r3, #2
 80074f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80074fa:	e1cd      	b.n	8007898 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d005      	beq.n	800750e <HAL_SPI_TransmitReceive+0x80>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d002      	beq.n	800750e <HAL_SPI_TransmitReceive+0x80>
 8007508:	887b      	ldrh	r3, [r7, #2]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d103      	bne.n	8007516 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007514:	e1c0      	b.n	8007898 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b04      	cmp	r3, #4
 8007520:	d003      	beq.n	800752a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2205      	movs	r2, #5
 8007526:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	887a      	ldrh	r2, [r7, #2]
 800753a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	887a      	ldrh	r2, [r7, #2]
 8007542:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	887a      	ldrh	r2, [r7, #2]
 8007550:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	887a      	ldrh	r2, [r7, #2]
 8007556:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800756c:	d802      	bhi.n	8007574 <HAL_SPI_TransmitReceive+0xe6>
 800756e:	8a3b      	ldrh	r3, [r7, #16]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d908      	bls.n	8007586 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007582:	605a      	str	r2, [r3, #4]
 8007584:	e007      	b.n	8007596 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007594:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a0:	2b40      	cmp	r3, #64	; 0x40
 80075a2:	d007      	beq.n	80075b4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075bc:	d97c      	bls.n	80076b8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d002      	beq.n	80075cc <HAL_SPI_TransmitReceive+0x13e>
 80075c6:	8a7b      	ldrh	r3, [r7, #18]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d169      	bne.n	80076a0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d0:	881a      	ldrh	r2, [r3, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075dc:	1c9a      	adds	r2, r3, #2
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	3b01      	subs	r3, #1
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075f0:	e056      	b.n	80076a0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f003 0302 	and.w	r3, r3, #2
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d11b      	bne.n	8007638 <HAL_SPI_TransmitReceive+0x1aa>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007604:	b29b      	uxth	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d016      	beq.n	8007638 <HAL_SPI_TransmitReceive+0x1aa>
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	2b01      	cmp	r3, #1
 800760e:	d113      	bne.n	8007638 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007614:	881a      	ldrh	r2, [r3, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007620:	1c9a      	adds	r2, r3, #2
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800762a:	b29b      	uxth	r3, r3
 800762c:	3b01      	subs	r3, #1
 800762e:	b29a      	uxth	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	2b01      	cmp	r3, #1
 8007644:	d11c      	bne.n	8007680 <HAL_SPI_TransmitReceive+0x1f2>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800764c:	b29b      	uxth	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d016      	beq.n	8007680 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68da      	ldr	r2, [r3, #12]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765c:	b292      	uxth	r2, r2
 800765e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007664:	1c9a      	adds	r2, r3, #2
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007670:	b29b      	uxth	r3, r3
 8007672:	3b01      	subs	r3, #1
 8007674:	b29a      	uxth	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800767c:	2301      	movs	r3, #1
 800767e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007680:	f7fd f83a 	bl	80046f8 <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800768c:	429a      	cmp	r2, r3
 800768e:	d807      	bhi.n	80076a0 <HAL_SPI_TransmitReceive+0x212>
 8007690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007696:	d003      	beq.n	80076a0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800769e:	e0fb      	b.n	8007898 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1a3      	bne.n	80075f2 <HAL_SPI_TransmitReceive+0x164>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d19d      	bne.n	80075f2 <HAL_SPI_TransmitReceive+0x164>
 80076b6:	e0df      	b.n	8007878 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d003      	beq.n	80076c8 <HAL_SPI_TransmitReceive+0x23a>
 80076c0:	8a7b      	ldrh	r3, [r7, #18]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	f040 80cb 	bne.w	800785e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d912      	bls.n	80076f8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d6:	881a      	ldrh	r2, [r3, #0]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e2:	1c9a      	adds	r2, r3, #2
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	3b02      	subs	r3, #2
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076f6:	e0b2      	b.n	800785e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	330c      	adds	r3, #12
 8007702:	7812      	ldrb	r2, [r2, #0]
 8007704:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770a:	1c5a      	adds	r2, r3, #1
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007714:	b29b      	uxth	r3, r3
 8007716:	3b01      	subs	r3, #1
 8007718:	b29a      	uxth	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800771e:	e09e      	b.n	800785e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f003 0302 	and.w	r3, r3, #2
 800772a:	2b02      	cmp	r3, #2
 800772c:	d134      	bne.n	8007798 <HAL_SPI_TransmitReceive+0x30a>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007732:	b29b      	uxth	r3, r3
 8007734:	2b00      	cmp	r3, #0
 8007736:	d02f      	beq.n	8007798 <HAL_SPI_TransmitReceive+0x30a>
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	2b01      	cmp	r3, #1
 800773c:	d12c      	bne.n	8007798 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007742:	b29b      	uxth	r3, r3
 8007744:	2b01      	cmp	r3, #1
 8007746:	d912      	bls.n	800776e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800774c:	881a      	ldrh	r2, [r3, #0]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007758:	1c9a      	adds	r2, r3, #2
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007762:	b29b      	uxth	r3, r3
 8007764:	3b02      	subs	r3, #2
 8007766:	b29a      	uxth	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800776c:	e012      	b.n	8007794 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	330c      	adds	r3, #12
 8007778:	7812      	ldrb	r2, [r2, #0]
 800777a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800778a:	b29b      	uxth	r3, r3
 800778c:	3b01      	subs	r3, #1
 800778e:	b29a      	uxth	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d148      	bne.n	8007838 <HAL_SPI_TransmitReceive+0x3aa>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d042      	beq.n	8007838 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d923      	bls.n	8007806 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68da      	ldr	r2, [r3, #12]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c8:	b292      	uxth	r2, r2
 80077ca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d0:	1c9a      	adds	r2, r3, #2
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077dc:	b29b      	uxth	r3, r3
 80077de:	3b02      	subs	r3, #2
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d81f      	bhi.n	8007834 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	685a      	ldr	r2, [r3, #4]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007802:	605a      	str	r2, [r3, #4]
 8007804:	e016      	b.n	8007834 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f103 020c 	add.w	r2, r3, #12
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007812:	7812      	ldrb	r2, [r2, #0]
 8007814:	b2d2      	uxtb	r2, r2
 8007816:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781c:	1c5a      	adds	r2, r3, #1
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007828:	b29b      	uxth	r3, r3
 800782a:	3b01      	subs	r3, #1
 800782c:	b29a      	uxth	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007834:	2301      	movs	r3, #1
 8007836:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007838:	f7fc ff5e 	bl	80046f8 <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007844:	429a      	cmp	r2, r3
 8007846:	d803      	bhi.n	8007850 <HAL_SPI_TransmitReceive+0x3c2>
 8007848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784e:	d102      	bne.n	8007856 <HAL_SPI_TransmitReceive+0x3c8>
 8007850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007852:	2b00      	cmp	r3, #0
 8007854:	d103      	bne.n	800785e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800785c:	e01c      	b.n	8007898 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007862:	b29b      	uxth	r3, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	f47f af5b 	bne.w	8007720 <HAL_SPI_TransmitReceive+0x292>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007870:	b29b      	uxth	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	f47f af54 	bne.w	8007720 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007878:	69fa      	ldr	r2, [r7, #28]
 800787a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f000 f933 	bl	8007ae8 <SPI_EndRxTxTransaction>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d006      	beq.n	8007896 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2220      	movs	r2, #32
 8007892:	661a      	str	r2, [r3, #96]	; 0x60
 8007894:	e000      	b.n	8007898 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007896:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80078a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3728      	adds	r7, #40	; 0x28
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b088      	sub	sp, #32
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	603b      	str	r3, [r7, #0]
 80078c0:	4613      	mov	r3, r2
 80078c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80078c4:	f7fc ff18 	bl	80046f8 <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078cc:	1a9b      	subs	r3, r3, r2
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	4413      	add	r3, r2
 80078d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80078d4:	f7fc ff10 	bl	80046f8 <HAL_GetTick>
 80078d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80078da:	4b39      	ldr	r3, [pc, #228]	; (80079c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	015b      	lsls	r3, r3, #5
 80078e0:	0d1b      	lsrs	r3, r3, #20
 80078e2:	69fa      	ldr	r2, [r7, #28]
 80078e4:	fb02 f303 	mul.w	r3, r2, r3
 80078e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078ea:	e054      	b.n	8007996 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f2:	d050      	beq.n	8007996 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80078f4:	f7fc ff00 	bl	80046f8 <HAL_GetTick>
 80078f8:	4602      	mov	r2, r0
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	69fa      	ldr	r2, [r7, #28]
 8007900:	429a      	cmp	r2, r3
 8007902:	d902      	bls.n	800790a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d13d      	bne.n	8007986 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	685a      	ldr	r2, [r3, #4]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007918:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007922:	d111      	bne.n	8007948 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800792c:	d004      	beq.n	8007938 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007936:	d107      	bne.n	8007948 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007946:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007950:	d10f      	bne.n	8007972 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007970:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e017      	b.n	80079b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d101      	bne.n	8007990 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800798c:	2300      	movs	r3, #0
 800798e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	3b01      	subs	r3, #1
 8007994:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	4013      	ands	r3, r2
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	bf0c      	ite	eq
 80079a6:	2301      	moveq	r3, #1
 80079a8:	2300      	movne	r3, #0
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	461a      	mov	r2, r3
 80079ae:	79fb      	ldrb	r3, [r7, #7]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d19b      	bne.n	80078ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3720      	adds	r7, #32
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	20000040 	.word	0x20000040

080079c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
 80079d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80079d2:	f7fc fe91 	bl	80046f8 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079da:	1a9b      	subs	r3, r3, r2
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	4413      	add	r3, r2
 80079e0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80079e2:	f7fc fe89 	bl	80046f8 <HAL_GetTick>
 80079e6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80079e8:	4b3e      	ldr	r3, [pc, #248]	; (8007ae4 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	4613      	mov	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	00da      	lsls	r2, r3, #3
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	0d1b      	lsrs	r3, r3, #20
 80079f8:	69fa      	ldr	r2, [r7, #28]
 80079fa:	fb02 f303 	mul.w	r3, r2, r3
 80079fe:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8007a00:	e062      	b.n	8007ac8 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007a08:	d109      	bne.n	8007a1e <SPI_WaitFifoStateUntilTimeout+0x5a>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d106      	bne.n	8007a1e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	330c      	adds	r3, #12
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8007a1c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a24:	d050      	beq.n	8007ac8 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a26:	f7fc fe67 	bl	80046f8 <HAL_GetTick>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	69fa      	ldr	r2, [r7, #28]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d902      	bls.n	8007a3c <SPI_WaitFifoStateUntilTimeout+0x78>
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d13d      	bne.n	8007ab8 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	685a      	ldr	r2, [r3, #4]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a4a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a54:	d111      	bne.n	8007a7a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a5e:	d004      	beq.n	8007a6a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a68:	d107      	bne.n	8007a7a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a78:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a82:	d10f      	bne.n	8007aa4 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007aa2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e010      	b.n	8007ada <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d101      	bne.n	8007ac2 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689a      	ldr	r2, [r3, #8]
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d194      	bne.n	8007a02 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3720      	adds	r7, #32
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20000040 	.word	0x20000040

08007ae8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af02      	add	r7, sp, #8
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f7ff ff5f 	bl	80079c4 <SPI_WaitFifoStateUntilTimeout>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d007      	beq.n	8007b1c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b10:	f043 0220 	orr.w	r2, r3, #32
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e027      	b.n	8007b6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	2200      	movs	r2, #0
 8007b24:	2180      	movs	r1, #128	; 0x80
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f7ff fec4 	bl	80078b4 <SPI_WaitFlagStateUntilTimeout>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d007      	beq.n	8007b42 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b36:	f043 0220 	orr.w	r2, r3, #32
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e014      	b.n	8007b6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f7ff ff38 	bl	80079c4 <SPI_WaitFifoStateUntilTimeout>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d007      	beq.n	8007b6a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b5e:	f043 0220 	orr.w	r2, r3, #32
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e000      	b.n	8007b6c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d101      	bne.n	8007b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e049      	b.n	8007c1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d106      	bne.n	8007ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7fc faec 	bl	8004178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	3304      	adds	r3, #4
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	f000 fd28 	bl	8008608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
	...

08007c24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d001      	beq.n	8007c3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e054      	b.n	8007ce6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2202      	movs	r2, #2
 8007c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68da      	ldr	r2, [r3, #12]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f042 0201 	orr.w	r2, r2, #1
 8007c52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a26      	ldr	r2, [pc, #152]	; (8007cf4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d022      	beq.n	8007ca4 <HAL_TIM_Base_Start_IT+0x80>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c66:	d01d      	beq.n	8007ca4 <HAL_TIM_Base_Start_IT+0x80>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a22      	ldr	r2, [pc, #136]	; (8007cf8 <HAL_TIM_Base_Start_IT+0xd4>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d018      	beq.n	8007ca4 <HAL_TIM_Base_Start_IT+0x80>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a21      	ldr	r2, [pc, #132]	; (8007cfc <HAL_TIM_Base_Start_IT+0xd8>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d013      	beq.n	8007ca4 <HAL_TIM_Base_Start_IT+0x80>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a1f      	ldr	r2, [pc, #124]	; (8007d00 <HAL_TIM_Base_Start_IT+0xdc>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d00e      	beq.n	8007ca4 <HAL_TIM_Base_Start_IT+0x80>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a1e      	ldr	r2, [pc, #120]	; (8007d04 <HAL_TIM_Base_Start_IT+0xe0>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d009      	beq.n	8007ca4 <HAL_TIM_Base_Start_IT+0x80>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a1c      	ldr	r2, [pc, #112]	; (8007d08 <HAL_TIM_Base_Start_IT+0xe4>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d004      	beq.n	8007ca4 <HAL_TIM_Base_Start_IT+0x80>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a1b      	ldr	r2, [pc, #108]	; (8007d0c <HAL_TIM_Base_Start_IT+0xe8>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d115      	bne.n	8007cd0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689a      	ldr	r2, [r3, #8]
 8007caa:	4b19      	ldr	r3, [pc, #100]	; (8007d10 <HAL_TIM_Base_Start_IT+0xec>)
 8007cac:	4013      	ands	r3, r2
 8007cae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2b06      	cmp	r3, #6
 8007cb4:	d015      	beq.n	8007ce2 <HAL_TIM_Base_Start_IT+0xbe>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cbc:	d011      	beq.n	8007ce2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f042 0201 	orr.w	r2, r2, #1
 8007ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cce:	e008      	b.n	8007ce2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f042 0201 	orr.w	r2, r2, #1
 8007cde:	601a      	str	r2, [r3, #0]
 8007ce0:	e000      	b.n	8007ce4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ce2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	40010000 	.word	0x40010000
 8007cf8:	40000400 	.word	0x40000400
 8007cfc:	40000800 	.word	0x40000800
 8007d00:	40000c00 	.word	0x40000c00
 8007d04:	40010400 	.word	0x40010400
 8007d08:	40014000 	.word	0x40014000
 8007d0c:	40001800 	.word	0x40001800
 8007d10:	00010007 	.word	0x00010007

08007d14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d101      	bne.n	8007d26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e049      	b.n	8007dba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d106      	bne.n	8007d40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f841 	bl	8007dc2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2202      	movs	r2, #2
 8007d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	3304      	adds	r3, #4
 8007d50:	4619      	mov	r1, r3
 8007d52:	4610      	mov	r0, r2
 8007d54:	f000 fc58 	bl	8008608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b083      	sub	sp, #12
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007dca:	bf00      	nop
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr
	...

08007dd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d109      	bne.n	8007dfc <HAL_TIM_PWM_Start+0x24>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	bf14      	ite	ne
 8007df4:	2301      	movne	r3, #1
 8007df6:	2300      	moveq	r3, #0
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	e03c      	b.n	8007e76 <HAL_TIM_PWM_Start+0x9e>
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	2b04      	cmp	r3, #4
 8007e00:	d109      	bne.n	8007e16 <HAL_TIM_PWM_Start+0x3e>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	bf14      	ite	ne
 8007e0e:	2301      	movne	r3, #1
 8007e10:	2300      	moveq	r3, #0
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	e02f      	b.n	8007e76 <HAL_TIM_PWM_Start+0x9e>
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b08      	cmp	r3, #8
 8007e1a:	d109      	bne.n	8007e30 <HAL_TIM_PWM_Start+0x58>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	bf14      	ite	ne
 8007e28:	2301      	movne	r3, #1
 8007e2a:	2300      	moveq	r3, #0
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	e022      	b.n	8007e76 <HAL_TIM_PWM_Start+0x9e>
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	2b0c      	cmp	r3, #12
 8007e34:	d109      	bne.n	8007e4a <HAL_TIM_PWM_Start+0x72>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	bf14      	ite	ne
 8007e42:	2301      	movne	r3, #1
 8007e44:	2300      	moveq	r3, #0
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	e015      	b.n	8007e76 <HAL_TIM_PWM_Start+0x9e>
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	2b10      	cmp	r3, #16
 8007e4e:	d109      	bne.n	8007e64 <HAL_TIM_PWM_Start+0x8c>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	bf14      	ite	ne
 8007e5c:	2301      	movne	r3, #1
 8007e5e:	2300      	moveq	r3, #0
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	e008      	b.n	8007e76 <HAL_TIM_PWM_Start+0x9e>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	bf14      	ite	ne
 8007e70:	2301      	movne	r3, #1
 8007e72:	2300      	moveq	r3, #0
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d001      	beq.n	8007e7e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e092      	b.n	8007fa4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d104      	bne.n	8007e8e <HAL_TIM_PWM_Start+0xb6>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e8c:	e023      	b.n	8007ed6 <HAL_TIM_PWM_Start+0xfe>
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b04      	cmp	r3, #4
 8007e92:	d104      	bne.n	8007e9e <HAL_TIM_PWM_Start+0xc6>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2202      	movs	r2, #2
 8007e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e9c:	e01b      	b.n	8007ed6 <HAL_TIM_PWM_Start+0xfe>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2b08      	cmp	r3, #8
 8007ea2:	d104      	bne.n	8007eae <HAL_TIM_PWM_Start+0xd6>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007eac:	e013      	b.n	8007ed6 <HAL_TIM_PWM_Start+0xfe>
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	2b0c      	cmp	r3, #12
 8007eb2:	d104      	bne.n	8007ebe <HAL_TIM_PWM_Start+0xe6>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ebc:	e00b      	b.n	8007ed6 <HAL_TIM_PWM_Start+0xfe>
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	2b10      	cmp	r3, #16
 8007ec2:	d104      	bne.n	8007ece <HAL_TIM_PWM_Start+0xf6>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ecc:	e003      	b.n	8007ed6 <HAL_TIM_PWM_Start+0xfe>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2201      	movs	r2, #1
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 ff2a 	bl	8008d38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a30      	ldr	r2, [pc, #192]	; (8007fac <HAL_TIM_PWM_Start+0x1d4>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d004      	beq.n	8007ef8 <HAL_TIM_PWM_Start+0x120>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a2f      	ldr	r2, [pc, #188]	; (8007fb0 <HAL_TIM_PWM_Start+0x1d8>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d101      	bne.n	8007efc <HAL_TIM_PWM_Start+0x124>
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e000      	b.n	8007efe <HAL_TIM_PWM_Start+0x126>
 8007efc:	2300      	movs	r3, #0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d007      	beq.n	8007f12 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a25      	ldr	r2, [pc, #148]	; (8007fac <HAL_TIM_PWM_Start+0x1d4>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d022      	beq.n	8007f62 <HAL_TIM_PWM_Start+0x18a>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f24:	d01d      	beq.n	8007f62 <HAL_TIM_PWM_Start+0x18a>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a22      	ldr	r2, [pc, #136]	; (8007fb4 <HAL_TIM_PWM_Start+0x1dc>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d018      	beq.n	8007f62 <HAL_TIM_PWM_Start+0x18a>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a20      	ldr	r2, [pc, #128]	; (8007fb8 <HAL_TIM_PWM_Start+0x1e0>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d013      	beq.n	8007f62 <HAL_TIM_PWM_Start+0x18a>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a1f      	ldr	r2, [pc, #124]	; (8007fbc <HAL_TIM_PWM_Start+0x1e4>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d00e      	beq.n	8007f62 <HAL_TIM_PWM_Start+0x18a>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a19      	ldr	r2, [pc, #100]	; (8007fb0 <HAL_TIM_PWM_Start+0x1d8>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d009      	beq.n	8007f62 <HAL_TIM_PWM_Start+0x18a>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a1b      	ldr	r2, [pc, #108]	; (8007fc0 <HAL_TIM_PWM_Start+0x1e8>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d004      	beq.n	8007f62 <HAL_TIM_PWM_Start+0x18a>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a19      	ldr	r2, [pc, #100]	; (8007fc4 <HAL_TIM_PWM_Start+0x1ec>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d115      	bne.n	8007f8e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	689a      	ldr	r2, [r3, #8]
 8007f68:	4b17      	ldr	r3, [pc, #92]	; (8007fc8 <HAL_TIM_PWM_Start+0x1f0>)
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2b06      	cmp	r3, #6
 8007f72:	d015      	beq.n	8007fa0 <HAL_TIM_PWM_Start+0x1c8>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f7a:	d011      	beq.n	8007fa0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f042 0201 	orr.w	r2, r2, #1
 8007f8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f8c:	e008      	b.n	8007fa0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f042 0201 	orr.w	r2, r2, #1
 8007f9c:	601a      	str	r2, [r3, #0]
 8007f9e:	e000      	b.n	8007fa2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fa0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	40010000 	.word	0x40010000
 8007fb0:	40010400 	.word	0x40010400
 8007fb4:	40000400 	.word	0x40000400
 8007fb8:	40000800 	.word	0x40000800
 8007fbc:	40000c00 	.word	0x40000c00
 8007fc0:	40014000 	.word	0x40014000
 8007fc4:	40001800 	.word	0x40001800
 8007fc8:	00010007 	.word	0x00010007

08007fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	f003 0302 	and.w	r3, r3, #2
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d122      	bne.n	8008028 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	f003 0302 	and.w	r3, r3, #2
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	d11b      	bne.n	8008028 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f06f 0202 	mvn.w	r2, #2
 8007ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	f003 0303 	and.w	r3, r3, #3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d003      	beq.n	8008016 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fadc 	bl	80085cc <HAL_TIM_IC_CaptureCallback>
 8008014:	e005      	b.n	8008022 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 face 	bl	80085b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fadf 	bl	80085e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	f003 0304 	and.w	r3, r3, #4
 8008032:	2b04      	cmp	r3, #4
 8008034:	d122      	bne.n	800807c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	f003 0304 	and.w	r3, r3, #4
 8008040:	2b04      	cmp	r3, #4
 8008042:	d11b      	bne.n	800807c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f06f 0204 	mvn.w	r2, #4
 800804c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2202      	movs	r2, #2
 8008052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800805e:	2b00      	cmp	r3, #0
 8008060:	d003      	beq.n	800806a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fab2 	bl	80085cc <HAL_TIM_IC_CaptureCallback>
 8008068:	e005      	b.n	8008076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 faa4 	bl	80085b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fab5 	bl	80085e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	f003 0308 	and.w	r3, r3, #8
 8008086:	2b08      	cmp	r3, #8
 8008088:	d122      	bne.n	80080d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	f003 0308 	and.w	r3, r3, #8
 8008094:	2b08      	cmp	r3, #8
 8008096:	d11b      	bne.n	80080d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f06f 0208 	mvn.w	r2, #8
 80080a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2204      	movs	r2, #4
 80080a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	69db      	ldr	r3, [r3, #28]
 80080ae:	f003 0303 	and.w	r3, r3, #3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fa88 	bl	80085cc <HAL_TIM_IC_CaptureCallback>
 80080bc:	e005      	b.n	80080ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fa7a 	bl	80085b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fa8b 	bl	80085e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	f003 0310 	and.w	r3, r3, #16
 80080da:	2b10      	cmp	r3, #16
 80080dc:	d122      	bne.n	8008124 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f003 0310 	and.w	r3, r3, #16
 80080e8:	2b10      	cmp	r3, #16
 80080ea:	d11b      	bne.n	8008124 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f06f 0210 	mvn.w	r2, #16
 80080f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2208      	movs	r2, #8
 80080fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	69db      	ldr	r3, [r3, #28]
 8008102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008106:	2b00      	cmp	r3, #0
 8008108:	d003      	beq.n	8008112 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fa5e 	bl	80085cc <HAL_TIM_IC_CaptureCallback>
 8008110:	e005      	b.n	800811e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fa50 	bl	80085b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fa61 	bl	80085e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	2b01      	cmp	r3, #1
 8008130:	d10e      	bne.n	8008150 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	f003 0301 	and.w	r3, r3, #1
 800813c:	2b01      	cmp	r3, #1
 800813e:	d107      	bne.n	8008150 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f06f 0201 	mvn.w	r2, #1
 8008148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7fa ffb8 	bl	80030c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800815a:	2b80      	cmp	r3, #128	; 0x80
 800815c:	d10e      	bne.n	800817c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008168:	2b80      	cmp	r3, #128	; 0x80
 800816a:	d107      	bne.n	800817c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fe9c 	bl	8008eb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800818a:	d10e      	bne.n	80081aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008196:	2b80      	cmp	r3, #128	; 0x80
 8008198:	d107      	bne.n	80081aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80081a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fe8f 	bl	8008ec8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b4:	2b40      	cmp	r3, #64	; 0x40
 80081b6:	d10e      	bne.n	80081d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081c2:	2b40      	cmp	r3, #64	; 0x40
 80081c4:	d107      	bne.n	80081d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fa0f 	bl	80085f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	f003 0320 	and.w	r3, r3, #32
 80081e0:	2b20      	cmp	r3, #32
 80081e2:	d10e      	bne.n	8008202 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	f003 0320 	and.w	r3, r3, #32
 80081ee:	2b20      	cmp	r3, #32
 80081f0:	d107      	bne.n	8008202 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f06f 0220 	mvn.w	r2, #32
 80081fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 fe4f 	bl	8008ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008202:	bf00      	nop
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
	...

0800820c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800821e:	2b01      	cmp	r3, #1
 8008220:	d101      	bne.n	8008226 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008222:	2302      	movs	r3, #2
 8008224:	e0fd      	b.n	8008422 <HAL_TIM_PWM_ConfigChannel+0x216>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2201      	movs	r2, #1
 800822a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2b14      	cmp	r3, #20
 8008232:	f200 80f0 	bhi.w	8008416 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008236:	a201      	add	r2, pc, #4	; (adr r2, 800823c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823c:	08008291 	.word	0x08008291
 8008240:	08008417 	.word	0x08008417
 8008244:	08008417 	.word	0x08008417
 8008248:	08008417 	.word	0x08008417
 800824c:	080082d1 	.word	0x080082d1
 8008250:	08008417 	.word	0x08008417
 8008254:	08008417 	.word	0x08008417
 8008258:	08008417 	.word	0x08008417
 800825c:	08008313 	.word	0x08008313
 8008260:	08008417 	.word	0x08008417
 8008264:	08008417 	.word	0x08008417
 8008268:	08008417 	.word	0x08008417
 800826c:	08008353 	.word	0x08008353
 8008270:	08008417 	.word	0x08008417
 8008274:	08008417 	.word	0x08008417
 8008278:	08008417 	.word	0x08008417
 800827c:	08008395 	.word	0x08008395
 8008280:	08008417 	.word	0x08008417
 8008284:	08008417 	.word	0x08008417
 8008288:	08008417 	.word	0x08008417
 800828c:	080083d5 	.word	0x080083d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68b9      	ldr	r1, [r7, #8]
 8008296:	4618      	mov	r0, r3
 8008298:	f000 fa56 	bl	8008748 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	699a      	ldr	r2, [r3, #24]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f042 0208 	orr.w	r2, r2, #8
 80082aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	699a      	ldr	r2, [r3, #24]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f022 0204 	bic.w	r2, r2, #4
 80082ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	6999      	ldr	r1, [r3, #24]
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	691a      	ldr	r2, [r3, #16]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	430a      	orrs	r2, r1
 80082cc:	619a      	str	r2, [r3, #24]
      break;
 80082ce:	e0a3      	b.n	8008418 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68b9      	ldr	r1, [r7, #8]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 faa8 	bl	800882c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	699a      	ldr	r2, [r3, #24]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	699a      	ldr	r2, [r3, #24]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6999      	ldr	r1, [r3, #24]
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	021a      	lsls	r2, r3, #8
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	430a      	orrs	r2, r1
 800830e:	619a      	str	r2, [r3, #24]
      break;
 8008310:	e082      	b.n	8008418 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68b9      	ldr	r1, [r7, #8]
 8008318:	4618      	mov	r0, r3
 800831a:	f000 faff 	bl	800891c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	69da      	ldr	r2, [r3, #28]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f042 0208 	orr.w	r2, r2, #8
 800832c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	69da      	ldr	r2, [r3, #28]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f022 0204 	bic.w	r2, r2, #4
 800833c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	69d9      	ldr	r1, [r3, #28]
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	691a      	ldr	r2, [r3, #16]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	430a      	orrs	r2, r1
 800834e:	61da      	str	r2, [r3, #28]
      break;
 8008350:	e062      	b.n	8008418 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68b9      	ldr	r1, [r7, #8]
 8008358:	4618      	mov	r0, r3
 800835a:	f000 fb55 	bl	8008a08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	69da      	ldr	r2, [r3, #28]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800836c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	69da      	ldr	r2, [r3, #28]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800837c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	69d9      	ldr	r1, [r3, #28]
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	021a      	lsls	r2, r3, #8
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	430a      	orrs	r2, r1
 8008390:	61da      	str	r2, [r3, #28]
      break;
 8008392:	e041      	b.n	8008418 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68b9      	ldr	r1, [r7, #8]
 800839a:	4618      	mov	r0, r3
 800839c:	f000 fb8c 	bl	8008ab8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f042 0208 	orr.w	r2, r2, #8
 80083ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f022 0204 	bic.w	r2, r2, #4
 80083be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	691a      	ldr	r2, [r3, #16]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	430a      	orrs	r2, r1
 80083d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80083d2:	e021      	b.n	8008418 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68b9      	ldr	r1, [r7, #8]
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 fbbe 	bl	8008b5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	021a      	lsls	r2, r3, #8
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	430a      	orrs	r2, r1
 8008412:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008414:	e000      	b.n	8008418 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008416:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop

0800842c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800843c:	2b01      	cmp	r3, #1
 800843e:	d101      	bne.n	8008444 <HAL_TIM_ConfigClockSource+0x18>
 8008440:	2302      	movs	r3, #2
 8008442:	e0b3      	b.n	80085ac <HAL_TIM_ConfigClockSource+0x180>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2202      	movs	r2, #2
 8008450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	4b55      	ldr	r3, [pc, #340]	; (80085b4 <HAL_TIM_ConfigClockSource+0x188>)
 8008460:	4013      	ands	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800846a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800847c:	d03e      	beq.n	80084fc <HAL_TIM_ConfigClockSource+0xd0>
 800847e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008482:	f200 8087 	bhi.w	8008594 <HAL_TIM_ConfigClockSource+0x168>
 8008486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800848a:	f000 8085 	beq.w	8008598 <HAL_TIM_ConfigClockSource+0x16c>
 800848e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008492:	d87f      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x168>
 8008494:	2b70      	cmp	r3, #112	; 0x70
 8008496:	d01a      	beq.n	80084ce <HAL_TIM_ConfigClockSource+0xa2>
 8008498:	2b70      	cmp	r3, #112	; 0x70
 800849a:	d87b      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x168>
 800849c:	2b60      	cmp	r3, #96	; 0x60
 800849e:	d050      	beq.n	8008542 <HAL_TIM_ConfigClockSource+0x116>
 80084a0:	2b60      	cmp	r3, #96	; 0x60
 80084a2:	d877      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x168>
 80084a4:	2b50      	cmp	r3, #80	; 0x50
 80084a6:	d03c      	beq.n	8008522 <HAL_TIM_ConfigClockSource+0xf6>
 80084a8:	2b50      	cmp	r3, #80	; 0x50
 80084aa:	d873      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x168>
 80084ac:	2b40      	cmp	r3, #64	; 0x40
 80084ae:	d058      	beq.n	8008562 <HAL_TIM_ConfigClockSource+0x136>
 80084b0:	2b40      	cmp	r3, #64	; 0x40
 80084b2:	d86f      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x168>
 80084b4:	2b30      	cmp	r3, #48	; 0x30
 80084b6:	d064      	beq.n	8008582 <HAL_TIM_ConfigClockSource+0x156>
 80084b8:	2b30      	cmp	r3, #48	; 0x30
 80084ba:	d86b      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x168>
 80084bc:	2b20      	cmp	r3, #32
 80084be:	d060      	beq.n	8008582 <HAL_TIM_ConfigClockSource+0x156>
 80084c0:	2b20      	cmp	r3, #32
 80084c2:	d867      	bhi.n	8008594 <HAL_TIM_ConfigClockSource+0x168>
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d05c      	beq.n	8008582 <HAL_TIM_ConfigClockSource+0x156>
 80084c8:	2b10      	cmp	r3, #16
 80084ca:	d05a      	beq.n	8008582 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80084cc:	e062      	b.n	8008594 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6818      	ldr	r0, [r3, #0]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	6899      	ldr	r1, [r3, #8]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	685a      	ldr	r2, [r3, #4]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	f000 fc0b 	bl	8008cf8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80084f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	609a      	str	r2, [r3, #8]
      break;
 80084fa:	e04e      	b.n	800859a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6818      	ldr	r0, [r3, #0]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	6899      	ldr	r1, [r3, #8]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	685a      	ldr	r2, [r3, #4]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	f000 fbf4 	bl	8008cf8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689a      	ldr	r2, [r3, #8]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800851e:	609a      	str	r2, [r3, #8]
      break;
 8008520:	e03b      	b.n	800859a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6818      	ldr	r0, [r3, #0]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	6859      	ldr	r1, [r3, #4]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	461a      	mov	r2, r3
 8008530:	f000 fb68 	bl	8008c04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2150      	movs	r1, #80	; 0x50
 800853a:	4618      	mov	r0, r3
 800853c:	f000 fbc1 	bl	8008cc2 <TIM_ITRx_SetConfig>
      break;
 8008540:	e02b      	b.n	800859a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6818      	ldr	r0, [r3, #0]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	6859      	ldr	r1, [r3, #4]
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	461a      	mov	r2, r3
 8008550:	f000 fb87 	bl	8008c62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2160      	movs	r1, #96	; 0x60
 800855a:	4618      	mov	r0, r3
 800855c:	f000 fbb1 	bl	8008cc2 <TIM_ITRx_SetConfig>
      break;
 8008560:	e01b      	b.n	800859a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6818      	ldr	r0, [r3, #0]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	6859      	ldr	r1, [r3, #4]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	461a      	mov	r2, r3
 8008570:	f000 fb48 	bl	8008c04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2140      	movs	r1, #64	; 0x40
 800857a:	4618      	mov	r0, r3
 800857c:	f000 fba1 	bl	8008cc2 <TIM_ITRx_SetConfig>
      break;
 8008580:	e00b      	b.n	800859a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4619      	mov	r1, r3
 800858c:	4610      	mov	r0, r2
 800858e:	f000 fb98 	bl	8008cc2 <TIM_ITRx_SetConfig>
        break;
 8008592:	e002      	b.n	800859a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008594:	bf00      	nop
 8008596:	e000      	b.n	800859a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008598:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	fffeff88 	.word	0xfffeff88

080085b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085c0:	bf00      	nop
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085e8:	bf00      	nop
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085fc:	bf00      	nop
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a40      	ldr	r2, [pc, #256]	; (800871c <TIM_Base_SetConfig+0x114>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d013      	beq.n	8008648 <TIM_Base_SetConfig+0x40>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008626:	d00f      	beq.n	8008648 <TIM_Base_SetConfig+0x40>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a3d      	ldr	r2, [pc, #244]	; (8008720 <TIM_Base_SetConfig+0x118>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d00b      	beq.n	8008648 <TIM_Base_SetConfig+0x40>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a3c      	ldr	r2, [pc, #240]	; (8008724 <TIM_Base_SetConfig+0x11c>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d007      	beq.n	8008648 <TIM_Base_SetConfig+0x40>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a3b      	ldr	r2, [pc, #236]	; (8008728 <TIM_Base_SetConfig+0x120>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d003      	beq.n	8008648 <TIM_Base_SetConfig+0x40>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a3a      	ldr	r2, [pc, #232]	; (800872c <TIM_Base_SetConfig+0x124>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d108      	bne.n	800865a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800864e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	4313      	orrs	r3, r2
 8008658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a2f      	ldr	r2, [pc, #188]	; (800871c <TIM_Base_SetConfig+0x114>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d02b      	beq.n	80086ba <TIM_Base_SetConfig+0xb2>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008668:	d027      	beq.n	80086ba <TIM_Base_SetConfig+0xb2>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a2c      	ldr	r2, [pc, #176]	; (8008720 <TIM_Base_SetConfig+0x118>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d023      	beq.n	80086ba <TIM_Base_SetConfig+0xb2>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a2b      	ldr	r2, [pc, #172]	; (8008724 <TIM_Base_SetConfig+0x11c>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d01f      	beq.n	80086ba <TIM_Base_SetConfig+0xb2>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a2a      	ldr	r2, [pc, #168]	; (8008728 <TIM_Base_SetConfig+0x120>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d01b      	beq.n	80086ba <TIM_Base_SetConfig+0xb2>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a29      	ldr	r2, [pc, #164]	; (800872c <TIM_Base_SetConfig+0x124>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d017      	beq.n	80086ba <TIM_Base_SetConfig+0xb2>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a28      	ldr	r2, [pc, #160]	; (8008730 <TIM_Base_SetConfig+0x128>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d013      	beq.n	80086ba <TIM_Base_SetConfig+0xb2>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a27      	ldr	r2, [pc, #156]	; (8008734 <TIM_Base_SetConfig+0x12c>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d00f      	beq.n	80086ba <TIM_Base_SetConfig+0xb2>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a26      	ldr	r2, [pc, #152]	; (8008738 <TIM_Base_SetConfig+0x130>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d00b      	beq.n	80086ba <TIM_Base_SetConfig+0xb2>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a25      	ldr	r2, [pc, #148]	; (800873c <TIM_Base_SetConfig+0x134>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d007      	beq.n	80086ba <TIM_Base_SetConfig+0xb2>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a24      	ldr	r2, [pc, #144]	; (8008740 <TIM_Base_SetConfig+0x138>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d003      	beq.n	80086ba <TIM_Base_SetConfig+0xb2>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a23      	ldr	r2, [pc, #140]	; (8008744 <TIM_Base_SetConfig+0x13c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d108      	bne.n	80086cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	689a      	ldr	r2, [r3, #8]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a0a      	ldr	r2, [pc, #40]	; (800871c <TIM_Base_SetConfig+0x114>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d003      	beq.n	8008700 <TIM_Base_SetConfig+0xf8>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a0c      	ldr	r2, [pc, #48]	; (800872c <TIM_Base_SetConfig+0x124>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d103      	bne.n	8008708 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	691a      	ldr	r2, [r3, #16]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	615a      	str	r2, [r3, #20]
}
 800870e:	bf00      	nop
 8008710:	3714      	adds	r7, #20
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	40010000 	.word	0x40010000
 8008720:	40000400 	.word	0x40000400
 8008724:	40000800 	.word	0x40000800
 8008728:	40000c00 	.word	0x40000c00
 800872c:	40010400 	.word	0x40010400
 8008730:	40014000 	.word	0x40014000
 8008734:	40014400 	.word	0x40014400
 8008738:	40014800 	.word	0x40014800
 800873c:	40001800 	.word	0x40001800
 8008740:	40001c00 	.word	0x40001c00
 8008744:	40002000 	.word	0x40002000

08008748 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008748:	b480      	push	{r7}
 800874a:	b087      	sub	sp, #28
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a1b      	ldr	r3, [r3, #32]
 8008756:	f023 0201 	bic.w	r2, r3, #1
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a1b      	ldr	r3, [r3, #32]
 8008762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	4b2b      	ldr	r3, [pc, #172]	; (8008820 <TIM_OC1_SetConfig+0xd8>)
 8008774:	4013      	ands	r3, r2
 8008776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f023 0303 	bic.w	r3, r3, #3
 800877e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	4313      	orrs	r3, r2
 8008788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	f023 0302 	bic.w	r3, r3, #2
 8008790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	4313      	orrs	r3, r2
 800879a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a21      	ldr	r2, [pc, #132]	; (8008824 <TIM_OC1_SetConfig+0xdc>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d003      	beq.n	80087ac <TIM_OC1_SetConfig+0x64>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a20      	ldr	r2, [pc, #128]	; (8008828 <TIM_OC1_SetConfig+0xe0>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d10c      	bne.n	80087c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	f023 0308 	bic.w	r3, r3, #8
 80087b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	697a      	ldr	r2, [r7, #20]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	f023 0304 	bic.w	r3, r3, #4
 80087c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a16      	ldr	r2, [pc, #88]	; (8008824 <TIM_OC1_SetConfig+0xdc>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d003      	beq.n	80087d6 <TIM_OC1_SetConfig+0x8e>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a15      	ldr	r2, [pc, #84]	; (8008828 <TIM_OC1_SetConfig+0xe0>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d111      	bne.n	80087fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	695b      	ldr	r3, [r3, #20]
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	693a      	ldr	r2, [r7, #16]
 80087fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	685a      	ldr	r2, [r3, #4]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	697a      	ldr	r2, [r7, #20]
 8008812:	621a      	str	r2, [r3, #32]
}
 8008814:	bf00      	nop
 8008816:	371c      	adds	r7, #28
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr
 8008820:	fffeff8f 	.word	0xfffeff8f
 8008824:	40010000 	.word	0x40010000
 8008828:	40010400 	.word	0x40010400

0800882c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800882c:	b480      	push	{r7}
 800882e:	b087      	sub	sp, #28
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	f023 0210 	bic.w	r2, r3, #16
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a1b      	ldr	r3, [r3, #32]
 8008846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	4b2e      	ldr	r3, [pc, #184]	; (8008910 <TIM_OC2_SetConfig+0xe4>)
 8008858:	4013      	ands	r3, r2
 800885a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	021b      	lsls	r3, r3, #8
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	4313      	orrs	r3, r2
 800886e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	f023 0320 	bic.w	r3, r3, #32
 8008876:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	011b      	lsls	r3, r3, #4
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	4313      	orrs	r3, r2
 8008882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a23      	ldr	r2, [pc, #140]	; (8008914 <TIM_OC2_SetConfig+0xe8>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d003      	beq.n	8008894 <TIM_OC2_SetConfig+0x68>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a22      	ldr	r2, [pc, #136]	; (8008918 <TIM_OC2_SetConfig+0xec>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d10d      	bne.n	80088b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800889a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	011b      	lsls	r3, r3, #4
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a18      	ldr	r2, [pc, #96]	; (8008914 <TIM_OC2_SetConfig+0xe8>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d003      	beq.n	80088c0 <TIM_OC2_SetConfig+0x94>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a17      	ldr	r2, [pc, #92]	; (8008918 <TIM_OC2_SetConfig+0xec>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d113      	bne.n	80088e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	695b      	ldr	r3, [r3, #20]
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	4313      	orrs	r3, r2
 80088da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	699b      	ldr	r3, [r3, #24]
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	693a      	ldr	r2, [r7, #16]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	685a      	ldr	r2, [r3, #4]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	697a      	ldr	r2, [r7, #20]
 8008900:	621a      	str	r2, [r3, #32]
}
 8008902:	bf00      	nop
 8008904:	371c      	adds	r7, #28
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	feff8fff 	.word	0xfeff8fff
 8008914:	40010000 	.word	0x40010000
 8008918:	40010400 	.word	0x40010400

0800891c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800891c:	b480      	push	{r7}
 800891e:	b087      	sub	sp, #28
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	69db      	ldr	r3, [r3, #28]
 8008942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	4b2d      	ldr	r3, [pc, #180]	; (80089fc <TIM_OC3_SetConfig+0xe0>)
 8008948:	4013      	ands	r3, r2
 800894a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f023 0303 	bic.w	r3, r3, #3
 8008952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	4313      	orrs	r3, r2
 800895c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	021b      	lsls	r3, r3, #8
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	4313      	orrs	r3, r2
 8008970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a22      	ldr	r2, [pc, #136]	; (8008a00 <TIM_OC3_SetConfig+0xe4>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d003      	beq.n	8008982 <TIM_OC3_SetConfig+0x66>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a21      	ldr	r2, [pc, #132]	; (8008a04 <TIM_OC3_SetConfig+0xe8>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d10d      	bne.n	800899e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008988:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	021b      	lsls	r3, r3, #8
 8008990:	697a      	ldr	r2, [r7, #20]
 8008992:	4313      	orrs	r3, r2
 8008994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800899c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a17      	ldr	r2, [pc, #92]	; (8008a00 <TIM_OC3_SetConfig+0xe4>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d003      	beq.n	80089ae <TIM_OC3_SetConfig+0x92>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a16      	ldr	r2, [pc, #88]	; (8008a04 <TIM_OC3_SetConfig+0xe8>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d113      	bne.n	80089d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	011b      	lsls	r3, r3, #4
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	011b      	lsls	r3, r3, #4
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	685a      	ldr	r2, [r3, #4]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	697a      	ldr	r2, [r7, #20]
 80089ee:	621a      	str	r2, [r3, #32]
}
 80089f0:	bf00      	nop
 80089f2:	371c      	adds	r7, #28
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	fffeff8f 	.word	0xfffeff8f
 8008a00:	40010000 	.word	0x40010000
 8008a04:	40010400 	.word	0x40010400

08008a08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b087      	sub	sp, #28
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a1b      	ldr	r3, [r3, #32]
 8008a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a1b      	ldr	r3, [r3, #32]
 8008a22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	69db      	ldr	r3, [r3, #28]
 8008a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	4b1e      	ldr	r3, [pc, #120]	; (8008aac <TIM_OC4_SetConfig+0xa4>)
 8008a34:	4013      	ands	r3, r2
 8008a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	021b      	lsls	r3, r3, #8
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	031b      	lsls	r3, r3, #12
 8008a5a:	693a      	ldr	r2, [r7, #16]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a13      	ldr	r2, [pc, #76]	; (8008ab0 <TIM_OC4_SetConfig+0xa8>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d003      	beq.n	8008a70 <TIM_OC4_SetConfig+0x68>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a12      	ldr	r2, [pc, #72]	; (8008ab4 <TIM_OC4_SetConfig+0xac>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d109      	bne.n	8008a84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	695b      	ldr	r3, [r3, #20]
 8008a7c:	019b      	lsls	r3, r3, #6
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	685a      	ldr	r2, [r3, #4]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	621a      	str	r2, [r3, #32]
}
 8008a9e:	bf00      	nop
 8008aa0:	371c      	adds	r7, #28
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	feff8fff 	.word	0xfeff8fff
 8008ab0:	40010000 	.word	0x40010000
 8008ab4:	40010400 	.word	0x40010400

08008ab8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b087      	sub	sp, #28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	4b1b      	ldr	r3, [pc, #108]	; (8008b50 <TIM_OC5_SetConfig+0x98>)
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008af8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	041b      	lsls	r3, r3, #16
 8008b00:	693a      	ldr	r2, [r7, #16]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a12      	ldr	r2, [pc, #72]	; (8008b54 <TIM_OC5_SetConfig+0x9c>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d003      	beq.n	8008b16 <TIM_OC5_SetConfig+0x5e>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a11      	ldr	r2, [pc, #68]	; (8008b58 <TIM_OC5_SetConfig+0xa0>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d109      	bne.n	8008b2a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	021b      	lsls	r3, r3, #8
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	685a      	ldr	r2, [r3, #4]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	693a      	ldr	r2, [r7, #16]
 8008b42:	621a      	str	r2, [r3, #32]
}
 8008b44:	bf00      	nop
 8008b46:	371c      	adds	r7, #28
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr
 8008b50:	fffeff8f 	.word	0xfffeff8f
 8008b54:	40010000 	.word	0x40010000
 8008b58:	40010400 	.word	0x40010400

08008b5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b087      	sub	sp, #28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a1b      	ldr	r3, [r3, #32]
 8008b6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	4b1c      	ldr	r3, [pc, #112]	; (8008bf8 <TIM_OC6_SetConfig+0x9c>)
 8008b88:	4013      	ands	r3, r2
 8008b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	021b      	lsls	r3, r3, #8
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	051b      	lsls	r3, r3, #20
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a13      	ldr	r2, [pc, #76]	; (8008bfc <TIM_OC6_SetConfig+0xa0>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d003      	beq.n	8008bbc <TIM_OC6_SetConfig+0x60>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a12      	ldr	r2, [pc, #72]	; (8008c00 <TIM_OC6_SetConfig+0xa4>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d109      	bne.n	8008bd0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	695b      	ldr	r3, [r3, #20]
 8008bc8:	029b      	lsls	r3, r3, #10
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	693a      	ldr	r2, [r7, #16]
 8008be8:	621a      	str	r2, [r3, #32]
}
 8008bea:	bf00      	nop
 8008bec:	371c      	adds	r7, #28
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	feff8fff 	.word	0xfeff8fff
 8008bfc:	40010000 	.word	0x40010000
 8008c00:	40010400 	.word	0x40010400

08008c04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b087      	sub	sp, #28
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6a1b      	ldr	r3, [r3, #32]
 8008c14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6a1b      	ldr	r3, [r3, #32]
 8008c1a:	f023 0201 	bic.w	r2, r3, #1
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	699b      	ldr	r3, [r3, #24]
 8008c26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	011b      	lsls	r3, r3, #4
 8008c34:	693a      	ldr	r2, [r7, #16]
 8008c36:	4313      	orrs	r3, r2
 8008c38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	f023 030a 	bic.w	r3, r3, #10
 8008c40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c42:	697a      	ldr	r2, [r7, #20]
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	693a      	ldr	r2, [r7, #16]
 8008c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	621a      	str	r2, [r3, #32]
}
 8008c56:	bf00      	nop
 8008c58:	371c      	adds	r7, #28
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr

08008c62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c62:	b480      	push	{r7}
 8008c64:	b087      	sub	sp, #28
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	60b9      	str	r1, [r7, #8]
 8008c6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6a1b      	ldr	r3, [r3, #32]
 8008c72:	f023 0210 	bic.w	r2, r3, #16
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6a1b      	ldr	r3, [r3, #32]
 8008c84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	031b      	lsls	r3, r3, #12
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	011b      	lsls	r3, r3, #4
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	697a      	ldr	r2, [r7, #20]
 8008cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	693a      	ldr	r2, [r7, #16]
 8008cb4:	621a      	str	r2, [r3, #32]
}
 8008cb6:	bf00      	nop
 8008cb8:	371c      	adds	r7, #28
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	b085      	sub	sp, #20
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	f043 0307 	orr.w	r3, r3, #7
 8008ce4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	609a      	str	r2, [r3, #8]
}
 8008cec:	bf00      	nop
 8008cee:	3714      	adds	r7, #20
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b087      	sub	sp, #28
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
 8008d04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	021a      	lsls	r2, r3, #8
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	431a      	orrs	r2, r3
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	697a      	ldr	r2, [r7, #20]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	697a      	ldr	r2, [r7, #20]
 8008d2a:	609a      	str	r2, [r3, #8]
}
 8008d2c:	bf00      	nop
 8008d2e:	371c      	adds	r7, #28
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b087      	sub	sp, #28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	f003 031f 	and.w	r3, r3, #31
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6a1a      	ldr	r2, [r3, #32]
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	43db      	mvns	r3, r3
 8008d5a:	401a      	ands	r2, r3
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6a1a      	ldr	r2, [r3, #32]
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	f003 031f 	and.w	r3, r3, #31
 8008d6a:	6879      	ldr	r1, [r7, #4]
 8008d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d70:	431a      	orrs	r2, r3
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	621a      	str	r2, [r3, #32]
}
 8008d76:	bf00      	nop
 8008d78:	371c      	adds	r7, #28
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
	...

08008d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d101      	bne.n	8008d9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d98:	2302      	movs	r3, #2
 8008d9a:	e06d      	b.n	8008e78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2202      	movs	r2, #2
 8008da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a30      	ldr	r2, [pc, #192]	; (8008e84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d004      	beq.n	8008dd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a2f      	ldr	r2, [pc, #188]	; (8008e88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d108      	bne.n	8008de2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008dd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008de8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a20      	ldr	r2, [pc, #128]	; (8008e84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d022      	beq.n	8008e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e0e:	d01d      	beq.n	8008e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a1d      	ldr	r2, [pc, #116]	; (8008e8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d018      	beq.n	8008e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a1c      	ldr	r2, [pc, #112]	; (8008e90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d013      	beq.n	8008e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a1a      	ldr	r2, [pc, #104]	; (8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d00e      	beq.n	8008e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a15      	ldr	r2, [pc, #84]	; (8008e88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d009      	beq.n	8008e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a16      	ldr	r2, [pc, #88]	; (8008e98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d004      	beq.n	8008e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a15      	ldr	r2, [pc, #84]	; (8008e9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d10c      	bne.n	8008e66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr
 8008e84:	40010000 	.word	0x40010000
 8008e88:	40010400 	.word	0x40010400
 8008e8c:	40000400 	.word	0x40000400
 8008e90:	40000800 	.word	0x40000800
 8008e94:	40000c00 	.word	0x40000c00
 8008e98:	40014000 	.word	0x40014000
 8008e9c:	40001800 	.word	0x40001800

08008ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ea8:	bf00      	nop
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d101      	bne.n	8008eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e040      	b.n	8008f70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d106      	bne.n	8008f04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f7fb fa5e 	bl	80043c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2224      	movs	r2, #36	; 0x24
 8008f08:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f022 0201 	bic.w	r2, r2, #1
 8008f18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fc20 	bl	8009760 <UART_SetConfig>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d101      	bne.n	8008f2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e022      	b.n	8008f70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d002      	beq.n	8008f38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fe76 	bl	8009c24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689a      	ldr	r2, [r3, #8]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f042 0201 	orr.w	r2, r2, #1
 8008f66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fefd 	bl	8009d68 <UART_CheckIdleState>
 8008f6e:	4603      	mov	r3, r0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b08a      	sub	sp, #40	; 0x28
 8008f7c:	af02      	add	r7, sp, #8
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	603b      	str	r3, [r7, #0]
 8008f84:	4613      	mov	r3, r2
 8008f86:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f8c:	2b20      	cmp	r3, #32
 8008f8e:	f040 8081 	bne.w	8009094 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d002      	beq.n	8008f9e <HAL_UART_Transmit+0x26>
 8008f98:	88fb      	ldrh	r3, [r7, #6]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d101      	bne.n	8008fa2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e079      	b.n	8009096 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d101      	bne.n	8008fb0 <HAL_UART_Transmit+0x38>
 8008fac:	2302      	movs	r3, #2
 8008fae:	e072      	b.n	8009096 <HAL_UART_Transmit+0x11e>
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2221      	movs	r2, #33	; 0x21
 8008fc4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008fc6:	f7fb fb97 	bl	80046f8 <HAL_GetTick>
 8008fca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	88fa      	ldrh	r2, [r7, #6]
 8008fd0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	88fa      	ldrh	r2, [r7, #6]
 8008fd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fe4:	d108      	bne.n	8008ff8 <HAL_UART_Transmit+0x80>
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d104      	bne.n	8008ff8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	61bb      	str	r3, [r7, #24]
 8008ff6:	e003      	b.n	8009000 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009008:	e02c      	b.n	8009064 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	9300      	str	r3, [sp, #0]
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	2200      	movs	r2, #0
 8009012:	2180      	movs	r1, #128	; 0x80
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f000 feda 	bl	8009dce <UART_WaitOnFlagUntilTimeout>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d001      	beq.n	8009024 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009020:	2303      	movs	r3, #3
 8009022:	e038      	b.n	8009096 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d10b      	bne.n	8009042 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	881b      	ldrh	r3, [r3, #0]
 800902e:	461a      	mov	r2, r3
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009038:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	3302      	adds	r3, #2
 800903e:	61bb      	str	r3, [r7, #24]
 8009040:	e007      	b.n	8009052 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	781a      	ldrb	r2, [r3, #0]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	3301      	adds	r3, #1
 8009050:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009058:	b29b      	uxth	r3, r3
 800905a:	3b01      	subs	r3, #1
 800905c:	b29a      	uxth	r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800906a:	b29b      	uxth	r3, r3
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1cc      	bne.n	800900a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	9300      	str	r3, [sp, #0]
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	2200      	movs	r2, #0
 8009078:	2140      	movs	r1, #64	; 0x40
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f000 fea7 	bl	8009dce <UART_WaitOnFlagUntilTimeout>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8009086:	2303      	movs	r3, #3
 8009088:	e005      	b.n	8009096 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2220      	movs	r2, #32
 800908e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009090:	2300      	movs	r3, #0
 8009092:	e000      	b.n	8009096 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8009094:	2302      	movs	r3, #2
  }
}
 8009096:	4618      	mov	r0, r3
 8009098:	3720      	adds	r7, #32
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b08a      	sub	sp, #40	; 0x28
 80090a2:	af02      	add	r7, sp, #8
 80090a4:	60f8      	str	r0, [r7, #12]
 80090a6:	60b9      	str	r1, [r7, #8]
 80090a8:	603b      	str	r3, [r7, #0]
 80090aa:	4613      	mov	r3, r2
 80090ac:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090b2:	2b20      	cmp	r3, #32
 80090b4:	f040 80be 	bne.w	8009234 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d002      	beq.n	80090c4 <HAL_UART_Receive+0x26>
 80090be:	88fb      	ldrh	r3, [r7, #6]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d101      	bne.n	80090c8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e0b6      	b.n	8009236 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d101      	bne.n	80090d6 <HAL_UART_Receive+0x38>
 80090d2:	2302      	movs	r3, #2
 80090d4:	e0af      	b.n	8009236 <HAL_UART_Receive+0x198>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2222      	movs	r2, #34	; 0x22
 80090ea:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80090f2:	f7fb fb01 	bl	80046f8 <HAL_GetTick>
 80090f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	88fa      	ldrh	r2, [r7, #6]
 80090fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	88fa      	ldrh	r2, [r7, #6]
 8009104:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009110:	d10e      	bne.n	8009130 <HAL_UART_Receive+0x92>
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d105      	bne.n	8009126 <HAL_UART_Receive+0x88>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009120:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009124:	e02d      	b.n	8009182 <HAL_UART_Receive+0xe4>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	22ff      	movs	r2, #255	; 0xff
 800912a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800912e:	e028      	b.n	8009182 <HAL_UART_Receive+0xe4>
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10d      	bne.n	8009154 <HAL_UART_Receive+0xb6>
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d104      	bne.n	800914a <HAL_UART_Receive+0xac>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	22ff      	movs	r2, #255	; 0xff
 8009144:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009148:	e01b      	b.n	8009182 <HAL_UART_Receive+0xe4>
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	227f      	movs	r2, #127	; 0x7f
 800914e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009152:	e016      	b.n	8009182 <HAL_UART_Receive+0xe4>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800915c:	d10d      	bne.n	800917a <HAL_UART_Receive+0xdc>
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d104      	bne.n	8009170 <HAL_UART_Receive+0xd2>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	227f      	movs	r2, #127	; 0x7f
 800916a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800916e:	e008      	b.n	8009182 <HAL_UART_Receive+0xe4>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	223f      	movs	r2, #63	; 0x3f
 8009174:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009178:	e003      	b.n	8009182 <HAL_UART_Receive+0xe4>
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009188:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009192:	d108      	bne.n	80091a6 <HAL_UART_Receive+0x108>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d104      	bne.n	80091a6 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800919c:	2300      	movs	r3, #0
 800919e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	61bb      	str	r3, [r7, #24]
 80091a4:	e003      	b.n	80091ae <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091aa:	2300      	movs	r3, #0
 80091ac:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80091b6:	e032      	b.n	800921e <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	2200      	movs	r2, #0
 80091c0:	2120      	movs	r1, #32
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f000 fe03 	bl	8009dce <UART_WaitOnFlagUntilTimeout>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d001      	beq.n	80091d2 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80091ce:	2303      	movs	r3, #3
 80091d0:	e031      	b.n	8009236 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10c      	bne.n	80091f2 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091de:	b29a      	uxth	r2, r3
 80091e0:	8a7b      	ldrh	r3, [r7, #18]
 80091e2:	4013      	ands	r3, r2
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	3302      	adds	r3, #2
 80091ee:	61bb      	str	r3, [r7, #24]
 80091f0:	e00c      	b.n	800920c <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f8:	b2da      	uxtb	r2, r3
 80091fa:	8a7b      	ldrh	r3, [r7, #18]
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	4013      	ands	r3, r2
 8009200:	b2da      	uxtb	r2, r3
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	3301      	adds	r3, #1
 800920a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009212:	b29b      	uxth	r3, r3
 8009214:	3b01      	subs	r3, #1
 8009216:	b29a      	uxth	r2, r3
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009224:	b29b      	uxth	r3, r3
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1c6      	bne.n	80091b8 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2220      	movs	r2, #32
 800922e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009230:	2300      	movs	r3, #0
 8009232:	e000      	b.n	8009236 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8009234:	2302      	movs	r3, #2
  }
}
 8009236:	4618      	mov	r0, r3
 8009238:	3720      	adds	r7, #32
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b084      	sub	sp, #16
 8009242:	af00      	add	r7, sp, #0
 8009244:	60f8      	str	r0, [r7, #12]
 8009246:	60b9      	str	r1, [r7, #8]
 8009248:	4613      	mov	r3, r2
 800924a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009250:	2b20      	cmp	r3, #32
 8009252:	d12c      	bne.n	80092ae <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d002      	beq.n	8009260 <HAL_UART_Receive_IT+0x22>
 800925a:	88fb      	ldrh	r3, [r7, #6]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d101      	bne.n	8009264 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	e025      	b.n	80092b0 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800926a:	2b01      	cmp	r3, #1
 800926c:	d101      	bne.n	8009272 <HAL_UART_Receive_IT+0x34>
 800926e:	2302      	movs	r3, #2
 8009270:	e01e      	b.n	80092b0 <HAL_UART_Receive_IT+0x72>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2201      	movs	r2, #1
 8009276:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800928a:	2b00      	cmp	r3, #0
 800928c:	d007      	beq.n	800929e <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800929c:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800929e:	88fb      	ldrh	r3, [r7, #6]
 80092a0:	461a      	mov	r2, r3
 80092a2:	68b9      	ldr	r1, [r7, #8]
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f000 fe0f 	bl	8009ec8 <UART_Start_Receive_IT>
 80092aa:	4603      	mov	r3, r0
 80092ac:	e000      	b.n	80092b0 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 80092ae:	2302      	movs	r3, #2
  }
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	4613      	mov	r3, r2
 80092c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092ca:	2b20      	cmp	r3, #32
 80092cc:	d12c      	bne.n	8009328 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d002      	beq.n	80092da <HAL_UART_Receive_DMA+0x22>
 80092d4:	88fb      	ldrh	r3, [r7, #6]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d101      	bne.n	80092de <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e025      	b.n	800932a <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d101      	bne.n	80092ec <HAL_UART_Receive_DMA+0x34>
 80092e8:	2302      	movs	r3, #2
 80092ea:	e01e      	b.n	800932a <HAL_UART_Receive_DMA+0x72>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2200      	movs	r2, #0
 80092f8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d007      	beq.n	8009318 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009316:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009318:	88fb      	ldrh	r3, [r7, #6]
 800931a:	461a      	mov	r2, r3
 800931c:	68b9      	ldr	r1, [r7, #8]
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f000 fe5a 	bl	8009fd8 <UART_Start_Receive_DMA>
 8009324:	4603      	mov	r3, r0
 8009326:	e000      	b.n	800932a <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8009328:	2302      	movs	r3, #2
  }
}
 800932a:	4618      	mov	r0, r3
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
	...

08009334 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b088      	sub	sp, #32
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	69db      	ldr	r3, [r3, #28]
 8009342:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009354:	69fa      	ldr	r2, [r7, #28]
 8009356:	f640 030f 	movw	r3, #2063	; 0x80f
 800935a:	4013      	ands	r3, r2
 800935c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d113      	bne.n	800938c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	f003 0320 	and.w	r3, r3, #32
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00e      	beq.n	800938c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	f003 0320 	and.w	r3, r3, #32
 8009374:	2b00      	cmp	r3, #0
 8009376:	d009      	beq.n	800938c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800937c:	2b00      	cmp	r3, #0
 800937e:	f000 81b9 	beq.w	80096f4 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	4798      	blx	r3
      }
      return;
 800938a:	e1b3      	b.n	80096f4 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	2b00      	cmp	r3, #0
 8009390:	f000 80e3 	beq.w	800955a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	f003 0301 	and.w	r3, r3, #1
 800939a:	2b00      	cmp	r3, #0
 800939c:	d105      	bne.n	80093aa <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800939e:	69ba      	ldr	r2, [r7, #24]
 80093a0:	4ba5      	ldr	r3, [pc, #660]	; (8009638 <HAL_UART_IRQHandler+0x304>)
 80093a2:	4013      	ands	r3, r2
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f000 80d8 	beq.w	800955a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	f003 0301 	and.w	r3, r3, #1
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d010      	beq.n	80093d6 <HAL_UART_IRQHandler+0xa2>
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00b      	beq.n	80093d6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2201      	movs	r2, #1
 80093c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093cc:	f043 0201 	orr.w	r2, r3, #1
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	f003 0302 	and.w	r3, r3, #2
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d010      	beq.n	8009402 <HAL_UART_IRQHandler+0xce>
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	f003 0301 	and.w	r3, r3, #1
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00b      	beq.n	8009402 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2202      	movs	r2, #2
 80093f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093f8:	f043 0204 	orr.w	r2, r3, #4
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	f003 0304 	and.w	r3, r3, #4
 8009408:	2b00      	cmp	r3, #0
 800940a:	d010      	beq.n	800942e <HAL_UART_IRQHandler+0xfa>
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	f003 0301 	and.w	r3, r3, #1
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00b      	beq.n	800942e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2204      	movs	r2, #4
 800941c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009424:	f043 0202 	orr.w	r2, r3, #2
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	f003 0308 	and.w	r3, r3, #8
 8009434:	2b00      	cmp	r3, #0
 8009436:	d015      	beq.n	8009464 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	f003 0320 	and.w	r3, r3, #32
 800943e:	2b00      	cmp	r3, #0
 8009440:	d104      	bne.n	800944c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00b      	beq.n	8009464 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2208      	movs	r2, #8
 8009452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800945a:	f043 0208 	orr.w	r2, r3, #8
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800946a:	2b00      	cmp	r3, #0
 800946c:	d011      	beq.n	8009492 <HAL_UART_IRQHandler+0x15e>
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00c      	beq.n	8009492 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009480:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009488:	f043 0220 	orr.w	r2, r3, #32
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009498:	2b00      	cmp	r3, #0
 800949a:	f000 812d 	beq.w	80096f8 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	f003 0320 	and.w	r3, r3, #32
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00c      	beq.n	80094c2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	f003 0320 	and.w	r3, r3, #32
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d007      	beq.n	80094c2 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d003      	beq.n	80094c2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094c8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d4:	2b40      	cmp	r3, #64	; 0x40
 80094d6:	d004      	beq.n	80094e2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d031      	beq.n	8009546 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 fdf9 	bl	800a0da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f2:	2b40      	cmp	r3, #64	; 0x40
 80094f4:	d123      	bne.n	800953e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	689a      	ldr	r2, [r3, #8]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009504:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800950a:	2b00      	cmp	r3, #0
 800950c:	d013      	beq.n	8009536 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009512:	4a4a      	ldr	r2, [pc, #296]	; (800963c <HAL_UART_IRQHandler+0x308>)
 8009514:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800951a:	4618      	mov	r0, r3
 800951c:	f7fb fbac 	bl	8004c78 <HAL_DMA_Abort_IT>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d017      	beq.n	8009556 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800952a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009530:	4610      	mov	r0, r2
 8009532:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009534:	e00f      	b.n	8009556 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f8fc 	bl	8009734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800953c:	e00b      	b.n	8009556 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f8f8 	bl	8009734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009544:	e007      	b.n	8009556 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f8f4 	bl	8009734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009554:	e0d0      	b.n	80096f8 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009556:	bf00      	nop
    return;
 8009558:	e0ce      	b.n	80096f8 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800955e:	2b01      	cmp	r3, #1
 8009560:	f040 80a7 	bne.w	80096b2 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	f003 0310 	and.w	r3, r3, #16
 800956a:	2b00      	cmp	r3, #0
 800956c:	f000 80a1 	beq.w	80096b2 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	f003 0310 	and.w	r3, r3, #16
 8009576:	2b00      	cmp	r3, #0
 8009578:	f000 809b 	beq.w	80096b2 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2210      	movs	r2, #16
 8009582:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800958e:	2b40      	cmp	r3, #64	; 0x40
 8009590:	d156      	bne.n	8009640 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800959c:	893b      	ldrh	r3, [r7, #8]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	f000 80ac 	beq.w	80096fc <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80095aa:	893a      	ldrh	r2, [r7, #8]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	f080 80a5 	bcs.w	80096fc <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	893a      	ldrh	r2, [r7, #8]
 80095b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095be:	69db      	ldr	r3, [r3, #28]
 80095c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095c4:	d02a      	beq.n	800961c <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80095d4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	689a      	ldr	r2, [r3, #8]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f022 0201 	bic.w	r2, r2, #1
 80095e4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	689a      	ldr	r2, [r3, #8]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095f4:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2220      	movs	r2, #32
 80095fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f022 0210 	bic.w	r2, r2, #16
 8009610:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009616:	4618      	mov	r0, r3
 8009618:	f7fb fabe 	bl	8004b98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009628:	b29b      	uxth	r3, r3
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	b29b      	uxth	r3, r3
 800962e:	4619      	mov	r1, r3
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f889 	bl	8009748 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009636:	e061      	b.n	80096fc <HAL_UART_IRQHandler+0x3c8>
 8009638:	04000120 	.word	0x04000120
 800963c:	0800a281 	.word	0x0800a281
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800964c:	b29b      	uxth	r3, r3
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009658:	b29b      	uxth	r3, r3
 800965a:	2b00      	cmp	r3, #0
 800965c:	d050      	beq.n	8009700 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 800965e:	897b      	ldrh	r3, [r7, #10]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d04d      	beq.n	8009700 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009672:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	689a      	ldr	r2, [r3, #8]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f022 0201 	bic.w	r2, r2, #1
 8009682:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2220      	movs	r2, #32
 8009688:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f022 0210 	bic.w	r2, r2, #16
 80096a4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80096a6:	897b      	ldrh	r3, [r7, #10]
 80096a8:	4619      	mov	r1, r3
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f84c 	bl	8009748 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80096b0:	e026      	b.n	8009700 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00d      	beq.n	80096d8 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d008      	beq.n	80096d8 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d01a      	beq.n	8009704 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	4798      	blx	r3
    }
    return;
 80096d6:	e015      	b.n	8009704 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d011      	beq.n	8009706 <HAL_UART_IRQHandler+0x3d2>
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00c      	beq.n	8009706 <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fddd 	bl	800a2ac <UART_EndTransmit_IT>
    return;
 80096f2:	e008      	b.n	8009706 <HAL_UART_IRQHandler+0x3d2>
      return;
 80096f4:	bf00      	nop
 80096f6:	e006      	b.n	8009706 <HAL_UART_IRQHandler+0x3d2>
    return;
 80096f8:	bf00      	nop
 80096fa:	e004      	b.n	8009706 <HAL_UART_IRQHandler+0x3d2>
      return;
 80096fc:	bf00      	nop
 80096fe:	e002      	b.n	8009706 <HAL_UART_IRQHandler+0x3d2>
      return;
 8009700:	bf00      	nop
 8009702:	e000      	b.n	8009706 <HAL_UART_IRQHandler+0x3d2>
    return;
 8009704:	bf00      	nop
  }

}
 8009706:	3720      	adds	r7, #32
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800973c:	bf00      	nop
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	460b      	mov	r3, r1
 8009752:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009754:	bf00      	nop
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b088      	sub	sp, #32
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009768:	2300      	movs	r3, #0
 800976a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	689a      	ldr	r2, [r3, #8]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	691b      	ldr	r3, [r3, #16]
 8009774:	431a      	orrs	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	695b      	ldr	r3, [r3, #20]
 800977a:	431a      	orrs	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	69db      	ldr	r3, [r3, #28]
 8009780:	4313      	orrs	r3, r2
 8009782:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	4ba7      	ldr	r3, [pc, #668]	; (8009a28 <UART_SetConfig+0x2c8>)
 800978c:	4013      	ands	r3, r2
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	6812      	ldr	r2, [r2, #0]
 8009792:	6979      	ldr	r1, [r7, #20]
 8009794:	430b      	orrs	r3, r1
 8009796:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	68da      	ldr	r2, [r3, #12]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	430a      	orrs	r2, r1
 80097ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	699b      	ldr	r3, [r3, #24]
 80097b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6a1b      	ldr	r3, [r3, #32]
 80097b8:	697a      	ldr	r2, [r7, #20]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	697a      	ldr	r2, [r7, #20]
 80097ce:	430a      	orrs	r2, r1
 80097d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a95      	ldr	r2, [pc, #596]	; (8009a2c <UART_SetConfig+0x2cc>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d120      	bne.n	800981e <UART_SetConfig+0xbe>
 80097dc:	4b94      	ldr	r3, [pc, #592]	; (8009a30 <UART_SetConfig+0x2d0>)
 80097de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097e2:	f003 0303 	and.w	r3, r3, #3
 80097e6:	2b03      	cmp	r3, #3
 80097e8:	d816      	bhi.n	8009818 <UART_SetConfig+0xb8>
 80097ea:	a201      	add	r2, pc, #4	; (adr r2, 80097f0 <UART_SetConfig+0x90>)
 80097ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f0:	08009801 	.word	0x08009801
 80097f4:	0800980d 	.word	0x0800980d
 80097f8:	08009807 	.word	0x08009807
 80097fc:	08009813 	.word	0x08009813
 8009800:	2301      	movs	r3, #1
 8009802:	77fb      	strb	r3, [r7, #31]
 8009804:	e14f      	b.n	8009aa6 <UART_SetConfig+0x346>
 8009806:	2302      	movs	r3, #2
 8009808:	77fb      	strb	r3, [r7, #31]
 800980a:	e14c      	b.n	8009aa6 <UART_SetConfig+0x346>
 800980c:	2304      	movs	r3, #4
 800980e:	77fb      	strb	r3, [r7, #31]
 8009810:	e149      	b.n	8009aa6 <UART_SetConfig+0x346>
 8009812:	2308      	movs	r3, #8
 8009814:	77fb      	strb	r3, [r7, #31]
 8009816:	e146      	b.n	8009aa6 <UART_SetConfig+0x346>
 8009818:	2310      	movs	r3, #16
 800981a:	77fb      	strb	r3, [r7, #31]
 800981c:	e143      	b.n	8009aa6 <UART_SetConfig+0x346>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a84      	ldr	r2, [pc, #528]	; (8009a34 <UART_SetConfig+0x2d4>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d132      	bne.n	800988e <UART_SetConfig+0x12e>
 8009828:	4b81      	ldr	r3, [pc, #516]	; (8009a30 <UART_SetConfig+0x2d0>)
 800982a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800982e:	f003 030c 	and.w	r3, r3, #12
 8009832:	2b0c      	cmp	r3, #12
 8009834:	d828      	bhi.n	8009888 <UART_SetConfig+0x128>
 8009836:	a201      	add	r2, pc, #4	; (adr r2, 800983c <UART_SetConfig+0xdc>)
 8009838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800983c:	08009871 	.word	0x08009871
 8009840:	08009889 	.word	0x08009889
 8009844:	08009889 	.word	0x08009889
 8009848:	08009889 	.word	0x08009889
 800984c:	0800987d 	.word	0x0800987d
 8009850:	08009889 	.word	0x08009889
 8009854:	08009889 	.word	0x08009889
 8009858:	08009889 	.word	0x08009889
 800985c:	08009877 	.word	0x08009877
 8009860:	08009889 	.word	0x08009889
 8009864:	08009889 	.word	0x08009889
 8009868:	08009889 	.word	0x08009889
 800986c:	08009883 	.word	0x08009883
 8009870:	2300      	movs	r3, #0
 8009872:	77fb      	strb	r3, [r7, #31]
 8009874:	e117      	b.n	8009aa6 <UART_SetConfig+0x346>
 8009876:	2302      	movs	r3, #2
 8009878:	77fb      	strb	r3, [r7, #31]
 800987a:	e114      	b.n	8009aa6 <UART_SetConfig+0x346>
 800987c:	2304      	movs	r3, #4
 800987e:	77fb      	strb	r3, [r7, #31]
 8009880:	e111      	b.n	8009aa6 <UART_SetConfig+0x346>
 8009882:	2308      	movs	r3, #8
 8009884:	77fb      	strb	r3, [r7, #31]
 8009886:	e10e      	b.n	8009aa6 <UART_SetConfig+0x346>
 8009888:	2310      	movs	r3, #16
 800988a:	77fb      	strb	r3, [r7, #31]
 800988c:	e10b      	b.n	8009aa6 <UART_SetConfig+0x346>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a69      	ldr	r2, [pc, #420]	; (8009a38 <UART_SetConfig+0x2d8>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d120      	bne.n	80098da <UART_SetConfig+0x17a>
 8009898:	4b65      	ldr	r3, [pc, #404]	; (8009a30 <UART_SetConfig+0x2d0>)
 800989a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800989e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80098a2:	2b30      	cmp	r3, #48	; 0x30
 80098a4:	d013      	beq.n	80098ce <UART_SetConfig+0x16e>
 80098a6:	2b30      	cmp	r3, #48	; 0x30
 80098a8:	d814      	bhi.n	80098d4 <UART_SetConfig+0x174>
 80098aa:	2b20      	cmp	r3, #32
 80098ac:	d009      	beq.n	80098c2 <UART_SetConfig+0x162>
 80098ae:	2b20      	cmp	r3, #32
 80098b0:	d810      	bhi.n	80098d4 <UART_SetConfig+0x174>
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d002      	beq.n	80098bc <UART_SetConfig+0x15c>
 80098b6:	2b10      	cmp	r3, #16
 80098b8:	d006      	beq.n	80098c8 <UART_SetConfig+0x168>
 80098ba:	e00b      	b.n	80098d4 <UART_SetConfig+0x174>
 80098bc:	2300      	movs	r3, #0
 80098be:	77fb      	strb	r3, [r7, #31]
 80098c0:	e0f1      	b.n	8009aa6 <UART_SetConfig+0x346>
 80098c2:	2302      	movs	r3, #2
 80098c4:	77fb      	strb	r3, [r7, #31]
 80098c6:	e0ee      	b.n	8009aa6 <UART_SetConfig+0x346>
 80098c8:	2304      	movs	r3, #4
 80098ca:	77fb      	strb	r3, [r7, #31]
 80098cc:	e0eb      	b.n	8009aa6 <UART_SetConfig+0x346>
 80098ce:	2308      	movs	r3, #8
 80098d0:	77fb      	strb	r3, [r7, #31]
 80098d2:	e0e8      	b.n	8009aa6 <UART_SetConfig+0x346>
 80098d4:	2310      	movs	r3, #16
 80098d6:	77fb      	strb	r3, [r7, #31]
 80098d8:	e0e5      	b.n	8009aa6 <UART_SetConfig+0x346>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a57      	ldr	r2, [pc, #348]	; (8009a3c <UART_SetConfig+0x2dc>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d120      	bne.n	8009926 <UART_SetConfig+0x1c6>
 80098e4:	4b52      	ldr	r3, [pc, #328]	; (8009a30 <UART_SetConfig+0x2d0>)
 80098e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80098ee:	2bc0      	cmp	r3, #192	; 0xc0
 80098f0:	d013      	beq.n	800991a <UART_SetConfig+0x1ba>
 80098f2:	2bc0      	cmp	r3, #192	; 0xc0
 80098f4:	d814      	bhi.n	8009920 <UART_SetConfig+0x1c0>
 80098f6:	2b80      	cmp	r3, #128	; 0x80
 80098f8:	d009      	beq.n	800990e <UART_SetConfig+0x1ae>
 80098fa:	2b80      	cmp	r3, #128	; 0x80
 80098fc:	d810      	bhi.n	8009920 <UART_SetConfig+0x1c0>
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d002      	beq.n	8009908 <UART_SetConfig+0x1a8>
 8009902:	2b40      	cmp	r3, #64	; 0x40
 8009904:	d006      	beq.n	8009914 <UART_SetConfig+0x1b4>
 8009906:	e00b      	b.n	8009920 <UART_SetConfig+0x1c0>
 8009908:	2300      	movs	r3, #0
 800990a:	77fb      	strb	r3, [r7, #31]
 800990c:	e0cb      	b.n	8009aa6 <UART_SetConfig+0x346>
 800990e:	2302      	movs	r3, #2
 8009910:	77fb      	strb	r3, [r7, #31]
 8009912:	e0c8      	b.n	8009aa6 <UART_SetConfig+0x346>
 8009914:	2304      	movs	r3, #4
 8009916:	77fb      	strb	r3, [r7, #31]
 8009918:	e0c5      	b.n	8009aa6 <UART_SetConfig+0x346>
 800991a:	2308      	movs	r3, #8
 800991c:	77fb      	strb	r3, [r7, #31]
 800991e:	e0c2      	b.n	8009aa6 <UART_SetConfig+0x346>
 8009920:	2310      	movs	r3, #16
 8009922:	77fb      	strb	r3, [r7, #31]
 8009924:	e0bf      	b.n	8009aa6 <UART_SetConfig+0x346>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a45      	ldr	r2, [pc, #276]	; (8009a40 <UART_SetConfig+0x2e0>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d125      	bne.n	800997c <UART_SetConfig+0x21c>
 8009930:	4b3f      	ldr	r3, [pc, #252]	; (8009a30 <UART_SetConfig+0x2d0>)
 8009932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800993a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800993e:	d017      	beq.n	8009970 <UART_SetConfig+0x210>
 8009940:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009944:	d817      	bhi.n	8009976 <UART_SetConfig+0x216>
 8009946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800994a:	d00b      	beq.n	8009964 <UART_SetConfig+0x204>
 800994c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009950:	d811      	bhi.n	8009976 <UART_SetConfig+0x216>
 8009952:	2b00      	cmp	r3, #0
 8009954:	d003      	beq.n	800995e <UART_SetConfig+0x1fe>
 8009956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800995a:	d006      	beq.n	800996a <UART_SetConfig+0x20a>
 800995c:	e00b      	b.n	8009976 <UART_SetConfig+0x216>
 800995e:	2300      	movs	r3, #0
 8009960:	77fb      	strb	r3, [r7, #31]
 8009962:	e0a0      	b.n	8009aa6 <UART_SetConfig+0x346>
 8009964:	2302      	movs	r3, #2
 8009966:	77fb      	strb	r3, [r7, #31]
 8009968:	e09d      	b.n	8009aa6 <UART_SetConfig+0x346>
 800996a:	2304      	movs	r3, #4
 800996c:	77fb      	strb	r3, [r7, #31]
 800996e:	e09a      	b.n	8009aa6 <UART_SetConfig+0x346>
 8009970:	2308      	movs	r3, #8
 8009972:	77fb      	strb	r3, [r7, #31]
 8009974:	e097      	b.n	8009aa6 <UART_SetConfig+0x346>
 8009976:	2310      	movs	r3, #16
 8009978:	77fb      	strb	r3, [r7, #31]
 800997a:	e094      	b.n	8009aa6 <UART_SetConfig+0x346>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a30      	ldr	r2, [pc, #192]	; (8009a44 <UART_SetConfig+0x2e4>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d125      	bne.n	80099d2 <UART_SetConfig+0x272>
 8009986:	4b2a      	ldr	r3, [pc, #168]	; (8009a30 <UART_SetConfig+0x2d0>)
 8009988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800998c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009990:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009994:	d017      	beq.n	80099c6 <UART_SetConfig+0x266>
 8009996:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800999a:	d817      	bhi.n	80099cc <UART_SetConfig+0x26c>
 800999c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099a0:	d00b      	beq.n	80099ba <UART_SetConfig+0x25a>
 80099a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099a6:	d811      	bhi.n	80099cc <UART_SetConfig+0x26c>
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d003      	beq.n	80099b4 <UART_SetConfig+0x254>
 80099ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099b0:	d006      	beq.n	80099c0 <UART_SetConfig+0x260>
 80099b2:	e00b      	b.n	80099cc <UART_SetConfig+0x26c>
 80099b4:	2301      	movs	r3, #1
 80099b6:	77fb      	strb	r3, [r7, #31]
 80099b8:	e075      	b.n	8009aa6 <UART_SetConfig+0x346>
 80099ba:	2302      	movs	r3, #2
 80099bc:	77fb      	strb	r3, [r7, #31]
 80099be:	e072      	b.n	8009aa6 <UART_SetConfig+0x346>
 80099c0:	2304      	movs	r3, #4
 80099c2:	77fb      	strb	r3, [r7, #31]
 80099c4:	e06f      	b.n	8009aa6 <UART_SetConfig+0x346>
 80099c6:	2308      	movs	r3, #8
 80099c8:	77fb      	strb	r3, [r7, #31]
 80099ca:	e06c      	b.n	8009aa6 <UART_SetConfig+0x346>
 80099cc:	2310      	movs	r3, #16
 80099ce:	77fb      	strb	r3, [r7, #31]
 80099d0:	e069      	b.n	8009aa6 <UART_SetConfig+0x346>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a1c      	ldr	r2, [pc, #112]	; (8009a48 <UART_SetConfig+0x2e8>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d137      	bne.n	8009a4c <UART_SetConfig+0x2ec>
 80099dc:	4b14      	ldr	r3, [pc, #80]	; (8009a30 <UART_SetConfig+0x2d0>)
 80099de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099e2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80099e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80099ea:	d017      	beq.n	8009a1c <UART_SetConfig+0x2bc>
 80099ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80099f0:	d817      	bhi.n	8009a22 <UART_SetConfig+0x2c2>
 80099f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099f6:	d00b      	beq.n	8009a10 <UART_SetConfig+0x2b0>
 80099f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099fc:	d811      	bhi.n	8009a22 <UART_SetConfig+0x2c2>
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d003      	beq.n	8009a0a <UART_SetConfig+0x2aa>
 8009a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a06:	d006      	beq.n	8009a16 <UART_SetConfig+0x2b6>
 8009a08:	e00b      	b.n	8009a22 <UART_SetConfig+0x2c2>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	77fb      	strb	r3, [r7, #31]
 8009a0e:	e04a      	b.n	8009aa6 <UART_SetConfig+0x346>
 8009a10:	2302      	movs	r3, #2
 8009a12:	77fb      	strb	r3, [r7, #31]
 8009a14:	e047      	b.n	8009aa6 <UART_SetConfig+0x346>
 8009a16:	2304      	movs	r3, #4
 8009a18:	77fb      	strb	r3, [r7, #31]
 8009a1a:	e044      	b.n	8009aa6 <UART_SetConfig+0x346>
 8009a1c:	2308      	movs	r3, #8
 8009a1e:	77fb      	strb	r3, [r7, #31]
 8009a20:	e041      	b.n	8009aa6 <UART_SetConfig+0x346>
 8009a22:	2310      	movs	r3, #16
 8009a24:	77fb      	strb	r3, [r7, #31]
 8009a26:	e03e      	b.n	8009aa6 <UART_SetConfig+0x346>
 8009a28:	efff69f3 	.word	0xefff69f3
 8009a2c:	40011000 	.word	0x40011000
 8009a30:	40023800 	.word	0x40023800
 8009a34:	40004400 	.word	0x40004400
 8009a38:	40004800 	.word	0x40004800
 8009a3c:	40004c00 	.word	0x40004c00
 8009a40:	40005000 	.word	0x40005000
 8009a44:	40011400 	.word	0x40011400
 8009a48:	40007800 	.word	0x40007800
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a71      	ldr	r2, [pc, #452]	; (8009c18 <UART_SetConfig+0x4b8>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d125      	bne.n	8009aa2 <UART_SetConfig+0x342>
 8009a56:	4b71      	ldr	r3, [pc, #452]	; (8009c1c <UART_SetConfig+0x4bc>)
 8009a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009a60:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009a64:	d017      	beq.n	8009a96 <UART_SetConfig+0x336>
 8009a66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009a6a:	d817      	bhi.n	8009a9c <UART_SetConfig+0x33c>
 8009a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a70:	d00b      	beq.n	8009a8a <UART_SetConfig+0x32a>
 8009a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a76:	d811      	bhi.n	8009a9c <UART_SetConfig+0x33c>
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d003      	beq.n	8009a84 <UART_SetConfig+0x324>
 8009a7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a80:	d006      	beq.n	8009a90 <UART_SetConfig+0x330>
 8009a82:	e00b      	b.n	8009a9c <UART_SetConfig+0x33c>
 8009a84:	2300      	movs	r3, #0
 8009a86:	77fb      	strb	r3, [r7, #31]
 8009a88:	e00d      	b.n	8009aa6 <UART_SetConfig+0x346>
 8009a8a:	2302      	movs	r3, #2
 8009a8c:	77fb      	strb	r3, [r7, #31]
 8009a8e:	e00a      	b.n	8009aa6 <UART_SetConfig+0x346>
 8009a90:	2304      	movs	r3, #4
 8009a92:	77fb      	strb	r3, [r7, #31]
 8009a94:	e007      	b.n	8009aa6 <UART_SetConfig+0x346>
 8009a96:	2308      	movs	r3, #8
 8009a98:	77fb      	strb	r3, [r7, #31]
 8009a9a:	e004      	b.n	8009aa6 <UART_SetConfig+0x346>
 8009a9c:	2310      	movs	r3, #16
 8009a9e:	77fb      	strb	r3, [r7, #31]
 8009aa0:	e001      	b.n	8009aa6 <UART_SetConfig+0x346>
 8009aa2:	2310      	movs	r3, #16
 8009aa4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	69db      	ldr	r3, [r3, #28]
 8009aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009aae:	d15b      	bne.n	8009b68 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8009ab0:	7ffb      	ldrb	r3, [r7, #31]
 8009ab2:	2b08      	cmp	r3, #8
 8009ab4:	d827      	bhi.n	8009b06 <UART_SetConfig+0x3a6>
 8009ab6:	a201      	add	r2, pc, #4	; (adr r2, 8009abc <UART_SetConfig+0x35c>)
 8009ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009abc:	08009ae1 	.word	0x08009ae1
 8009ac0:	08009ae9 	.word	0x08009ae9
 8009ac4:	08009af1 	.word	0x08009af1
 8009ac8:	08009b07 	.word	0x08009b07
 8009acc:	08009af7 	.word	0x08009af7
 8009ad0:	08009b07 	.word	0x08009b07
 8009ad4:	08009b07 	.word	0x08009b07
 8009ad8:	08009b07 	.word	0x08009b07
 8009adc:	08009aff 	.word	0x08009aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ae0:	f7fc ff4a 	bl	8006978 <HAL_RCC_GetPCLK1Freq>
 8009ae4:	61b8      	str	r0, [r7, #24]
        break;
 8009ae6:	e013      	b.n	8009b10 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ae8:	f7fc ff5a 	bl	80069a0 <HAL_RCC_GetPCLK2Freq>
 8009aec:	61b8      	str	r0, [r7, #24]
        break;
 8009aee:	e00f      	b.n	8009b10 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009af0:	4b4b      	ldr	r3, [pc, #300]	; (8009c20 <UART_SetConfig+0x4c0>)
 8009af2:	61bb      	str	r3, [r7, #24]
        break;
 8009af4:	e00c      	b.n	8009b10 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009af6:	f7fc fe7d 	bl	80067f4 <HAL_RCC_GetSysClockFreq>
 8009afa:	61b8      	str	r0, [r7, #24]
        break;
 8009afc:	e008      	b.n	8009b10 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b02:	61bb      	str	r3, [r7, #24]
        break;
 8009b04:	e004      	b.n	8009b10 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8009b06:	2300      	movs	r3, #0
 8009b08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	77bb      	strb	r3, [r7, #30]
        break;
 8009b0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b10:	69bb      	ldr	r3, [r7, #24]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d074      	beq.n	8009c00 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	005a      	lsls	r2, r3, #1
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	085b      	lsrs	r3, r3, #1
 8009b20:	441a      	add	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	2b0f      	cmp	r3, #15
 8009b32:	d916      	bls.n	8009b62 <UART_SetConfig+0x402>
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b3a:	d212      	bcs.n	8009b62 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	f023 030f 	bic.w	r3, r3, #15
 8009b44:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	085b      	lsrs	r3, r3, #1
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	f003 0307 	and.w	r3, r3, #7
 8009b50:	b29a      	uxth	r2, r3
 8009b52:	89fb      	ldrh	r3, [r7, #14]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	89fa      	ldrh	r2, [r7, #14]
 8009b5e:	60da      	str	r2, [r3, #12]
 8009b60:	e04e      	b.n	8009c00 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	77bb      	strb	r3, [r7, #30]
 8009b66:	e04b      	b.n	8009c00 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b68:	7ffb      	ldrb	r3, [r7, #31]
 8009b6a:	2b08      	cmp	r3, #8
 8009b6c:	d827      	bhi.n	8009bbe <UART_SetConfig+0x45e>
 8009b6e:	a201      	add	r2, pc, #4	; (adr r2, 8009b74 <UART_SetConfig+0x414>)
 8009b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b74:	08009b99 	.word	0x08009b99
 8009b78:	08009ba1 	.word	0x08009ba1
 8009b7c:	08009ba9 	.word	0x08009ba9
 8009b80:	08009bbf 	.word	0x08009bbf
 8009b84:	08009baf 	.word	0x08009baf
 8009b88:	08009bbf 	.word	0x08009bbf
 8009b8c:	08009bbf 	.word	0x08009bbf
 8009b90:	08009bbf 	.word	0x08009bbf
 8009b94:	08009bb7 	.word	0x08009bb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b98:	f7fc feee 	bl	8006978 <HAL_RCC_GetPCLK1Freq>
 8009b9c:	61b8      	str	r0, [r7, #24]
        break;
 8009b9e:	e013      	b.n	8009bc8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ba0:	f7fc fefe 	bl	80069a0 <HAL_RCC_GetPCLK2Freq>
 8009ba4:	61b8      	str	r0, [r7, #24]
        break;
 8009ba6:	e00f      	b.n	8009bc8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ba8:	4b1d      	ldr	r3, [pc, #116]	; (8009c20 <UART_SetConfig+0x4c0>)
 8009baa:	61bb      	str	r3, [r7, #24]
        break;
 8009bac:	e00c      	b.n	8009bc8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bae:	f7fc fe21 	bl	80067f4 <HAL_RCC_GetSysClockFreq>
 8009bb2:	61b8      	str	r0, [r7, #24]
        break;
 8009bb4:	e008      	b.n	8009bc8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bba:	61bb      	str	r3, [r7, #24]
        break;
 8009bbc:	e004      	b.n	8009bc8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	77bb      	strb	r3, [r7, #30]
        break;
 8009bc6:	bf00      	nop
    }

    if (pclk != 0U)
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d018      	beq.n	8009c00 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	085a      	lsrs	r2, r3, #1
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	441a      	add	r2, r3
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	2b0f      	cmp	r3, #15
 8009be8:	d908      	bls.n	8009bfc <UART_SetConfig+0x49c>
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bf0:	d204      	bcs.n	8009bfc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	693a      	ldr	r2, [r7, #16]
 8009bf8:	60da      	str	r2, [r3, #12]
 8009bfa:	e001      	b.n	8009c00 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009c0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3720      	adds	r7, #32
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	40007c00 	.word	0x40007c00
 8009c1c:	40023800 	.word	0x40023800
 8009c20:	00f42400 	.word	0x00f42400

08009c24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c30:	f003 0301 	and.w	r3, r3, #1
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00a      	beq.n	8009c4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	430a      	orrs	r2, r1
 8009c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c52:	f003 0302 	and.w	r3, r3, #2
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00a      	beq.n	8009c70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	430a      	orrs	r2, r1
 8009c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c74:	f003 0304 	and.w	r3, r3, #4
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00a      	beq.n	8009c92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	430a      	orrs	r2, r1
 8009c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c96:	f003 0308 	and.w	r3, r3, #8
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00a      	beq.n	8009cb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	430a      	orrs	r2, r1
 8009cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb8:	f003 0310 	and.w	r3, r3, #16
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00a      	beq.n	8009cd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	430a      	orrs	r2, r1
 8009cd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cda:	f003 0320 	and.w	r3, r3, #32
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00a      	beq.n	8009cf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	430a      	orrs	r2, r1
 8009cf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d01a      	beq.n	8009d3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	430a      	orrs	r2, r1
 8009d18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d22:	d10a      	bne.n	8009d3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	430a      	orrs	r2, r1
 8009d38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00a      	beq.n	8009d5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	430a      	orrs	r2, r1
 8009d5a:	605a      	str	r2, [r3, #4]
  }
}
 8009d5c:	bf00      	nop
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af02      	add	r7, sp, #8
 8009d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d78:	f7fa fcbe 	bl	80046f8 <HAL_GetTick>
 8009d7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f003 0308 	and.w	r3, r3, #8
 8009d88:	2b08      	cmp	r3, #8
 8009d8a:	d10e      	bne.n	8009daa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d90:	9300      	str	r3, [sp, #0]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 f817 	bl	8009dce <UART_WaitOnFlagUntilTimeout>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d001      	beq.n	8009daa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009da6:	2303      	movs	r3, #3
 8009da8:	e00d      	b.n	8009dc6 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2220      	movs	r2, #32
 8009dae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2220      	movs	r2, #32
 8009db4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b084      	sub	sp, #16
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	60f8      	str	r0, [r7, #12]
 8009dd6:	60b9      	str	r1, [r7, #8]
 8009dd8:	603b      	str	r3, [r7, #0]
 8009dda:	4613      	mov	r3, r2
 8009ddc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009dde:	e05e      	b.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de6:	d05a      	beq.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009de8:	f7fa fc86 	bl	80046f8 <HAL_GetTick>
 8009dec:	4602      	mov	r2, r0
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	69ba      	ldr	r2, [r7, #24]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d302      	bcc.n	8009dfe <UART_WaitOnFlagUntilTimeout+0x30>
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d11b      	bne.n	8009e36 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009e0c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	689a      	ldr	r2, [r3, #8]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f022 0201 	bic.w	r2, r2, #1
 8009e1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2220      	movs	r2, #32
 8009e22:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2220      	movs	r2, #32
 8009e28:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009e32:	2303      	movs	r3, #3
 8009e34:	e043      	b.n	8009ebe <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f003 0304 	and.w	r3, r3, #4
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d02c      	beq.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	69db      	ldr	r3, [r3, #28]
 8009e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e52:	d124      	bne.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009e6c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	689a      	ldr	r2, [r3, #8]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f022 0201 	bic.w	r2, r2, #1
 8009e7c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2220      	movs	r2, #32
 8009e82:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2220      	movs	r2, #32
 8009e88:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2220      	movs	r2, #32
 8009e8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e00f      	b.n	8009ebe <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	69da      	ldr	r2, [r3, #28]
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	4013      	ands	r3, r2
 8009ea8:	68ba      	ldr	r2, [r7, #8]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	bf0c      	ite	eq
 8009eae:	2301      	moveq	r3, #1
 8009eb0:	2300      	movne	r3, #0
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	79fb      	ldrb	r3, [r7, #7]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d091      	beq.n	8009de0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
	...

08009ec8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	88fa      	ldrh	r2, [r7, #6]
 8009ee0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	88fa      	ldrh	r2, [r7, #6]
 8009ee8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009efa:	d10e      	bne.n	8009f1a <UART_Start_Receive_IT+0x52>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d105      	bne.n	8009f10 <UART_Start_Receive_IT+0x48>
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009f0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f0e:	e02d      	b.n	8009f6c <UART_Start_Receive_IT+0xa4>
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	22ff      	movs	r2, #255	; 0xff
 8009f14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f18:	e028      	b.n	8009f6c <UART_Start_Receive_IT+0xa4>
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d10d      	bne.n	8009f3e <UART_Start_Receive_IT+0x76>
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d104      	bne.n	8009f34 <UART_Start_Receive_IT+0x6c>
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	22ff      	movs	r2, #255	; 0xff
 8009f2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f32:	e01b      	b.n	8009f6c <UART_Start_Receive_IT+0xa4>
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	227f      	movs	r2, #127	; 0x7f
 8009f38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f3c:	e016      	b.n	8009f6c <UART_Start_Receive_IT+0xa4>
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f46:	d10d      	bne.n	8009f64 <UART_Start_Receive_IT+0x9c>
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d104      	bne.n	8009f5a <UART_Start_Receive_IT+0x92>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	227f      	movs	r2, #127	; 0x7f
 8009f54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f58:	e008      	b.n	8009f6c <UART_Start_Receive_IT+0xa4>
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	223f      	movs	r2, #63	; 0x3f
 8009f5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f62:	e003      	b.n	8009f6c <UART_Start_Receive_IT+0xa4>
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2222      	movs	r2, #34	; 0x22
 8009f78:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	689a      	ldr	r2, [r3, #8]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f042 0201 	orr.w	r2, r2, #1
 8009f88:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f92:	d107      	bne.n	8009fa4 <UART_Start_Receive_IT+0xdc>
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d103      	bne.n	8009fa4 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	4a0c      	ldr	r2, [pc, #48]	; (8009fd0 <UART_Start_Receive_IT+0x108>)
 8009fa0:	665a      	str	r2, [r3, #100]	; 0x64
 8009fa2:	e002      	b.n	8009faa <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	4a0b      	ldr	r2, [pc, #44]	; (8009fd4 <UART_Start_Receive_IT+0x10c>)
 8009fa8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8009fc0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009fc2:	2300      	movs	r3, #0
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3714      	adds	r7, #20
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr
 8009fd0:	0800a3b3 	.word	0x0800a3b3
 8009fd4:	0800a2df 	.word	0x0800a2df

08009fd8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	68ba      	ldr	r2, [r7, #8]
 8009fea:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	88fa      	ldrh	r2, [r7, #6]
 8009ff0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2222      	movs	r2, #34	; 0x22
 800a000:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a006:	2b00      	cmp	r3, #0
 800a008:	d02b      	beq.n	800a062 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a00e:	4a25      	ldr	r2, [pc, #148]	; (800a0a4 <UART_Start_Receive_DMA+0xcc>)
 800a010:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a016:	4a24      	ldr	r2, [pc, #144]	; (800a0a8 <UART_Start_Receive_DMA+0xd0>)
 800a018:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a01e:	4a23      	ldr	r2, [pc, #140]	; (800a0ac <UART_Start_Receive_DMA+0xd4>)
 800a020:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a026:	2200      	movs	r2, #0
 800a028:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	3324      	adds	r3, #36	; 0x24
 800a034:	4619      	mov	r1, r3
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a03a:	461a      	mov	r2, r3
 800a03c:	88fb      	ldrh	r3, [r7, #6]
 800a03e:	f7fa fd4b 	bl	8004ad8 <HAL_DMA_Start_IT>
 800a042:	4603      	mov	r3, r0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00c      	beq.n	800a062 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2210      	movs	r2, #16
 800a04c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2220      	movs	r2, #32
 800a05c:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e01c      	b.n	800a09c <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a078:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	689a      	ldr	r2, [r3, #8]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f042 0201 	orr.w	r2, r2, #1
 800a088:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	689a      	ldr	r2, [r3, #8]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a098:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800a09a:	2300      	movs	r3, #0
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3710      	adds	r7, #16
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	0800a139 	.word	0x0800a139
 800a0a8:	0800a1cd 	.word	0x0800a1cd
 800a0ac:	0800a205 	.word	0x0800a205

0800a0b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a0c6:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2220      	movs	r2, #32
 800a0cc:	679a      	str	r2, [r3, #120]	; 0x78
}
 800a0ce:	bf00      	nop
 800a0d0:	370c      	adds	r7, #12
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr

0800a0da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b083      	sub	sp, #12
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a0f0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	689a      	ldr	r2, [r3, #8]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f022 0201 	bic.w	r2, r2, #1
 800a100:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a106:	2b01      	cmp	r3, #1
 800a108:	d107      	bne.n	800a11a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f022 0210 	bic.w	r2, r2, #16
 800a118:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2220      	movs	r2, #32
 800a11e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a12c:	bf00      	nop
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a144:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	69db      	ldr	r3, [r3, #28]
 800a14a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a14e:	d02a      	beq.n	800a1a6 <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2200      	movs	r2, #0
 800a154:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a166:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	689a      	ldr	r2, [r3, #8]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f022 0201 	bic.w	r2, r2, #1
 800a176:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	689a      	ldr	r2, [r3, #8]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a186:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2220      	movs	r2, #32
 800a18c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a192:	2b01      	cmp	r3, #1
 800a194:	d107      	bne.n	800a1a6 <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f022 0210 	bic.w	r2, r2, #16
 800a1a4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d107      	bne.n	800a1be <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f7ff fac6 	bl	8009748 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a1bc:	e002      	b.n	800a1c4 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f7f9 fa5e 	bl	8003680 <HAL_UART_RxCpltCallback>
}
 800a1c4:	bf00      	nop
 800a1c6:	3710      	adds	r7, #16
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d109      	bne.n	800a1f6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a1e8:	085b      	lsrs	r3, r3, #1
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f7ff faaa 	bl	8009748 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a1f4:	e002      	b.n	800a1fc <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f7ff fa92 	bl	8009720 <HAL_UART_RxHalfCpltCallback>
}
 800a1fc:	bf00      	nop
 800a1fe:	3710      	adds	r7, #16
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b086      	sub	sp, #24
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a210:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a216:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a21c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a228:	2b80      	cmp	r3, #128	; 0x80
 800a22a:	d109      	bne.n	800a240 <UART_DMAError+0x3c>
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	2b21      	cmp	r3, #33	; 0x21
 800a230:	d106      	bne.n	800a240 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	2200      	movs	r2, #0
 800a236:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a23a:	6978      	ldr	r0, [r7, #20]
 800a23c:	f7ff ff38 	bl	800a0b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a24a:	2b40      	cmp	r3, #64	; 0x40
 800a24c:	d109      	bne.n	800a262 <UART_DMAError+0x5e>
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2b22      	cmp	r3, #34	; 0x22
 800a252:	d106      	bne.n	800a262 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	2200      	movs	r2, #0
 800a258:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a25c:	6978      	ldr	r0, [r7, #20]
 800a25e:	f7ff ff3c 	bl	800a0da <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a268:	f043 0210 	orr.w	r2, r3, #16
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a272:	6978      	ldr	r0, [r7, #20]
 800a274:	f7ff fa5e 	bl	8009734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a278:	bf00      	nop
 800a27a:	3718      	adds	r7, #24
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2200      	movs	r2, #0
 800a292:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2200      	movs	r2, #0
 800a29a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f7ff fa48 	bl	8009734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2a4:	bf00      	nop
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2c2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2220      	movs	r2, #32
 800a2c8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f7ff fa1b 	bl	800970c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2d6:	bf00      	nop
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b084      	sub	sp, #16
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a2ec:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2f2:	2b22      	cmp	r3, #34	; 0x22
 800a2f4:	d151      	bne.n	800a39a <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fc:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a2fe:	89bb      	ldrh	r3, [r7, #12]
 800a300:	b2d9      	uxtb	r1, r3
 800a302:	89fb      	ldrh	r3, [r7, #14]
 800a304:	b2da      	uxtb	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a30a:	400a      	ands	r2, r1
 800a30c:	b2d2      	uxtb	r2, r2
 800a30e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a314:	1c5a      	adds	r2, r3, #1
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a320:	b29b      	uxth	r3, r3
 800a322:	3b01      	subs	r3, #1
 800a324:	b29a      	uxth	r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a332:	b29b      	uxth	r3, r3
 800a334:	2b00      	cmp	r3, #0
 800a336:	d138      	bne.n	800a3aa <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a346:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	689a      	ldr	r2, [r3, #8]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f022 0201 	bic.w	r2, r2, #1
 800a356:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2220      	movs	r2, #32
 800a35c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d10f      	bne.n	800a38c <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f022 0210 	bic.w	r2, r2, #16
 800a37a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a382:	4619      	mov	r1, r3
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f7ff f9df 	bl	8009748 <HAL_UARTEx_RxEventCallback>
 800a38a:	e002      	b.n	800a392 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f7f9 f977 	bl	8003680 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a398:	e007      	b.n	800a3aa <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	699a      	ldr	r2, [r3, #24]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f042 0208 	orr.w	r2, r2, #8
 800a3a8:	619a      	str	r2, [r3, #24]
}
 800a3aa:	bf00      	nop
 800a3ac:	3710      	adds	r7, #16
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b084      	sub	sp, #16
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a3c0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3c6:	2b22      	cmp	r3, #34	; 0x22
 800a3c8:	d151      	bne.n	800a46e <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3d6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800a3d8:	89ba      	ldrh	r2, [r7, #12]
 800a3da:	89fb      	ldrh	r3, [r7, #14]
 800a3dc:	4013      	ands	r3, r2
 800a3de:	b29a      	uxth	r2, r3
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3e8:	1c9a      	adds	r2, r3, #2
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a406:	b29b      	uxth	r3, r3
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d138      	bne.n	800a47e <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a41a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	689a      	ldr	r2, [r3, #8]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f022 0201 	bic.w	r2, r2, #1
 800a42a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2220      	movs	r2, #32
 800a430:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d10f      	bne.n	800a460 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f022 0210 	bic.w	r2, r2, #16
 800a44e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a456:	4619      	mov	r1, r3
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f7ff f975 	bl	8009748 <HAL_UARTEx_RxEventCallback>
 800a45e:	e002      	b.n	800a466 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f7f9 f90d 	bl	8003680 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a46c:	e007      	b.n	800a47e <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	699a      	ldr	r2, [r3, #24]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f042 0208 	orr.w	r2, r2, #8
 800a47c:	619a      	str	r2, [r3, #24]
}
 800a47e:	bf00      	nop
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
	...

0800a488 <__errno>:
 800a488:	4b01      	ldr	r3, [pc, #4]	; (800a490 <__errno+0x8>)
 800a48a:	6818      	ldr	r0, [r3, #0]
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	2000004c 	.word	0x2000004c

0800a494 <__libc_init_array>:
 800a494:	b570      	push	{r4, r5, r6, lr}
 800a496:	4d0d      	ldr	r5, [pc, #52]	; (800a4cc <__libc_init_array+0x38>)
 800a498:	4c0d      	ldr	r4, [pc, #52]	; (800a4d0 <__libc_init_array+0x3c>)
 800a49a:	1b64      	subs	r4, r4, r5
 800a49c:	10a4      	asrs	r4, r4, #2
 800a49e:	2600      	movs	r6, #0
 800a4a0:	42a6      	cmp	r6, r4
 800a4a2:	d109      	bne.n	800a4b8 <__libc_init_array+0x24>
 800a4a4:	4d0b      	ldr	r5, [pc, #44]	; (800a4d4 <__libc_init_array+0x40>)
 800a4a6:	4c0c      	ldr	r4, [pc, #48]	; (800a4d8 <__libc_init_array+0x44>)
 800a4a8:	f006 fcd0 	bl	8010e4c <_init>
 800a4ac:	1b64      	subs	r4, r4, r5
 800a4ae:	10a4      	asrs	r4, r4, #2
 800a4b0:	2600      	movs	r6, #0
 800a4b2:	42a6      	cmp	r6, r4
 800a4b4:	d105      	bne.n	800a4c2 <__libc_init_array+0x2e>
 800a4b6:	bd70      	pop	{r4, r5, r6, pc}
 800a4b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4bc:	4798      	blx	r3
 800a4be:	3601      	adds	r6, #1
 800a4c0:	e7ee      	b.n	800a4a0 <__libc_init_array+0xc>
 800a4c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4c6:	4798      	blx	r3
 800a4c8:	3601      	adds	r6, #1
 800a4ca:	e7f2      	b.n	800a4b2 <__libc_init_array+0x1e>
 800a4cc:	08011490 	.word	0x08011490
 800a4d0:	08011490 	.word	0x08011490
 800a4d4:	08011490 	.word	0x08011490
 800a4d8:	08011498 	.word	0x08011498

0800a4dc <memset>:
 800a4dc:	4402      	add	r2, r0
 800a4de:	4603      	mov	r3, r0
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d100      	bne.n	800a4e6 <memset+0xa>
 800a4e4:	4770      	bx	lr
 800a4e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ea:	e7f9      	b.n	800a4e0 <memset+0x4>

0800a4ec <printf>:
 800a4ec:	b40f      	push	{r0, r1, r2, r3}
 800a4ee:	b507      	push	{r0, r1, r2, lr}
 800a4f0:	4906      	ldr	r1, [pc, #24]	; (800a50c <printf+0x20>)
 800a4f2:	ab04      	add	r3, sp, #16
 800a4f4:	6808      	ldr	r0, [r1, #0]
 800a4f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4fa:	6881      	ldr	r1, [r0, #8]
 800a4fc:	9301      	str	r3, [sp, #4]
 800a4fe:	f000 f857 	bl	800a5b0 <_vfprintf_r>
 800a502:	b003      	add	sp, #12
 800a504:	f85d eb04 	ldr.w	lr, [sp], #4
 800a508:	b004      	add	sp, #16
 800a50a:	4770      	bx	lr
 800a50c:	2000004c 	.word	0x2000004c

0800a510 <_puts_r>:
 800a510:	b530      	push	{r4, r5, lr}
 800a512:	4605      	mov	r5, r0
 800a514:	b089      	sub	sp, #36	; 0x24
 800a516:	4608      	mov	r0, r1
 800a518:	460c      	mov	r4, r1
 800a51a:	f7f5 fe81 	bl	8000220 <strlen>
 800a51e:	4b1e      	ldr	r3, [pc, #120]	; (800a598 <_puts_r+0x88>)
 800a520:	9306      	str	r3, [sp, #24]
 800a522:	2301      	movs	r3, #1
 800a524:	e9cd 4004 	strd	r4, r0, [sp, #16]
 800a528:	9307      	str	r3, [sp, #28]
 800a52a:	4418      	add	r0, r3
 800a52c:	ab04      	add	r3, sp, #16
 800a52e:	9301      	str	r3, [sp, #4]
 800a530:	2302      	movs	r3, #2
 800a532:	9302      	str	r3, [sp, #8]
 800a534:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a536:	68ac      	ldr	r4, [r5, #8]
 800a538:	9003      	str	r0, [sp, #12]
 800a53a:	b913      	cbnz	r3, 800a542 <_puts_r+0x32>
 800a53c:	4628      	mov	r0, r5
 800a53e:	f002 fa71 	bl	800ca24 <__sinit>
 800a542:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a544:	07db      	lsls	r3, r3, #31
 800a546:	d405      	bmi.n	800a554 <_puts_r+0x44>
 800a548:	89a3      	ldrh	r3, [r4, #12]
 800a54a:	0598      	lsls	r0, r3, #22
 800a54c:	d402      	bmi.n	800a554 <_puts_r+0x44>
 800a54e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a550:	f002 fd28 	bl	800cfa4 <__retarget_lock_acquire_recursive>
 800a554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a558:	0499      	lsls	r1, r3, #18
 800a55a:	d406      	bmi.n	800a56a <_puts_r+0x5a>
 800a55c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a560:	81a3      	strh	r3, [r4, #12]
 800a562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a564:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a568:	6663      	str	r3, [r4, #100]	; 0x64
 800a56a:	4628      	mov	r0, r5
 800a56c:	aa01      	add	r2, sp, #4
 800a56e:	4621      	mov	r1, r4
 800a570:	f002 fba8 	bl	800ccc4 <__sfvwrite_r>
 800a574:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a576:	2800      	cmp	r0, #0
 800a578:	bf14      	ite	ne
 800a57a:	f04f 35ff 	movne.w	r5, #4294967295
 800a57e:	250a      	moveq	r5, #10
 800a580:	07da      	lsls	r2, r3, #31
 800a582:	d405      	bmi.n	800a590 <_puts_r+0x80>
 800a584:	89a3      	ldrh	r3, [r4, #12]
 800a586:	059b      	lsls	r3, r3, #22
 800a588:	d402      	bmi.n	800a590 <_puts_r+0x80>
 800a58a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a58c:	f002 fd0b 	bl	800cfa6 <__retarget_lock_release_recursive>
 800a590:	4628      	mov	r0, r5
 800a592:	b009      	add	sp, #36	; 0x24
 800a594:	bd30      	pop	{r4, r5, pc}
 800a596:	bf00      	nop
 800a598:	08011146 	.word	0x08011146

0800a59c <puts>:
 800a59c:	4b02      	ldr	r3, [pc, #8]	; (800a5a8 <puts+0xc>)
 800a59e:	4601      	mov	r1, r0
 800a5a0:	6818      	ldr	r0, [r3, #0]
 800a5a2:	f7ff bfb5 	b.w	800a510 <_puts_r>
 800a5a6:	bf00      	nop
 800a5a8:	2000004c 	.word	0x2000004c
 800a5ac:	00000000 	.word	0x00000000

0800a5b0 <_vfprintf_r>:
 800a5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b4:	ed2d 8b04 	vpush	{d8-d9}
 800a5b8:	b0cf      	sub	sp, #316	; 0x13c
 800a5ba:	4689      	mov	r9, r1
 800a5bc:	9203      	str	r2, [sp, #12]
 800a5be:	461c      	mov	r4, r3
 800a5c0:	461e      	mov	r6, r3
 800a5c2:	4682      	mov	sl, r0
 800a5c4:	f002 fce8 	bl	800cf98 <_localeconv_r>
 800a5c8:	6803      	ldr	r3, [r0, #0]
 800a5ca:	9313      	str	r3, [sp, #76]	; 0x4c
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7f5 fe27 	bl	8000220 <strlen>
 800a5d2:	900e      	str	r0, [sp, #56]	; 0x38
 800a5d4:	f1ba 0f00 	cmp.w	sl, #0
 800a5d8:	d005      	beq.n	800a5e6 <_vfprintf_r+0x36>
 800a5da:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 800a5de:	b913      	cbnz	r3, 800a5e6 <_vfprintf_r+0x36>
 800a5e0:	4650      	mov	r0, sl
 800a5e2:	f002 fa1f 	bl	800ca24 <__sinit>
 800a5e6:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 800a5ea:	07d8      	lsls	r0, r3, #31
 800a5ec:	d407      	bmi.n	800a5fe <_vfprintf_r+0x4e>
 800a5ee:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a5f2:	0599      	lsls	r1, r3, #22
 800a5f4:	d403      	bmi.n	800a5fe <_vfprintf_r+0x4e>
 800a5f6:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 800a5fa:	f002 fcd3 	bl	800cfa4 <__retarget_lock_acquire_recursive>
 800a5fe:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 800a602:	049a      	lsls	r2, r3, #18
 800a604:	d409      	bmi.n	800a61a <_vfprintf_r+0x6a>
 800a606:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a60a:	f8a9 300c 	strh.w	r3, [r9, #12]
 800a60e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 800a612:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a616:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 800a61a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a61e:	071f      	lsls	r7, r3, #28
 800a620:	d502      	bpl.n	800a628 <_vfprintf_r+0x78>
 800a622:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a626:	b9d3      	cbnz	r3, 800a65e <_vfprintf_r+0xae>
 800a628:	4649      	mov	r1, r9
 800a62a:	4650      	mov	r0, sl
 800a62c:	f001 fa36 	bl	800ba9c <__swsetup_r>
 800a630:	b1a8      	cbz	r0, 800a65e <_vfprintf_r+0xae>
 800a632:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 800a636:	07dd      	lsls	r5, r3, #31
 800a638:	d508      	bpl.n	800a64c <_vfprintf_r+0x9c>
 800a63a:	f04f 33ff 	mov.w	r3, #4294967295
 800a63e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a640:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a642:	b04f      	add	sp, #316	; 0x13c
 800a644:	ecbd 8b04 	vpop	{d8-d9}
 800a648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a64c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a650:	059c      	lsls	r4, r3, #22
 800a652:	d4f2      	bmi.n	800a63a <_vfprintf_r+0x8a>
 800a654:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 800a658:	f002 fca5 	bl	800cfa6 <__retarget_lock_release_recursive>
 800a65c:	e7ed      	b.n	800a63a <_vfprintf_r+0x8a>
 800a65e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a662:	f003 021a 	and.w	r2, r3, #26
 800a666:	2a0a      	cmp	r2, #10
 800a668:	d115      	bne.n	800a696 <_vfprintf_r+0xe6>
 800a66a:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 800a66e:	2a00      	cmp	r2, #0
 800a670:	db11      	blt.n	800a696 <_vfprintf_r+0xe6>
 800a672:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 800a676:	07d0      	lsls	r0, r2, #31
 800a678:	d405      	bmi.n	800a686 <_vfprintf_r+0xd6>
 800a67a:	0599      	lsls	r1, r3, #22
 800a67c:	d403      	bmi.n	800a686 <_vfprintf_r+0xd6>
 800a67e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 800a682:	f002 fc90 	bl	800cfa6 <__retarget_lock_release_recursive>
 800a686:	9a03      	ldr	r2, [sp, #12]
 800a688:	4623      	mov	r3, r4
 800a68a:	4649      	mov	r1, r9
 800a68c:	4650      	mov	r0, sl
 800a68e:	f001 f9c5 	bl	800ba1c <__sbprintf>
 800a692:	900f      	str	r0, [sp, #60]	; 0x3c
 800a694:	e7d4      	b.n	800a640 <_vfprintf_r+0x90>
 800a696:	ed9f 7b9a 	vldr	d7, [pc, #616]	; 800a900 <_vfprintf_r+0x350>
 800a69a:	2500      	movs	r5, #0
 800a69c:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 800a6a0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a6a4:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 800a6a8:	ac25      	add	r4, sp, #148	; 0x94
 800a6aa:	9422      	str	r4, [sp, #136]	; 0x88
 800a6ac:	9505      	str	r5, [sp, #20]
 800a6ae:	950a      	str	r5, [sp, #40]	; 0x28
 800a6b0:	9512      	str	r5, [sp, #72]	; 0x48
 800a6b2:	9514      	str	r5, [sp, #80]	; 0x50
 800a6b4:	950f      	str	r5, [sp, #60]	; 0x3c
 800a6b6:	9b03      	ldr	r3, [sp, #12]
 800a6b8:	461d      	mov	r5, r3
 800a6ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6be:	b10a      	cbz	r2, 800a6c4 <_vfprintf_r+0x114>
 800a6c0:	2a25      	cmp	r2, #37	; 0x25
 800a6c2:	d1f9      	bne.n	800a6b8 <_vfprintf_r+0x108>
 800a6c4:	9b03      	ldr	r3, [sp, #12]
 800a6c6:	1aef      	subs	r7, r5, r3
 800a6c8:	d00d      	beq.n	800a6e6 <_vfprintf_r+0x136>
 800a6ca:	e9c4 3700 	strd	r3, r7, [r4]
 800a6ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a6d0:	443b      	add	r3, r7
 800a6d2:	9324      	str	r3, [sp, #144]	; 0x90
 800a6d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	2b07      	cmp	r3, #7
 800a6da:	9323      	str	r3, [sp, #140]	; 0x8c
 800a6dc:	dc79      	bgt.n	800a7d2 <_vfprintf_r+0x222>
 800a6de:	3408      	adds	r4, #8
 800a6e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6e2:	443b      	add	r3, r7
 800a6e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6e6:	782b      	ldrb	r3, [r5, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	f001 8156 	beq.w	800b99a <_vfprintf_r+0x13ea>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	3501      	adds	r5, #1
 800a6f2:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800a6f6:	f04f 38ff 	mov.w	r8, #4294967295
 800a6fa:	9310      	str	r3, [sp, #64]	; 0x40
 800a6fc:	469b      	mov	fp, r3
 800a6fe:	270a      	movs	r7, #10
 800a700:	212b      	movs	r1, #43	; 0x2b
 800a702:	462a      	mov	r2, r5
 800a704:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a708:	9307      	str	r3, [sp, #28]
 800a70a:	4613      	mov	r3, r2
 800a70c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a70e:	9b07      	ldr	r3, [sp, #28]
 800a710:	3b20      	subs	r3, #32
 800a712:	2b5a      	cmp	r3, #90	; 0x5a
 800a714:	f200 85c0 	bhi.w	800b298 <_vfprintf_r+0xce8>
 800a718:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a71c:	05be007e 	.word	0x05be007e
 800a720:	008605be 	.word	0x008605be
 800a724:	05be05be 	.word	0x05be05be
 800a728:	006505be 	.word	0x006505be
 800a72c:	05be05be 	.word	0x05be05be
 800a730:	00930089 	.word	0x00930089
 800a734:	009005be 	.word	0x009005be
 800a738:	05be0096 	.word	0x05be0096
 800a73c:	00b200af 	.word	0x00b200af
 800a740:	00b200b2 	.word	0x00b200b2
 800a744:	00b200b2 	.word	0x00b200b2
 800a748:	00b200b2 	.word	0x00b200b2
 800a74c:	00b200b2 	.word	0x00b200b2
 800a750:	05be05be 	.word	0x05be05be
 800a754:	05be05be 	.word	0x05be05be
 800a758:	05be05be 	.word	0x05be05be
 800a75c:	012105be 	.word	0x012105be
 800a760:	00df05be 	.word	0x00df05be
 800a764:	012100f6 	.word	0x012100f6
 800a768:	01210121 	.word	0x01210121
 800a76c:	05be05be 	.word	0x05be05be
 800a770:	05be05be 	.word	0x05be05be
 800a774:	05be00c2 	.word	0x05be00c2
 800a778:	049005be 	.word	0x049005be
 800a77c:	05be05be 	.word	0x05be05be
 800a780:	04d705be 	.word	0x04d705be
 800a784:	04fb05be 	.word	0x04fb05be
 800a788:	05be05be 	.word	0x05be05be
 800a78c:	05be051a 	.word	0x05be051a
 800a790:	05be05be 	.word	0x05be05be
 800a794:	05be05be 	.word	0x05be05be
 800a798:	05be05be 	.word	0x05be05be
 800a79c:	012105be 	.word	0x012105be
 800a7a0:	00df05be 	.word	0x00df05be
 800a7a4:	012100f8 	.word	0x012100f8
 800a7a8:	01210121 	.word	0x01210121
 800a7ac:	00f800c5 	.word	0x00f800c5
 800a7b0:	05be00d9 	.word	0x05be00d9
 800a7b4:	05be00d2 	.word	0x05be00d2
 800a7b8:	0492046d 	.word	0x0492046d
 800a7bc:	00d904c6 	.word	0x00d904c6
 800a7c0:	04d705be 	.word	0x04d705be
 800a7c4:	04fd007c 	.word	0x04fd007c
 800a7c8:	05be05be 	.word	0x05be05be
 800a7cc:	05be0537 	.word	0x05be0537
 800a7d0:	007c      	.short	0x007c
 800a7d2:	aa22      	add	r2, sp, #136	; 0x88
 800a7d4:	4649      	mov	r1, r9
 800a7d6:	4650      	mov	r0, sl
 800a7d8:	f003 fc49 	bl	800e06e <__sprint_r>
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	f040 8130 	bne.w	800aa42 <_vfprintf_r+0x492>
 800a7e2:	ac25      	add	r4, sp, #148	; 0x94
 800a7e4:	e77c      	b.n	800a6e0 <_vfprintf_r+0x130>
 800a7e6:	4650      	mov	r0, sl
 800a7e8:	f002 fbd6 	bl	800cf98 <_localeconv_r>
 800a7ec:	6843      	ldr	r3, [r0, #4]
 800a7ee:	9314      	str	r3, [sp, #80]	; 0x50
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7f5 fd15 	bl	8000220 <strlen>
 800a7f6:	9012      	str	r0, [sp, #72]	; 0x48
 800a7f8:	4650      	mov	r0, sl
 800a7fa:	f002 fbcd 	bl	800cf98 <_localeconv_r>
 800a7fe:	6883      	ldr	r3, [r0, #8]
 800a800:	930a      	str	r3, [sp, #40]	; 0x28
 800a802:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a804:	212b      	movs	r1, #43	; 0x2b
 800a806:	b12b      	cbz	r3, 800a814 <_vfprintf_r+0x264>
 800a808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a80a:	b11b      	cbz	r3, 800a814 <_vfprintf_r+0x264>
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	b10b      	cbz	r3, 800a814 <_vfprintf_r+0x264>
 800a810:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 800a814:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a816:	e774      	b.n	800a702 <_vfprintf_r+0x152>
 800a818:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d1f9      	bne.n	800a814 <_vfprintf_r+0x264>
 800a820:	2320      	movs	r3, #32
 800a822:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800a826:	e7f5      	b.n	800a814 <_vfprintf_r+0x264>
 800a828:	f04b 0b01 	orr.w	fp, fp, #1
 800a82c:	e7f2      	b.n	800a814 <_vfprintf_r+0x264>
 800a82e:	f856 3b04 	ldr.w	r3, [r6], #4
 800a832:	9310      	str	r3, [sp, #64]	; 0x40
 800a834:	2b00      	cmp	r3, #0
 800a836:	daed      	bge.n	800a814 <_vfprintf_r+0x264>
 800a838:	425b      	negs	r3, r3
 800a83a:	9310      	str	r3, [sp, #64]	; 0x40
 800a83c:	f04b 0b04 	orr.w	fp, fp, #4
 800a840:	e7e8      	b.n	800a814 <_vfprintf_r+0x264>
 800a842:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 800a846:	e7e5      	b.n	800a814 <_vfprintf_r+0x264>
 800a848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a84a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a84e:	9207      	str	r2, [sp, #28]
 800a850:	2a2a      	cmp	r2, #42	; 0x2a
 800a852:	d10f      	bne.n	800a874 <_vfprintf_r+0x2c4>
 800a854:	f856 0b04 	ldr.w	r0, [r6], #4
 800a858:	930b      	str	r3, [sp, #44]	; 0x2c
 800a85a:	ea40 78e0 	orr.w	r8, r0, r0, asr #31
 800a85e:	e7d9      	b.n	800a814 <_vfprintf_r+0x264>
 800a860:	fb07 2808 	mla	r8, r7, r8, r2
 800a864:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a868:	9207      	str	r2, [sp, #28]
 800a86a:	9a07      	ldr	r2, [sp, #28]
 800a86c:	3a30      	subs	r2, #48	; 0x30
 800a86e:	2a09      	cmp	r2, #9
 800a870:	d9f6      	bls.n	800a860 <_vfprintf_r+0x2b0>
 800a872:	e74b      	b.n	800a70c <_vfprintf_r+0x15c>
 800a874:	f04f 0800 	mov.w	r8, #0
 800a878:	e7f7      	b.n	800a86a <_vfprintf_r+0x2ba>
 800a87a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 800a87e:	e7c9      	b.n	800a814 <_vfprintf_r+0x264>
 800a880:	2200      	movs	r2, #0
 800a882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a884:	9210      	str	r2, [sp, #64]	; 0x40
 800a886:	9a07      	ldr	r2, [sp, #28]
 800a888:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a88a:	3a30      	subs	r2, #48	; 0x30
 800a88c:	fb07 2200 	mla	r2, r7, r0, r2
 800a890:	9210      	str	r2, [sp, #64]	; 0x40
 800a892:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a896:	9207      	str	r2, [sp, #28]
 800a898:	3a30      	subs	r2, #48	; 0x30
 800a89a:	2a09      	cmp	r2, #9
 800a89c:	d9f3      	bls.n	800a886 <_vfprintf_r+0x2d6>
 800a89e:	e735      	b.n	800a70c <_vfprintf_r+0x15c>
 800a8a0:	f04b 0b08 	orr.w	fp, fp, #8
 800a8a4:	e7b6      	b.n	800a814 <_vfprintf_r+0x264>
 800a8a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	2b68      	cmp	r3, #104	; 0x68
 800a8ac:	bf01      	itttt	eq
 800a8ae:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 800a8b0:	3301      	addeq	r3, #1
 800a8b2:	930b      	streq	r3, [sp, #44]	; 0x2c
 800a8b4:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 800a8b8:	bf18      	it	ne
 800a8ba:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 800a8be:	e7a9      	b.n	800a814 <_vfprintf_r+0x264>
 800a8c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	2b6c      	cmp	r3, #108	; 0x6c
 800a8c6:	d105      	bne.n	800a8d4 <_vfprintf_r+0x324>
 800a8c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8ce:	f04b 0b20 	orr.w	fp, fp, #32
 800a8d2:	e79f      	b.n	800a814 <_vfprintf_r+0x264>
 800a8d4:	f04b 0b10 	orr.w	fp, fp, #16
 800a8d8:	e79c      	b.n	800a814 <_vfprintf_r+0x264>
 800a8da:	4632      	mov	r2, r6
 800a8dc:	2000      	movs	r0, #0
 800a8de:	f852 3b04 	ldr.w	r3, [r2], #4
 800a8e2:	9206      	str	r2, [sp, #24]
 800a8e4:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800a8e8:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 800a8ec:	ab35      	add	r3, sp, #212	; 0xd4
 800a8ee:	e9cd 0008 	strd	r0, r0, [sp, #32]
 800a8f2:	9004      	str	r0, [sp, #16]
 800a8f4:	f04f 0801 	mov.w	r8, #1
 800a8f8:	4606      	mov	r6, r0
 800a8fa:	4605      	mov	r5, r0
 800a8fc:	9303      	str	r3, [sp, #12]
 800a8fe:	e1c3      	b.n	800ac88 <_vfprintf_r+0x6d8>
	...
 800a908:	f04b 0b10 	orr.w	fp, fp, #16
 800a90c:	f01b 0f20 	tst.w	fp, #32
 800a910:	d012      	beq.n	800a938 <_vfprintf_r+0x388>
 800a912:	3607      	adds	r6, #7
 800a914:	f026 0307 	bic.w	r3, r6, #7
 800a918:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 800a91c:	9306      	str	r3, [sp, #24]
 800a91e:	2e00      	cmp	r6, #0
 800a920:	f177 0300 	sbcs.w	r3, r7, #0
 800a924:	da06      	bge.n	800a934 <_vfprintf_r+0x384>
 800a926:	4276      	negs	r6, r6
 800a928:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800a92c:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800a930:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800a934:	2301      	movs	r3, #1
 800a936:	e392      	b.n	800b05e <_vfprintf_r+0xaae>
 800a938:	1d33      	adds	r3, r6, #4
 800a93a:	f01b 0f10 	tst.w	fp, #16
 800a93e:	9306      	str	r3, [sp, #24]
 800a940:	d002      	beq.n	800a948 <_vfprintf_r+0x398>
 800a942:	6836      	ldr	r6, [r6, #0]
 800a944:	17f7      	asrs	r7, r6, #31
 800a946:	e7ea      	b.n	800a91e <_vfprintf_r+0x36e>
 800a948:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800a94c:	6836      	ldr	r6, [r6, #0]
 800a94e:	d001      	beq.n	800a954 <_vfprintf_r+0x3a4>
 800a950:	b236      	sxth	r6, r6
 800a952:	e7f7      	b.n	800a944 <_vfprintf_r+0x394>
 800a954:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800a958:	bf18      	it	ne
 800a95a:	b276      	sxtbne	r6, r6
 800a95c:	e7f2      	b.n	800a944 <_vfprintf_r+0x394>
 800a95e:	3607      	adds	r6, #7
 800a960:	f026 0307 	bic.w	r3, r6, #7
 800a964:	ecb3 7b02 	vldmia	r3!, {d7}
 800a968:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a96c:	9306      	str	r3, [sp, #24]
 800a96e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a970:	ee09 3a10 	vmov	s18, r3
 800a974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a976:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a97a:	ee09 3a90 	vmov	s19, r3
 800a97e:	f04f 32ff 	mov.w	r2, #4294967295
 800a982:	4b39      	ldr	r3, [pc, #228]	; (800aa68 <_vfprintf_r+0x4b8>)
 800a984:	ec51 0b19 	vmov	r0, r1, d9
 800a988:	f7f6 f8f8 	bl	8000b7c <__aeabi_dcmpun>
 800a98c:	bb20      	cbnz	r0, 800a9d8 <_vfprintf_r+0x428>
 800a98e:	4b36      	ldr	r3, [pc, #216]	; (800aa68 <_vfprintf_r+0x4b8>)
 800a990:	ec51 0b19 	vmov	r0, r1, d9
 800a994:	f04f 32ff 	mov.w	r2, #4294967295
 800a998:	f7f6 f8d2 	bl	8000b40 <__aeabi_dcmple>
 800a99c:	b9e0      	cbnz	r0, 800a9d8 <_vfprintf_r+0x428>
 800a99e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	f7f6 f8c1 	bl	8000b2c <__aeabi_dcmplt>
 800a9aa:	b110      	cbz	r0, 800a9b2 <_vfprintf_r+0x402>
 800a9ac:	232d      	movs	r3, #45	; 0x2d
 800a9ae:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800a9b2:	4a2e      	ldr	r2, [pc, #184]	; (800aa6c <_vfprintf_r+0x4bc>)
 800a9b4:	482e      	ldr	r0, [pc, #184]	; (800aa70 <_vfprintf_r+0x4c0>)
 800a9b6:	9907      	ldr	r1, [sp, #28]
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	2947      	cmp	r1, #71	; 0x47
 800a9bc:	bfc8      	it	gt
 800a9be:	4603      	movgt	r3, r0
 800a9c0:	9303      	str	r3, [sp, #12]
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 800a9c8:	9304      	str	r3, [sp, #16]
 800a9ca:	f04f 0803 	mov.w	r8, #3
 800a9ce:	461e      	mov	r6, r3
 800a9d0:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800a9d4:	461d      	mov	r5, r3
 800a9d6:	e157      	b.n	800ac88 <_vfprintf_r+0x6d8>
 800a9d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a9dc:	4610      	mov	r0, r2
 800a9de:	4619      	mov	r1, r3
 800a9e0:	f7f6 f8cc 	bl	8000b7c <__aeabi_dcmpun>
 800a9e4:	b140      	cbz	r0, 800a9f8 <_vfprintf_r+0x448>
 800a9e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9e8:	4a22      	ldr	r2, [pc, #136]	; (800aa74 <_vfprintf_r+0x4c4>)
 800a9ea:	4823      	ldr	r0, [pc, #140]	; (800aa78 <_vfprintf_r+0x4c8>)
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	bfbc      	itt	lt
 800a9f0:	232d      	movlt	r3, #45	; 0x2d
 800a9f2:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 800a9f6:	e7de      	b.n	800a9b6 <_vfprintf_r+0x406>
 800a9f8:	9b07      	ldr	r3, [sp, #28]
 800a9fa:	f023 0320 	bic.w	r3, r3, #32
 800a9fe:	2b41      	cmp	r3, #65	; 0x41
 800aa00:	9308      	str	r3, [sp, #32]
 800aa02:	d13b      	bne.n	800aa7c <_vfprintf_r+0x4cc>
 800aa04:	2330      	movs	r3, #48	; 0x30
 800aa06:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800aa0a:	9b07      	ldr	r3, [sp, #28]
 800aa0c:	2b61      	cmp	r3, #97	; 0x61
 800aa0e:	bf0c      	ite	eq
 800aa10:	2378      	moveq	r3, #120	; 0x78
 800aa12:	2358      	movne	r3, #88	; 0x58
 800aa14:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 800aa18:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800aa1c:	f04b 0b02 	orr.w	fp, fp, #2
 800aa20:	f340 8209 	ble.w	800ae36 <_vfprintf_r+0x886>
 800aa24:	f108 0101 	add.w	r1, r8, #1
 800aa28:	4650      	mov	r0, sl
 800aa2a:	f002 fb29 	bl	800d080 <_malloc_r>
 800aa2e:	9003      	str	r0, [sp, #12]
 800aa30:	2800      	cmp	r0, #0
 800aa32:	f040 8204 	bne.w	800ae3e <_vfprintf_r+0x88e>
 800aa36:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800aa3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa3e:	f8a9 300c 	strh.w	r3, [r9, #12]
 800aa42:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 800aa46:	07d9      	lsls	r1, r3, #31
 800aa48:	d407      	bmi.n	800aa5a <_vfprintf_r+0x4aa>
 800aa4a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800aa4e:	059a      	lsls	r2, r3, #22
 800aa50:	d403      	bmi.n	800aa5a <_vfprintf_r+0x4aa>
 800aa52:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 800aa56:	f002 faa6 	bl	800cfa6 <__retarget_lock_release_recursive>
 800aa5a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800aa5e:	065b      	lsls	r3, r3, #25
 800aa60:	f57f adee 	bpl.w	800a640 <_vfprintf_r+0x90>
 800aa64:	e5e9      	b.n	800a63a <_vfprintf_r+0x8a>
 800aa66:	bf00      	nop
 800aa68:	7fefffff 	.word	0x7fefffff
 800aa6c:	08010eb8 	.word	0x08010eb8
 800aa70:	08010ebc 	.word	0x08010ebc
 800aa74:	08010ec0 	.word	0x08010ec0
 800aa78:	08010ec4 	.word	0x08010ec4
 800aa7c:	f1b8 3fff 	cmp.w	r8, #4294967295
 800aa80:	f000 81e0 	beq.w	800ae44 <_vfprintf_r+0x894>
 800aa84:	9b08      	ldr	r3, [sp, #32]
 800aa86:	2b47      	cmp	r3, #71	; 0x47
 800aa88:	f040 81e0 	bne.w	800ae4c <_vfprintf_r+0x89c>
 800aa8c:	f1b8 0f00 	cmp.w	r8, #0
 800aa90:	f040 81dc 	bne.w	800ae4c <_vfprintf_r+0x89c>
 800aa94:	f8cd 8010 	str.w	r8, [sp, #16]
 800aa98:	f04f 0801 	mov.w	r8, #1
 800aa9c:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 800aaa0:	9311      	str	r3, [sp, #68]	; 0x44
 800aaa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f280 81d3 	bge.w	800ae50 <_vfprintf_r+0x8a0>
 800aaaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aaac:	ee08 3a10 	vmov	s16, r3
 800aab0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aab2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aab6:	ee08 3a90 	vmov	s17, r3
 800aaba:	232d      	movs	r3, #45	; 0x2d
 800aabc:	9318      	str	r3, [sp, #96]	; 0x60
 800aabe:	9b08      	ldr	r3, [sp, #32]
 800aac0:	2b41      	cmp	r3, #65	; 0x41
 800aac2:	f040 81e3 	bne.w	800ae8c <_vfprintf_r+0x8dc>
 800aac6:	eeb0 0a48 	vmov.f32	s0, s16
 800aaca:	eef0 0a68 	vmov.f32	s1, s17
 800aace:	a81c      	add	r0, sp, #112	; 0x70
 800aad0:	f003 fa22 	bl	800df18 <frexp>
 800aad4:	2200      	movs	r2, #0
 800aad6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800aada:	ec51 0b10 	vmov	r0, r1, d0
 800aade:	f7f5 fdb3 	bl	8000648 <__aeabi_dmul>
 800aae2:	2200      	movs	r2, #0
 800aae4:	2300      	movs	r3, #0
 800aae6:	4606      	mov	r6, r0
 800aae8:	460f      	mov	r7, r1
 800aaea:	f7f6 f815 	bl	8000b18 <__aeabi_dcmpeq>
 800aaee:	b108      	cbz	r0, 800aaf4 <_vfprintf_r+0x544>
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	931c      	str	r3, [sp, #112]	; 0x70
 800aaf4:	4bb7      	ldr	r3, [pc, #732]	; (800add4 <_vfprintf_r+0x824>)
 800aaf6:	4ab8      	ldr	r2, [pc, #736]	; (800add8 <_vfprintf_r+0x828>)
 800aaf8:	9907      	ldr	r1, [sp, #28]
 800aafa:	9d03      	ldr	r5, [sp, #12]
 800aafc:	2961      	cmp	r1, #97	; 0x61
 800aafe:	bf18      	it	ne
 800ab00:	461a      	movne	r2, r3
 800ab02:	f108 33ff 	add.w	r3, r8, #4294967295
 800ab06:	9217      	str	r2, [sp, #92]	; 0x5c
 800ab08:	9305      	str	r3, [sp, #20]
 800ab0a:	4bb4      	ldr	r3, [pc, #720]	; (800addc <_vfprintf_r+0x82c>)
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	4630      	mov	r0, r6
 800ab10:	4639      	mov	r1, r7
 800ab12:	f7f5 fd99 	bl	8000648 <__aeabi_dmul>
 800ab16:	460f      	mov	r7, r1
 800ab18:	4606      	mov	r6, r0
 800ab1a:	f7f6 f845 	bl	8000ba8 <__aeabi_d2iz>
 800ab1e:	9019      	str	r0, [sp, #100]	; 0x64
 800ab20:	f7f5 fd28 	bl	8000574 <__aeabi_i2d>
 800ab24:	4602      	mov	r2, r0
 800ab26:	460b      	mov	r3, r1
 800ab28:	4630      	mov	r0, r6
 800ab2a:	4639      	mov	r1, r7
 800ab2c:	f7f5 fbd4 	bl	80002d8 <__aeabi_dsub>
 800ab30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ab32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab34:	5c9b      	ldrb	r3, [r3, r2]
 800ab36:	f805 3b01 	strb.w	r3, [r5], #1
 800ab3a:	9b05      	ldr	r3, [sp, #20]
 800ab3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab3e:	1c5a      	adds	r2, r3, #1
 800ab40:	4606      	mov	r6, r0
 800ab42:	460f      	mov	r7, r1
 800ab44:	d007      	beq.n	800ab56 <_vfprintf_r+0x5a6>
 800ab46:	3b01      	subs	r3, #1
 800ab48:	9305      	str	r3, [sp, #20]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	f7f5 ffe3 	bl	8000b18 <__aeabi_dcmpeq>
 800ab52:	2800      	cmp	r0, #0
 800ab54:	d0d9      	beq.n	800ab0a <_vfprintf_r+0x55a>
 800ab56:	4ba2      	ldr	r3, [pc, #648]	; (800ade0 <_vfprintf_r+0x830>)
 800ab58:	2200      	movs	r2, #0
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	4639      	mov	r1, r7
 800ab5e:	f7f6 f803 	bl	8000b68 <__aeabi_dcmpgt>
 800ab62:	b960      	cbnz	r0, 800ab7e <_vfprintf_r+0x5ce>
 800ab64:	4b9e      	ldr	r3, [pc, #632]	; (800ade0 <_vfprintf_r+0x830>)
 800ab66:	2200      	movs	r2, #0
 800ab68:	4630      	mov	r0, r6
 800ab6a:	4639      	mov	r1, r7
 800ab6c:	f7f5 ffd4 	bl	8000b18 <__aeabi_dcmpeq>
 800ab70:	2800      	cmp	r0, #0
 800ab72:	f000 8186 	beq.w	800ae82 <_vfprintf_r+0x8d2>
 800ab76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab78:	07df      	lsls	r7, r3, #31
 800ab7a:	f140 8182 	bpl.w	800ae82 <_vfprintf_r+0x8d2>
 800ab7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab80:	9520      	str	r5, [sp, #128]	; 0x80
 800ab82:	7bd9      	ldrb	r1, [r3, #15]
 800ab84:	2030      	movs	r0, #48	; 0x30
 800ab86:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ab88:	1e53      	subs	r3, r2, #1
 800ab8a:	9320      	str	r3, [sp, #128]	; 0x80
 800ab8c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800ab90:	428b      	cmp	r3, r1
 800ab92:	f000 8165 	beq.w	800ae60 <_vfprintf_r+0x8b0>
 800ab96:	2b39      	cmp	r3, #57	; 0x39
 800ab98:	bf0b      	itete	eq
 800ab9a:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 800ab9c:	3301      	addne	r3, #1
 800ab9e:	7a9b      	ldrbeq	r3, [r3, #10]
 800aba0:	b2db      	uxtbne	r3, r3
 800aba2:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aba6:	9b03      	ldr	r3, [sp, #12]
 800aba8:	1aeb      	subs	r3, r5, r3
 800abaa:	9305      	str	r3, [sp, #20]
 800abac:	9b08      	ldr	r3, [sp, #32]
 800abae:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800abb0:	2b47      	cmp	r3, #71	; 0x47
 800abb2:	f040 81b3 	bne.w	800af1c <_vfprintf_r+0x96c>
 800abb6:	1cee      	adds	r6, r5, #3
 800abb8:	db02      	blt.n	800abc0 <_vfprintf_r+0x610>
 800abba:	4545      	cmp	r5, r8
 800abbc:	f340 81d5 	ble.w	800af6a <_vfprintf_r+0x9ba>
 800abc0:	9b07      	ldr	r3, [sp, #28]
 800abc2:	3b02      	subs	r3, #2
 800abc4:	9307      	str	r3, [sp, #28]
 800abc6:	9907      	ldr	r1, [sp, #28]
 800abc8:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800abcc:	f021 0120 	bic.w	r1, r1, #32
 800abd0:	2941      	cmp	r1, #65	; 0x41
 800abd2:	bf08      	it	eq
 800abd4:	320f      	addeq	r2, #15
 800abd6:	f105 33ff 	add.w	r3, r5, #4294967295
 800abda:	bf06      	itte	eq
 800abdc:	b2d2      	uxtbeq	r2, r2
 800abde:	2101      	moveq	r1, #1
 800abe0:	2100      	movne	r1, #0
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	931c      	str	r3, [sp, #112]	; 0x70
 800abe6:	bfb8      	it	lt
 800abe8:	f1c5 0301 	rsblt	r3, r5, #1
 800abec:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 800abf0:	bfb4      	ite	lt
 800abf2:	222d      	movlt	r2, #45	; 0x2d
 800abf4:	222b      	movge	r2, #43	; 0x2b
 800abf6:	2b09      	cmp	r3, #9
 800abf8:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 800abfc:	f340 81a4 	ble.w	800af48 <_vfprintf_r+0x998>
 800ac00:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 800ac04:	260a      	movs	r6, #10
 800ac06:	4611      	mov	r1, r2
 800ac08:	fb93 f5f6 	sdiv	r5, r3, r6
 800ac0c:	fb06 3015 	mls	r0, r6, r5, r3
 800ac10:	3030      	adds	r0, #48	; 0x30
 800ac12:	f801 0c01 	strb.w	r0, [r1, #-1]
 800ac16:	4618      	mov	r0, r3
 800ac18:	2863      	cmp	r0, #99	; 0x63
 800ac1a:	f102 32ff 	add.w	r2, r2, #4294967295
 800ac1e:	462b      	mov	r3, r5
 800ac20:	dcf1      	bgt.n	800ac06 <_vfprintf_r+0x656>
 800ac22:	3330      	adds	r3, #48	; 0x30
 800ac24:	1e88      	subs	r0, r1, #2
 800ac26:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ac2a:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 800ac2e:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800ac32:	4603      	mov	r3, r0
 800ac34:	42ab      	cmp	r3, r5
 800ac36:	f0c0 8182 	bcc.w	800af3e <_vfprintf_r+0x98e>
 800ac3a:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 800ac3e:	1a52      	subs	r2, r2, r1
 800ac40:	42a8      	cmp	r0, r5
 800ac42:	bf88      	it	hi
 800ac44:	2200      	movhi	r2, #0
 800ac46:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 800ac4a:	441a      	add	r2, r3
 800ac4c:	ab1e      	add	r3, sp, #120	; 0x78
 800ac4e:	1ad3      	subs	r3, r2, r3
 800ac50:	9a05      	ldr	r2, [sp, #20]
 800ac52:	9315      	str	r3, [sp, #84]	; 0x54
 800ac54:	2a01      	cmp	r2, #1
 800ac56:	eb03 0802 	add.w	r8, r3, r2
 800ac5a:	dc02      	bgt.n	800ac62 <_vfprintf_r+0x6b2>
 800ac5c:	f01b 0f01 	tst.w	fp, #1
 800ac60:	d001      	beq.n	800ac66 <_vfprintf_r+0x6b6>
 800ac62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac64:	4498      	add	r8, r3
 800ac66:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 800ac6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac6e:	9311      	str	r3, [sp, #68]	; 0x44
 800ac70:	2300      	movs	r3, #0
 800ac72:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800ac76:	461d      	mov	r5, r3
 800ac78:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ac7a:	b113      	cbz	r3, 800ac82 <_vfprintf_r+0x6d2>
 800ac7c:	232d      	movs	r3, #45	; 0x2d
 800ac7e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800ac82:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800ac86:	2600      	movs	r6, #0
 800ac88:	4546      	cmp	r6, r8
 800ac8a:	4633      	mov	r3, r6
 800ac8c:	bfb8      	it	lt
 800ac8e:	4643      	movlt	r3, r8
 800ac90:	9311      	str	r3, [sp, #68]	; 0x44
 800ac92:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800ac96:	b113      	cbz	r3, 800ac9e <_vfprintf_r+0x6ee>
 800ac98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	9311      	str	r3, [sp, #68]	; 0x44
 800ac9e:	f01b 0302 	ands.w	r3, fp, #2
 800aca2:	9317      	str	r3, [sp, #92]	; 0x5c
 800aca4:	bf1e      	ittt	ne
 800aca6:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 800aca8:	3302      	addne	r3, #2
 800acaa:	9311      	strne	r3, [sp, #68]	; 0x44
 800acac:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800acb0:	9318      	str	r3, [sp, #96]	; 0x60
 800acb2:	d11f      	bne.n	800acf4 <_vfprintf_r+0x744>
 800acb4:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800acb8:	1a9f      	subs	r7, r3, r2
 800acba:	2f00      	cmp	r7, #0
 800acbc:	dd1a      	ble.n	800acf4 <_vfprintf_r+0x744>
 800acbe:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800acc2:	4848      	ldr	r0, [pc, #288]	; (800ade4 <_vfprintf_r+0x834>)
 800acc4:	6020      	str	r0, [r4, #0]
 800acc6:	2f10      	cmp	r7, #16
 800acc8:	f103 0301 	add.w	r3, r3, #1
 800accc:	f104 0108 	add.w	r1, r4, #8
 800acd0:	f300 82f0 	bgt.w	800b2b4 <_vfprintf_r+0xd04>
 800acd4:	6067      	str	r7, [r4, #4]
 800acd6:	2b07      	cmp	r3, #7
 800acd8:	4417      	add	r7, r2
 800acda:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800acde:	f340 82fc 	ble.w	800b2da <_vfprintf_r+0xd2a>
 800ace2:	aa22      	add	r2, sp, #136	; 0x88
 800ace4:	4649      	mov	r1, r9
 800ace6:	4650      	mov	r0, sl
 800ace8:	f003 f9c1 	bl	800e06e <__sprint_r>
 800acec:	2800      	cmp	r0, #0
 800acee:	f040 8632 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800acf2:	ac25      	add	r4, sp, #148	; 0x94
 800acf4:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800acf8:	b173      	cbz	r3, 800ad18 <_vfprintf_r+0x768>
 800acfa:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 800acfe:	6023      	str	r3, [r4, #0]
 800ad00:	2301      	movs	r3, #1
 800ad02:	6063      	str	r3, [r4, #4]
 800ad04:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ad06:	3301      	adds	r3, #1
 800ad08:	9324      	str	r3, [sp, #144]	; 0x90
 800ad0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	2b07      	cmp	r3, #7
 800ad10:	9323      	str	r3, [sp, #140]	; 0x8c
 800ad12:	f300 82e4 	bgt.w	800b2de <_vfprintf_r+0xd2e>
 800ad16:	3408      	adds	r4, #8
 800ad18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad1a:	b16b      	cbz	r3, 800ad38 <_vfprintf_r+0x788>
 800ad1c:	ab1b      	add	r3, sp, #108	; 0x6c
 800ad1e:	6023      	str	r3, [r4, #0]
 800ad20:	2302      	movs	r3, #2
 800ad22:	6063      	str	r3, [r4, #4]
 800ad24:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ad26:	3302      	adds	r3, #2
 800ad28:	9324      	str	r3, [sp, #144]	; 0x90
 800ad2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	2b07      	cmp	r3, #7
 800ad30:	9323      	str	r3, [sp, #140]	; 0x8c
 800ad32:	f300 82de 	bgt.w	800b2f2 <_vfprintf_r+0xd42>
 800ad36:	3408      	adds	r4, #8
 800ad38:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ad3a:	2b80      	cmp	r3, #128	; 0x80
 800ad3c:	d11f      	bne.n	800ad7e <_vfprintf_r+0x7ce>
 800ad3e:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800ad42:	1a9f      	subs	r7, r3, r2
 800ad44:	2f00      	cmp	r7, #0
 800ad46:	dd1a      	ble.n	800ad7e <_vfprintf_r+0x7ce>
 800ad48:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800ad4c:	4826      	ldr	r0, [pc, #152]	; (800ade8 <_vfprintf_r+0x838>)
 800ad4e:	6020      	str	r0, [r4, #0]
 800ad50:	2f10      	cmp	r7, #16
 800ad52:	f103 0301 	add.w	r3, r3, #1
 800ad56:	f104 0108 	add.w	r1, r4, #8
 800ad5a:	f300 82d4 	bgt.w	800b306 <_vfprintf_r+0xd56>
 800ad5e:	6067      	str	r7, [r4, #4]
 800ad60:	2b07      	cmp	r3, #7
 800ad62:	4417      	add	r7, r2
 800ad64:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800ad68:	f340 82e0 	ble.w	800b32c <_vfprintf_r+0xd7c>
 800ad6c:	aa22      	add	r2, sp, #136	; 0x88
 800ad6e:	4649      	mov	r1, r9
 800ad70:	4650      	mov	r0, sl
 800ad72:	f003 f97c 	bl	800e06e <__sprint_r>
 800ad76:	2800      	cmp	r0, #0
 800ad78:	f040 85ed 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800ad7c:	ac25      	add	r4, sp, #148	; 0x94
 800ad7e:	eba6 0608 	sub.w	r6, r6, r8
 800ad82:	2e00      	cmp	r6, #0
 800ad84:	dd1a      	ble.n	800adbc <_vfprintf_r+0x80c>
 800ad86:	4f18      	ldr	r7, [pc, #96]	; (800ade8 <_vfprintf_r+0x838>)
 800ad88:	6027      	str	r7, [r4, #0]
 800ad8a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800ad8e:	2e10      	cmp	r6, #16
 800ad90:	f103 0301 	add.w	r3, r3, #1
 800ad94:	f104 0108 	add.w	r1, r4, #8
 800ad98:	f300 82ca 	bgt.w	800b330 <_vfprintf_r+0xd80>
 800ad9c:	6066      	str	r6, [r4, #4]
 800ad9e:	2b07      	cmp	r3, #7
 800ada0:	4416      	add	r6, r2
 800ada2:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800ada6:	f340 82d6 	ble.w	800b356 <_vfprintf_r+0xda6>
 800adaa:	aa22      	add	r2, sp, #136	; 0x88
 800adac:	4649      	mov	r1, r9
 800adae:	4650      	mov	r0, sl
 800adb0:	f003 f95d 	bl	800e06e <__sprint_r>
 800adb4:	2800      	cmp	r0, #0
 800adb6:	f040 85ce 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800adba:	ac25      	add	r4, sp, #148	; 0x94
 800adbc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800adc0:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800adc2:	f040 82cf 	bne.w	800b364 <_vfprintf_r+0xdb4>
 800adc6:	9b03      	ldr	r3, [sp, #12]
 800adc8:	e9c4 3800 	strd	r3, r8, [r4]
 800adcc:	4446      	add	r6, r8
 800adce:	9624      	str	r6, [sp, #144]	; 0x90
 800add0:	e00c      	b.n	800adec <_vfprintf_r+0x83c>
 800add2:	bf00      	nop
 800add4:	08010ed9 	.word	0x08010ed9
 800add8:	08010ec8 	.word	0x08010ec8
 800addc:	40300000 	.word	0x40300000
 800ade0:	3fe00000 	.word	0x3fe00000
 800ade4:	08010eec 	.word	0x08010eec
 800ade8:	08010efc 	.word	0x08010efc
 800adec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800adee:	3301      	adds	r3, #1
 800adf0:	2b07      	cmp	r3, #7
 800adf2:	9323      	str	r3, [sp, #140]	; 0x8c
 800adf4:	f300 82fb 	bgt.w	800b3ee <_vfprintf_r+0xe3e>
 800adf8:	3408      	adds	r4, #8
 800adfa:	f01b 0f04 	tst.w	fp, #4
 800adfe:	f040 858c 	bne.w	800b91a <_vfprintf_r+0x136a>
 800ae02:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800ae06:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ae08:	428a      	cmp	r2, r1
 800ae0a:	bfac      	ite	ge
 800ae0c:	189b      	addge	r3, r3, r2
 800ae0e:	185b      	addlt	r3, r3, r1
 800ae10:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae12:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ae14:	b13b      	cbz	r3, 800ae26 <_vfprintf_r+0x876>
 800ae16:	aa22      	add	r2, sp, #136	; 0x88
 800ae18:	4649      	mov	r1, r9
 800ae1a:	4650      	mov	r0, sl
 800ae1c:	f003 f927 	bl	800e06e <__sprint_r>
 800ae20:	2800      	cmp	r0, #0
 800ae22:	f040 8598 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800ae26:	2300      	movs	r3, #0
 800ae28:	9323      	str	r3, [sp, #140]	; 0x8c
 800ae2a:	9b04      	ldr	r3, [sp, #16]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f040 85ae 	bne.w	800b98e <_vfprintf_r+0x13de>
 800ae32:	ac25      	add	r4, sp, #148	; 0x94
 800ae34:	e0eb      	b.n	800b00e <_vfprintf_r+0xa5e>
 800ae36:	ab35      	add	r3, sp, #212	; 0xd4
 800ae38:	9004      	str	r0, [sp, #16]
 800ae3a:	9303      	str	r3, [sp, #12]
 800ae3c:	e62e      	b.n	800aa9c <_vfprintf_r+0x4ec>
 800ae3e:	9b03      	ldr	r3, [sp, #12]
 800ae40:	9304      	str	r3, [sp, #16]
 800ae42:	e62b      	b.n	800aa9c <_vfprintf_r+0x4ec>
 800ae44:	9004      	str	r0, [sp, #16]
 800ae46:	f04f 0806 	mov.w	r8, #6
 800ae4a:	e627      	b.n	800aa9c <_vfprintf_r+0x4ec>
 800ae4c:	9004      	str	r0, [sp, #16]
 800ae4e:	e625      	b.n	800aa9c <_vfprintf_r+0x4ec>
 800ae50:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 800ae54:	2300      	movs	r3, #0
 800ae56:	eeb0 8a47 	vmov.f32	s16, s14
 800ae5a:	eef0 8a67 	vmov.f32	s17, s15
 800ae5e:	e62d      	b.n	800aabc <_vfprintf_r+0x50c>
 800ae60:	f802 0c01 	strb.w	r0, [r2, #-1]
 800ae64:	e68f      	b.n	800ab86 <_vfprintf_r+0x5d6>
 800ae66:	f803 0b01 	strb.w	r0, [r3], #1
 800ae6a:	1aca      	subs	r2, r1, r3
 800ae6c:	2a00      	cmp	r2, #0
 800ae6e:	dafa      	bge.n	800ae66 <_vfprintf_r+0x8b6>
 800ae70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae74:	3201      	adds	r2, #1
 800ae76:	f103 0301 	add.w	r3, r3, #1
 800ae7a:	bfb8      	it	lt
 800ae7c:	2300      	movlt	r3, #0
 800ae7e:	441d      	add	r5, r3
 800ae80:	e691      	b.n	800aba6 <_vfprintf_r+0x5f6>
 800ae82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae84:	462b      	mov	r3, r5
 800ae86:	18a9      	adds	r1, r5, r2
 800ae88:	2030      	movs	r0, #48	; 0x30
 800ae8a:	e7ee      	b.n	800ae6a <_vfprintf_r+0x8ba>
 800ae8c:	9b08      	ldr	r3, [sp, #32]
 800ae8e:	2b46      	cmp	r3, #70	; 0x46
 800ae90:	d005      	beq.n	800ae9e <_vfprintf_r+0x8ee>
 800ae92:	2b45      	cmp	r3, #69	; 0x45
 800ae94:	d11b      	bne.n	800aece <_vfprintf_r+0x91e>
 800ae96:	f108 0501 	add.w	r5, r8, #1
 800ae9a:	2102      	movs	r1, #2
 800ae9c:	e001      	b.n	800aea2 <_vfprintf_r+0x8f2>
 800ae9e:	4645      	mov	r5, r8
 800aea0:	2103      	movs	r1, #3
 800aea2:	ab20      	add	r3, sp, #128	; 0x80
 800aea4:	9301      	str	r3, [sp, #4]
 800aea6:	ab1d      	add	r3, sp, #116	; 0x74
 800aea8:	9300      	str	r3, [sp, #0]
 800aeaa:	462a      	mov	r2, r5
 800aeac:	ab1c      	add	r3, sp, #112	; 0x70
 800aeae:	4650      	mov	r0, sl
 800aeb0:	eeb0 0a48 	vmov.f32	s0, s16
 800aeb4:	eef0 0a68 	vmov.f32	s1, s17
 800aeb8:	f000 fee6 	bl	800bc88 <_dtoa_r>
 800aebc:	9b08      	ldr	r3, [sp, #32]
 800aebe:	9003      	str	r0, [sp, #12]
 800aec0:	2b47      	cmp	r3, #71	; 0x47
 800aec2:	d106      	bne.n	800aed2 <_vfprintf_r+0x922>
 800aec4:	f01b 0f01 	tst.w	fp, #1
 800aec8:	d103      	bne.n	800aed2 <_vfprintf_r+0x922>
 800aeca:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800aecc:	e66b      	b.n	800aba6 <_vfprintf_r+0x5f6>
 800aece:	4645      	mov	r5, r8
 800aed0:	e7e3      	b.n	800ae9a <_vfprintf_r+0x8ea>
 800aed2:	9b03      	ldr	r3, [sp, #12]
 800aed4:	195e      	adds	r6, r3, r5
 800aed6:	9b08      	ldr	r3, [sp, #32]
 800aed8:	2b46      	cmp	r3, #70	; 0x46
 800aeda:	d10f      	bne.n	800aefc <_vfprintf_r+0x94c>
 800aedc:	9b03      	ldr	r3, [sp, #12]
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	2b30      	cmp	r3, #48	; 0x30
 800aee2:	d109      	bne.n	800aef8 <_vfprintf_r+0x948>
 800aee4:	ec51 0b18 	vmov	r0, r1, d8
 800aee8:	2200      	movs	r2, #0
 800aeea:	2300      	movs	r3, #0
 800aeec:	f7f5 fe14 	bl	8000b18 <__aeabi_dcmpeq>
 800aef0:	b910      	cbnz	r0, 800aef8 <_vfprintf_r+0x948>
 800aef2:	f1c5 0501 	rsb	r5, r5, #1
 800aef6:	951c      	str	r5, [sp, #112]	; 0x70
 800aef8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800aefa:	441e      	add	r6, r3
 800aefc:	ec51 0b18 	vmov	r0, r1, d8
 800af00:	2200      	movs	r2, #0
 800af02:	2300      	movs	r3, #0
 800af04:	f7f5 fe08 	bl	8000b18 <__aeabi_dcmpeq>
 800af08:	b100      	cbz	r0, 800af0c <_vfprintf_r+0x95c>
 800af0a:	9620      	str	r6, [sp, #128]	; 0x80
 800af0c:	2230      	movs	r2, #48	; 0x30
 800af0e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800af10:	429e      	cmp	r6, r3
 800af12:	d9da      	bls.n	800aeca <_vfprintf_r+0x91a>
 800af14:	1c59      	adds	r1, r3, #1
 800af16:	9120      	str	r1, [sp, #128]	; 0x80
 800af18:	701a      	strb	r2, [r3, #0]
 800af1a:	e7f8      	b.n	800af0e <_vfprintf_r+0x95e>
 800af1c:	9b08      	ldr	r3, [sp, #32]
 800af1e:	2b46      	cmp	r3, #70	; 0x46
 800af20:	f47f ae51 	bne.w	800abc6 <_vfprintf_r+0x616>
 800af24:	f00b 0301 	and.w	r3, fp, #1
 800af28:	2d00      	cmp	r5, #0
 800af2a:	ea43 0308 	orr.w	r3, r3, r8
 800af2e:	dd18      	ble.n	800af62 <_vfprintf_r+0x9b2>
 800af30:	b383      	cbz	r3, 800af94 <_vfprintf_r+0x9e4>
 800af32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af34:	18eb      	adds	r3, r5, r3
 800af36:	4498      	add	r8, r3
 800af38:	2366      	movs	r3, #102	; 0x66
 800af3a:	9307      	str	r3, [sp, #28]
 800af3c:	e030      	b.n	800afa0 <_vfprintf_r+0x9f0>
 800af3e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800af42:	f802 6b01 	strb.w	r6, [r2], #1
 800af46:	e675      	b.n	800ac34 <_vfprintf_r+0x684>
 800af48:	b941      	cbnz	r1, 800af5c <_vfprintf_r+0x9ac>
 800af4a:	2230      	movs	r2, #48	; 0x30
 800af4c:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 800af50:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800af54:	3330      	adds	r3, #48	; 0x30
 800af56:	f802 3b01 	strb.w	r3, [r2], #1
 800af5a:	e677      	b.n	800ac4c <_vfprintf_r+0x69c>
 800af5c:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800af60:	e7f8      	b.n	800af54 <_vfprintf_r+0x9a4>
 800af62:	b1cb      	cbz	r3, 800af98 <_vfprintf_r+0x9e8>
 800af64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af66:	3301      	adds	r3, #1
 800af68:	e7e5      	b.n	800af36 <_vfprintf_r+0x986>
 800af6a:	9b05      	ldr	r3, [sp, #20]
 800af6c:	429d      	cmp	r5, r3
 800af6e:	db07      	blt.n	800af80 <_vfprintf_r+0x9d0>
 800af70:	f01b 0f01 	tst.w	fp, #1
 800af74:	d029      	beq.n	800afca <_vfprintf_r+0xa1a>
 800af76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af78:	eb05 0803 	add.w	r8, r5, r3
 800af7c:	2367      	movs	r3, #103	; 0x67
 800af7e:	e7dc      	b.n	800af3a <_vfprintf_r+0x98a>
 800af80:	9b05      	ldr	r3, [sp, #20]
 800af82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af84:	2d00      	cmp	r5, #0
 800af86:	eb03 0802 	add.w	r8, r3, r2
 800af8a:	dcf7      	bgt.n	800af7c <_vfprintf_r+0x9cc>
 800af8c:	f1c5 0301 	rsb	r3, r5, #1
 800af90:	4498      	add	r8, r3
 800af92:	e7f3      	b.n	800af7c <_vfprintf_r+0x9cc>
 800af94:	46a8      	mov	r8, r5
 800af96:	e7cf      	b.n	800af38 <_vfprintf_r+0x988>
 800af98:	2366      	movs	r3, #102	; 0x66
 800af9a:	9307      	str	r3, [sp, #28]
 800af9c:	f04f 0801 	mov.w	r8, #1
 800afa0:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 800afa4:	9309      	str	r3, [sp, #36]	; 0x24
 800afa6:	d023      	beq.n	800aff0 <_vfprintf_r+0xa40>
 800afa8:	2300      	movs	r3, #0
 800afaa:	2d00      	cmp	r5, #0
 800afac:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800afb0:	f77f ae62 	ble.w	800ac78 <_vfprintf_r+0x6c8>
 800afb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	2bff      	cmp	r3, #255	; 0xff
 800afba:	d108      	bne.n	800afce <_vfprintf_r+0xa1e>
 800afbc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800afc0:	4413      	add	r3, r2
 800afc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800afc4:	fb02 8803 	mla	r8, r2, r3, r8
 800afc8:	e656      	b.n	800ac78 <_vfprintf_r+0x6c8>
 800afca:	46a8      	mov	r8, r5
 800afcc:	e7d6      	b.n	800af7c <_vfprintf_r+0x9cc>
 800afce:	42ab      	cmp	r3, r5
 800afd0:	daf4      	bge.n	800afbc <_vfprintf_r+0xa0c>
 800afd2:	1aed      	subs	r5, r5, r3
 800afd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afd6:	785b      	ldrb	r3, [r3, #1]
 800afd8:	b133      	cbz	r3, 800afe8 <_vfprintf_r+0xa38>
 800afda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afdc:	3301      	adds	r3, #1
 800afde:	9309      	str	r3, [sp, #36]	; 0x24
 800afe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afe2:	3301      	adds	r3, #1
 800afe4:	930a      	str	r3, [sp, #40]	; 0x28
 800afe6:	e7e5      	b.n	800afb4 <_vfprintf_r+0xa04>
 800afe8:	9b08      	ldr	r3, [sp, #32]
 800afea:	3301      	adds	r3, #1
 800afec:	9308      	str	r3, [sp, #32]
 800afee:	e7e1      	b.n	800afb4 <_vfprintf_r+0xa04>
 800aff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aff2:	9308      	str	r3, [sp, #32]
 800aff4:	e640      	b.n	800ac78 <_vfprintf_r+0x6c8>
 800aff6:	4632      	mov	r2, r6
 800aff8:	f01b 0f20 	tst.w	fp, #32
 800affc:	f852 3b04 	ldr.w	r3, [r2], #4
 800b000:	9206      	str	r2, [sp, #24]
 800b002:	d009      	beq.n	800b018 <_vfprintf_r+0xa68>
 800b004:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b006:	4610      	mov	r0, r2
 800b008:	17d1      	asrs	r1, r2, #31
 800b00a:	e9c3 0100 	strd	r0, r1, [r3]
 800b00e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b010:	9e06      	ldr	r6, [sp, #24]
 800b012:	9303      	str	r3, [sp, #12]
 800b014:	f7ff bb4f 	b.w	800a6b6 <_vfprintf_r+0x106>
 800b018:	f01b 0f10 	tst.w	fp, #16
 800b01c:	d002      	beq.n	800b024 <_vfprintf_r+0xa74>
 800b01e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b020:	601a      	str	r2, [r3, #0]
 800b022:	e7f4      	b.n	800b00e <_vfprintf_r+0xa5e>
 800b024:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800b028:	d002      	beq.n	800b030 <_vfprintf_r+0xa80>
 800b02a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b02c:	801a      	strh	r2, [r3, #0]
 800b02e:	e7ee      	b.n	800b00e <_vfprintf_r+0xa5e>
 800b030:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800b034:	d0f3      	beq.n	800b01e <_vfprintf_r+0xa6e>
 800b036:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b038:	701a      	strb	r2, [r3, #0]
 800b03a:	e7e8      	b.n	800b00e <_vfprintf_r+0xa5e>
 800b03c:	f04b 0b10 	orr.w	fp, fp, #16
 800b040:	f01b 0f20 	tst.w	fp, #32
 800b044:	d01e      	beq.n	800b084 <_vfprintf_r+0xad4>
 800b046:	3607      	adds	r6, #7
 800b048:	f026 0307 	bic.w	r3, r6, #7
 800b04c:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 800b050:	9306      	str	r3, [sp, #24]
 800b052:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800b056:	2300      	movs	r3, #0
 800b058:	2200      	movs	r2, #0
 800b05a:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 800b05e:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b062:	f000 84a9 	beq.w	800b9b8 <_vfprintf_r+0x1408>
 800b066:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 800b06a:	9204      	str	r2, [sp, #16]
 800b06c:	ea56 0207 	orrs.w	r2, r6, r7
 800b070:	f040 84a8 	bne.w	800b9c4 <_vfprintf_r+0x1414>
 800b074:	f1b8 0f00 	cmp.w	r8, #0
 800b078:	f000 8104 	beq.w	800b284 <_vfprintf_r+0xcd4>
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	f040 84a4 	bne.w	800b9ca <_vfprintf_r+0x141a>
 800b082:	e09a      	b.n	800b1ba <_vfprintf_r+0xc0a>
 800b084:	1d33      	adds	r3, r6, #4
 800b086:	f01b 0f10 	tst.w	fp, #16
 800b08a:	9306      	str	r3, [sp, #24]
 800b08c:	d001      	beq.n	800b092 <_vfprintf_r+0xae2>
 800b08e:	6836      	ldr	r6, [r6, #0]
 800b090:	e003      	b.n	800b09a <_vfprintf_r+0xaea>
 800b092:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800b096:	d002      	beq.n	800b09e <_vfprintf_r+0xaee>
 800b098:	8836      	ldrh	r6, [r6, #0]
 800b09a:	2700      	movs	r7, #0
 800b09c:	e7d9      	b.n	800b052 <_vfprintf_r+0xaa2>
 800b09e:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800b0a2:	d0f4      	beq.n	800b08e <_vfprintf_r+0xade>
 800b0a4:	7836      	ldrb	r6, [r6, #0]
 800b0a6:	e7f8      	b.n	800b09a <_vfprintf_r+0xaea>
 800b0a8:	4633      	mov	r3, r6
 800b0aa:	2278      	movs	r2, #120	; 0x78
 800b0ac:	f853 6b04 	ldr.w	r6, [r3], #4
 800b0b0:	9306      	str	r3, [sp, #24]
 800b0b2:	f647 0330 	movw	r3, #30768	; 0x7830
 800b0b6:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 800b0ba:	4ba8      	ldr	r3, [pc, #672]	; (800b35c <_vfprintf_r+0xdac>)
 800b0bc:	9316      	str	r3, [sp, #88]	; 0x58
 800b0be:	2700      	movs	r7, #0
 800b0c0:	f04b 0b02 	orr.w	fp, fp, #2
 800b0c4:	2302      	movs	r3, #2
 800b0c6:	9207      	str	r2, [sp, #28]
 800b0c8:	e7c6      	b.n	800b058 <_vfprintf_r+0xaa8>
 800b0ca:	4632      	mov	r2, r6
 800b0cc:	2500      	movs	r5, #0
 800b0ce:	f852 3b04 	ldr.w	r3, [r2], #4
 800b0d2:	9303      	str	r3, [sp, #12]
 800b0d4:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b0d8:	9206      	str	r2, [sp, #24]
 800b0da:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 800b0de:	d010      	beq.n	800b102 <_vfprintf_r+0xb52>
 800b0e0:	9803      	ldr	r0, [sp, #12]
 800b0e2:	4642      	mov	r2, r8
 800b0e4:	4629      	mov	r1, r5
 800b0e6:	f7f5 f8a3 	bl	8000230 <memchr>
 800b0ea:	9004      	str	r0, [sp, #16]
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	f000 80df 	beq.w	800b2b0 <_vfprintf_r+0xd00>
 800b0f2:	9a03      	ldr	r2, [sp, #12]
 800b0f4:	9504      	str	r5, [sp, #16]
 800b0f6:	e9cd 5508 	strd	r5, r5, [sp, #32]
 800b0fa:	eba0 0802 	sub.w	r8, r0, r2
 800b0fe:	462e      	mov	r6, r5
 800b100:	e5c2      	b.n	800ac88 <_vfprintf_r+0x6d8>
 800b102:	9803      	ldr	r0, [sp, #12]
 800b104:	f7f5 f88c 	bl	8000220 <strlen>
 800b108:	462e      	mov	r6, r5
 800b10a:	4680      	mov	r8, r0
 800b10c:	9504      	str	r5, [sp, #16]
 800b10e:	4633      	mov	r3, r6
 800b110:	e45e      	b.n	800a9d0 <_vfprintf_r+0x420>
 800b112:	f04b 0b10 	orr.w	fp, fp, #16
 800b116:	f01b 0f20 	tst.w	fp, #32
 800b11a:	d007      	beq.n	800b12c <_vfprintf_r+0xb7c>
 800b11c:	3607      	adds	r6, #7
 800b11e:	f026 0307 	bic.w	r3, r6, #7
 800b122:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 800b126:	9306      	str	r3, [sp, #24]
 800b128:	2301      	movs	r3, #1
 800b12a:	e795      	b.n	800b058 <_vfprintf_r+0xaa8>
 800b12c:	1d33      	adds	r3, r6, #4
 800b12e:	f01b 0f10 	tst.w	fp, #16
 800b132:	9306      	str	r3, [sp, #24]
 800b134:	d001      	beq.n	800b13a <_vfprintf_r+0xb8a>
 800b136:	6836      	ldr	r6, [r6, #0]
 800b138:	e003      	b.n	800b142 <_vfprintf_r+0xb92>
 800b13a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800b13e:	d002      	beq.n	800b146 <_vfprintf_r+0xb96>
 800b140:	8836      	ldrh	r6, [r6, #0]
 800b142:	2700      	movs	r7, #0
 800b144:	e7f0      	b.n	800b128 <_vfprintf_r+0xb78>
 800b146:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800b14a:	d0f4      	beq.n	800b136 <_vfprintf_r+0xb86>
 800b14c:	7836      	ldrb	r6, [r6, #0]
 800b14e:	e7f8      	b.n	800b142 <_vfprintf_r+0xb92>
 800b150:	4b83      	ldr	r3, [pc, #524]	; (800b360 <_vfprintf_r+0xdb0>)
 800b152:	9316      	str	r3, [sp, #88]	; 0x58
 800b154:	f01b 0f20 	tst.w	fp, #32
 800b158:	d019      	beq.n	800b18e <_vfprintf_r+0xbde>
 800b15a:	3607      	adds	r6, #7
 800b15c:	f026 0307 	bic.w	r3, r6, #7
 800b160:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 800b164:	9306      	str	r3, [sp, #24]
 800b166:	f01b 0f01 	tst.w	fp, #1
 800b16a:	d00a      	beq.n	800b182 <_vfprintf_r+0xbd2>
 800b16c:	ea56 0307 	orrs.w	r3, r6, r7
 800b170:	d007      	beq.n	800b182 <_vfprintf_r+0xbd2>
 800b172:	2330      	movs	r3, #48	; 0x30
 800b174:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800b178:	9b07      	ldr	r3, [sp, #28]
 800b17a:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800b17e:	f04b 0b02 	orr.w	fp, fp, #2
 800b182:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800b186:	2302      	movs	r3, #2
 800b188:	e766      	b.n	800b058 <_vfprintf_r+0xaa8>
 800b18a:	4b74      	ldr	r3, [pc, #464]	; (800b35c <_vfprintf_r+0xdac>)
 800b18c:	e7e1      	b.n	800b152 <_vfprintf_r+0xba2>
 800b18e:	1d33      	adds	r3, r6, #4
 800b190:	f01b 0f10 	tst.w	fp, #16
 800b194:	9306      	str	r3, [sp, #24]
 800b196:	d001      	beq.n	800b19c <_vfprintf_r+0xbec>
 800b198:	6836      	ldr	r6, [r6, #0]
 800b19a:	e003      	b.n	800b1a4 <_vfprintf_r+0xbf4>
 800b19c:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800b1a0:	d002      	beq.n	800b1a8 <_vfprintf_r+0xbf8>
 800b1a2:	8836      	ldrh	r6, [r6, #0]
 800b1a4:	2700      	movs	r7, #0
 800b1a6:	e7de      	b.n	800b166 <_vfprintf_r+0xbb6>
 800b1a8:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800b1ac:	d0f4      	beq.n	800b198 <_vfprintf_r+0xbe8>
 800b1ae:	7836      	ldrb	r6, [r6, #0]
 800b1b0:	e7f8      	b.n	800b1a4 <_vfprintf_r+0xbf4>
 800b1b2:	2f00      	cmp	r7, #0
 800b1b4:	bf08      	it	eq
 800b1b6:	2e0a      	cmpeq	r6, #10
 800b1b8:	d206      	bcs.n	800b1c8 <_vfprintf_r+0xc18>
 800b1ba:	3630      	adds	r6, #48	; 0x30
 800b1bc:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 800b1c0:	f20d 1337 	addw	r3, sp, #311	; 0x137
 800b1c4:	f000 bc23 	b.w	800ba0e <_vfprintf_r+0x145e>
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	9305      	str	r3, [sp, #20]
 800b1cc:	9b04      	ldr	r3, [sp, #16]
 800b1ce:	ad4e      	add	r5, sp, #312	; 0x138
 800b1d0:	f403 6b80 	and.w	fp, r3, #1024	; 0x400
 800b1d4:	1e6b      	subs	r3, r5, #1
 800b1d6:	9303      	str	r3, [sp, #12]
 800b1d8:	220a      	movs	r2, #10
 800b1da:	2300      	movs	r3, #0
 800b1dc:	4630      	mov	r0, r6
 800b1de:	4639      	mov	r1, r7
 800b1e0:	f7f5 fd5a 	bl	8000c98 <__aeabi_uldivmod>
 800b1e4:	9b05      	ldr	r3, [sp, #20]
 800b1e6:	3230      	adds	r2, #48	; 0x30
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	f805 2c01 	strb.w	r2, [r5, #-1]
 800b1ee:	9305      	str	r3, [sp, #20]
 800b1f0:	f1bb 0f00 	cmp.w	fp, #0
 800b1f4:	d019      	beq.n	800b22a <_vfprintf_r+0xc7a>
 800b1f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1f8:	9a05      	ldr	r2, [sp, #20]
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d114      	bne.n	800b22a <_vfprintf_r+0xc7a>
 800b200:	2aff      	cmp	r2, #255	; 0xff
 800b202:	d012      	beq.n	800b22a <_vfprintf_r+0xc7a>
 800b204:	2f00      	cmp	r7, #0
 800b206:	bf08      	it	eq
 800b208:	2e0a      	cmpeq	r6, #10
 800b20a:	d30e      	bcc.n	800b22a <_vfprintf_r+0xc7a>
 800b20c:	9b03      	ldr	r3, [sp, #12]
 800b20e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b210:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b212:	1a9b      	subs	r3, r3, r2
 800b214:	4618      	mov	r0, r3
 800b216:	9303      	str	r3, [sp, #12]
 800b218:	f002 ff09 	bl	800e02e <strncpy>
 800b21c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b21e:	785d      	ldrb	r5, [r3, #1]
 800b220:	b1e5      	cbz	r5, 800b25c <_vfprintf_r+0xcac>
 800b222:	3301      	adds	r3, #1
 800b224:	930a      	str	r3, [sp, #40]	; 0x28
 800b226:	2300      	movs	r3, #0
 800b228:	9305      	str	r3, [sp, #20]
 800b22a:	220a      	movs	r2, #10
 800b22c:	2300      	movs	r3, #0
 800b22e:	4630      	mov	r0, r6
 800b230:	4639      	mov	r1, r7
 800b232:	f7f5 fd31 	bl	8000c98 <__aeabi_uldivmod>
 800b236:	2f00      	cmp	r7, #0
 800b238:	bf08      	it	eq
 800b23a:	2e0a      	cmpeq	r6, #10
 800b23c:	d20a      	bcs.n	800b254 <_vfprintf_r+0xca4>
 800b23e:	9b03      	ldr	r3, [sp, #12]
 800b240:	f8dd b010 	ldr.w	fp, [sp, #16]
 800b244:	aa4e      	add	r2, sp, #312	; 0x138
 800b246:	4646      	mov	r6, r8
 800b248:	eba2 0803 	sub.w	r8, r2, r3
 800b24c:	2300      	movs	r3, #0
 800b24e:	9304      	str	r3, [sp, #16]
 800b250:	f7ff bbbe 	b.w	800a9d0 <_vfprintf_r+0x420>
 800b254:	9d03      	ldr	r5, [sp, #12]
 800b256:	4606      	mov	r6, r0
 800b258:	460f      	mov	r7, r1
 800b25a:	e7bb      	b.n	800b1d4 <_vfprintf_r+0xc24>
 800b25c:	9505      	str	r5, [sp, #20]
 800b25e:	e7e4      	b.n	800b22a <_vfprintf_r+0xc7a>
 800b260:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b262:	f006 030f 	and.w	r3, r6, #15
 800b266:	5cd3      	ldrb	r3, [r2, r3]
 800b268:	9a03      	ldr	r2, [sp, #12]
 800b26a:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800b26e:	0933      	lsrs	r3, r6, #4
 800b270:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800b274:	9203      	str	r2, [sp, #12]
 800b276:	093a      	lsrs	r2, r7, #4
 800b278:	461e      	mov	r6, r3
 800b27a:	4617      	mov	r7, r2
 800b27c:	ea56 0307 	orrs.w	r3, r6, r7
 800b280:	d1ee      	bne.n	800b260 <_vfprintf_r+0xcb0>
 800b282:	e7dc      	b.n	800b23e <_vfprintf_r+0xc8e>
 800b284:	b933      	cbnz	r3, 800b294 <_vfprintf_r+0xce4>
 800b286:	f01b 0f01 	tst.w	fp, #1
 800b28a:	d003      	beq.n	800b294 <_vfprintf_r+0xce4>
 800b28c:	2330      	movs	r3, #48	; 0x30
 800b28e:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 800b292:	e795      	b.n	800b1c0 <_vfprintf_r+0xc10>
 800b294:	ab4e      	add	r3, sp, #312	; 0x138
 800b296:	e3ba      	b.n	800ba0e <_vfprintf_r+0x145e>
 800b298:	9b07      	ldr	r3, [sp, #28]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	f000 837d 	beq.w	800b99a <_vfprintf_r+0x13ea>
 800b2a0:	2000      	movs	r0, #0
 800b2a2:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800b2a6:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 800b2aa:	9606      	str	r6, [sp, #24]
 800b2ac:	f7ff bb1e 	b.w	800a8ec <_vfprintf_r+0x33c>
 800b2b0:	9e04      	ldr	r6, [sp, #16]
 800b2b2:	e72c      	b.n	800b10e <_vfprintf_r+0xb5e>
 800b2b4:	2010      	movs	r0, #16
 800b2b6:	4402      	add	r2, r0
 800b2b8:	2b07      	cmp	r3, #7
 800b2ba:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800b2be:	6060      	str	r0, [r4, #4]
 800b2c0:	dd08      	ble.n	800b2d4 <_vfprintf_r+0xd24>
 800b2c2:	aa22      	add	r2, sp, #136	; 0x88
 800b2c4:	4649      	mov	r1, r9
 800b2c6:	4650      	mov	r0, sl
 800b2c8:	f002 fed1 	bl	800e06e <__sprint_r>
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	f040 8342 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800b2d2:	a925      	add	r1, sp, #148	; 0x94
 800b2d4:	3f10      	subs	r7, #16
 800b2d6:	460c      	mov	r4, r1
 800b2d8:	e4f1      	b.n	800acbe <_vfprintf_r+0x70e>
 800b2da:	460c      	mov	r4, r1
 800b2dc:	e50a      	b.n	800acf4 <_vfprintf_r+0x744>
 800b2de:	aa22      	add	r2, sp, #136	; 0x88
 800b2e0:	4649      	mov	r1, r9
 800b2e2:	4650      	mov	r0, sl
 800b2e4:	f002 fec3 	bl	800e06e <__sprint_r>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	f040 8334 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800b2ee:	ac25      	add	r4, sp, #148	; 0x94
 800b2f0:	e512      	b.n	800ad18 <_vfprintf_r+0x768>
 800b2f2:	aa22      	add	r2, sp, #136	; 0x88
 800b2f4:	4649      	mov	r1, r9
 800b2f6:	4650      	mov	r0, sl
 800b2f8:	f002 feb9 	bl	800e06e <__sprint_r>
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	f040 832a 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800b302:	ac25      	add	r4, sp, #148	; 0x94
 800b304:	e518      	b.n	800ad38 <_vfprintf_r+0x788>
 800b306:	2010      	movs	r0, #16
 800b308:	4402      	add	r2, r0
 800b30a:	2b07      	cmp	r3, #7
 800b30c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800b310:	6060      	str	r0, [r4, #4]
 800b312:	dd08      	ble.n	800b326 <_vfprintf_r+0xd76>
 800b314:	aa22      	add	r2, sp, #136	; 0x88
 800b316:	4649      	mov	r1, r9
 800b318:	4650      	mov	r0, sl
 800b31a:	f002 fea8 	bl	800e06e <__sprint_r>
 800b31e:	2800      	cmp	r0, #0
 800b320:	f040 8319 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800b324:	a925      	add	r1, sp, #148	; 0x94
 800b326:	3f10      	subs	r7, #16
 800b328:	460c      	mov	r4, r1
 800b32a:	e50d      	b.n	800ad48 <_vfprintf_r+0x798>
 800b32c:	460c      	mov	r4, r1
 800b32e:	e526      	b.n	800ad7e <_vfprintf_r+0x7ce>
 800b330:	2010      	movs	r0, #16
 800b332:	4402      	add	r2, r0
 800b334:	2b07      	cmp	r3, #7
 800b336:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800b33a:	6060      	str	r0, [r4, #4]
 800b33c:	dd08      	ble.n	800b350 <_vfprintf_r+0xda0>
 800b33e:	aa22      	add	r2, sp, #136	; 0x88
 800b340:	4649      	mov	r1, r9
 800b342:	4650      	mov	r0, sl
 800b344:	f002 fe93 	bl	800e06e <__sprint_r>
 800b348:	2800      	cmp	r0, #0
 800b34a:	f040 8304 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800b34e:	a925      	add	r1, sp, #148	; 0x94
 800b350:	3e10      	subs	r6, #16
 800b352:	460c      	mov	r4, r1
 800b354:	e518      	b.n	800ad88 <_vfprintf_r+0x7d8>
 800b356:	460c      	mov	r4, r1
 800b358:	e530      	b.n	800adbc <_vfprintf_r+0x80c>
 800b35a:	bf00      	nop
 800b35c:	08010ec8 	.word	0x08010ec8
 800b360:	08010ed9 	.word	0x08010ed9
 800b364:	9b07      	ldr	r3, [sp, #28]
 800b366:	2b65      	cmp	r3, #101	; 0x65
 800b368:	f340 8242 	ble.w	800b7f0 <_vfprintf_r+0x1240>
 800b36c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b370:	2200      	movs	r2, #0
 800b372:	2300      	movs	r3, #0
 800b374:	f7f5 fbd0 	bl	8000b18 <__aeabi_dcmpeq>
 800b378:	2800      	cmp	r0, #0
 800b37a:	d068      	beq.n	800b44e <_vfprintf_r+0xe9e>
 800b37c:	4b6d      	ldr	r3, [pc, #436]	; (800b534 <_vfprintf_r+0xf84>)
 800b37e:	6023      	str	r3, [r4, #0]
 800b380:	2301      	movs	r3, #1
 800b382:	441e      	add	r6, r3
 800b384:	6063      	str	r3, [r4, #4]
 800b386:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b388:	9624      	str	r6, [sp, #144]	; 0x90
 800b38a:	3301      	adds	r3, #1
 800b38c:	2b07      	cmp	r3, #7
 800b38e:	9323      	str	r3, [sp, #140]	; 0x8c
 800b390:	dc37      	bgt.n	800b402 <_vfprintf_r+0xe52>
 800b392:	3408      	adds	r4, #8
 800b394:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b396:	9a05      	ldr	r2, [sp, #20]
 800b398:	4293      	cmp	r3, r2
 800b39a:	db03      	blt.n	800b3a4 <_vfprintf_r+0xdf4>
 800b39c:	f01b 0f01 	tst.w	fp, #1
 800b3a0:	f43f ad2b 	beq.w	800adfa <_vfprintf_r+0x84a>
 800b3a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b3a6:	6023      	str	r3, [r4, #0]
 800b3a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3ac:	6063      	str	r3, [r4, #4]
 800b3ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b3b0:	4413      	add	r3, r2
 800b3b2:	9324      	str	r3, [sp, #144]	; 0x90
 800b3b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	2b07      	cmp	r3, #7
 800b3ba:	9323      	str	r3, [sp, #140]	; 0x8c
 800b3bc:	dc2b      	bgt.n	800b416 <_vfprintf_r+0xe66>
 800b3be:	3408      	adds	r4, #8
 800b3c0:	9b05      	ldr	r3, [sp, #20]
 800b3c2:	1e5d      	subs	r5, r3, #1
 800b3c4:	2d00      	cmp	r5, #0
 800b3c6:	f77f ad18 	ble.w	800adfa <_vfprintf_r+0x84a>
 800b3ca:	4e5b      	ldr	r6, [pc, #364]	; (800b538 <_vfprintf_r+0xf88>)
 800b3cc:	2710      	movs	r7, #16
 800b3ce:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800b3d2:	2d10      	cmp	r5, #16
 800b3d4:	f103 0301 	add.w	r3, r3, #1
 800b3d8:	f104 0108 	add.w	r1, r4, #8
 800b3dc:	6026      	str	r6, [r4, #0]
 800b3de:	dc24      	bgt.n	800b42a <_vfprintf_r+0xe7a>
 800b3e0:	6065      	str	r5, [r4, #4]
 800b3e2:	2b07      	cmp	r3, #7
 800b3e4:	4415      	add	r5, r2
 800b3e6:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800b3ea:	f340 8293 	ble.w	800b914 <_vfprintf_r+0x1364>
 800b3ee:	aa22      	add	r2, sp, #136	; 0x88
 800b3f0:	4649      	mov	r1, r9
 800b3f2:	4650      	mov	r0, sl
 800b3f4:	f002 fe3b 	bl	800e06e <__sprint_r>
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	f040 82ac 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800b3fe:	ac25      	add	r4, sp, #148	; 0x94
 800b400:	e4fb      	b.n	800adfa <_vfprintf_r+0x84a>
 800b402:	aa22      	add	r2, sp, #136	; 0x88
 800b404:	4649      	mov	r1, r9
 800b406:	4650      	mov	r0, sl
 800b408:	f002 fe31 	bl	800e06e <__sprint_r>
 800b40c:	2800      	cmp	r0, #0
 800b40e:	f040 82a2 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800b412:	ac25      	add	r4, sp, #148	; 0x94
 800b414:	e7be      	b.n	800b394 <_vfprintf_r+0xde4>
 800b416:	aa22      	add	r2, sp, #136	; 0x88
 800b418:	4649      	mov	r1, r9
 800b41a:	4650      	mov	r0, sl
 800b41c:	f002 fe27 	bl	800e06e <__sprint_r>
 800b420:	2800      	cmp	r0, #0
 800b422:	f040 8298 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800b426:	ac25      	add	r4, sp, #148	; 0x94
 800b428:	e7ca      	b.n	800b3c0 <_vfprintf_r+0xe10>
 800b42a:	3210      	adds	r2, #16
 800b42c:	2b07      	cmp	r3, #7
 800b42e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800b432:	6067      	str	r7, [r4, #4]
 800b434:	dd08      	ble.n	800b448 <_vfprintf_r+0xe98>
 800b436:	aa22      	add	r2, sp, #136	; 0x88
 800b438:	4649      	mov	r1, r9
 800b43a:	4650      	mov	r0, sl
 800b43c:	f002 fe17 	bl	800e06e <__sprint_r>
 800b440:	2800      	cmp	r0, #0
 800b442:	f040 8288 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800b446:	a925      	add	r1, sp, #148	; 0x94
 800b448:	3d10      	subs	r5, #16
 800b44a:	460c      	mov	r4, r1
 800b44c:	e7bf      	b.n	800b3ce <_vfprintf_r+0xe1e>
 800b44e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b450:	2b00      	cmp	r3, #0
 800b452:	dc73      	bgt.n	800b53c <_vfprintf_r+0xf8c>
 800b454:	4b37      	ldr	r3, [pc, #220]	; (800b534 <_vfprintf_r+0xf84>)
 800b456:	6023      	str	r3, [r4, #0]
 800b458:	2301      	movs	r3, #1
 800b45a:	441e      	add	r6, r3
 800b45c:	6063      	str	r3, [r4, #4]
 800b45e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b460:	9624      	str	r6, [sp, #144]	; 0x90
 800b462:	3301      	adds	r3, #1
 800b464:	2b07      	cmp	r3, #7
 800b466:	9323      	str	r3, [sp, #140]	; 0x8c
 800b468:	dc3d      	bgt.n	800b4e6 <_vfprintf_r+0xf36>
 800b46a:	3408      	adds	r4, #8
 800b46c:	9905      	ldr	r1, [sp, #20]
 800b46e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b470:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b472:	430a      	orrs	r2, r1
 800b474:	f00b 0101 	and.w	r1, fp, #1
 800b478:	430a      	orrs	r2, r1
 800b47a:	f43f acbe 	beq.w	800adfa <_vfprintf_r+0x84a>
 800b47e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b480:	6022      	str	r2, [r4, #0]
 800b482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b484:	6062      	str	r2, [r4, #4]
 800b486:	4413      	add	r3, r2
 800b488:	9324      	str	r3, [sp, #144]	; 0x90
 800b48a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b48c:	3301      	adds	r3, #1
 800b48e:	2b07      	cmp	r3, #7
 800b490:	9323      	str	r3, [sp, #140]	; 0x8c
 800b492:	dc32      	bgt.n	800b4fa <_vfprintf_r+0xf4a>
 800b494:	3408      	adds	r4, #8
 800b496:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800b498:	2d00      	cmp	r5, #0
 800b49a:	da1b      	bge.n	800b4d4 <_vfprintf_r+0xf24>
 800b49c:	4e26      	ldr	r6, [pc, #152]	; (800b538 <_vfprintf_r+0xf88>)
 800b49e:	426d      	negs	r5, r5
 800b4a0:	4623      	mov	r3, r4
 800b4a2:	2710      	movs	r7, #16
 800b4a4:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 800b4a8:	2d10      	cmp	r5, #16
 800b4aa:	f102 0201 	add.w	r2, r2, #1
 800b4ae:	f104 0408 	add.w	r4, r4, #8
 800b4b2:	601e      	str	r6, [r3, #0]
 800b4b4:	dc2b      	bgt.n	800b50e <_vfprintf_r+0xf5e>
 800b4b6:	605d      	str	r5, [r3, #4]
 800b4b8:	2a07      	cmp	r2, #7
 800b4ba:	440d      	add	r5, r1
 800b4bc:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 800b4c0:	dd08      	ble.n	800b4d4 <_vfprintf_r+0xf24>
 800b4c2:	aa22      	add	r2, sp, #136	; 0x88
 800b4c4:	4649      	mov	r1, r9
 800b4c6:	4650      	mov	r0, sl
 800b4c8:	f002 fdd1 	bl	800e06e <__sprint_r>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	f040 8242 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800b4d2:	ac25      	add	r4, sp, #148	; 0x94
 800b4d4:	9b03      	ldr	r3, [sp, #12]
 800b4d6:	6023      	str	r3, [r4, #0]
 800b4d8:	9b05      	ldr	r3, [sp, #20]
 800b4da:	9a05      	ldr	r2, [sp, #20]
 800b4dc:	6063      	str	r3, [r4, #4]
 800b4de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b4e0:	4413      	add	r3, r2
 800b4e2:	9324      	str	r3, [sp, #144]	; 0x90
 800b4e4:	e482      	b.n	800adec <_vfprintf_r+0x83c>
 800b4e6:	aa22      	add	r2, sp, #136	; 0x88
 800b4e8:	4649      	mov	r1, r9
 800b4ea:	4650      	mov	r0, sl
 800b4ec:	f002 fdbf 	bl	800e06e <__sprint_r>
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	f040 8230 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800b4f6:	ac25      	add	r4, sp, #148	; 0x94
 800b4f8:	e7b8      	b.n	800b46c <_vfprintf_r+0xebc>
 800b4fa:	aa22      	add	r2, sp, #136	; 0x88
 800b4fc:	4649      	mov	r1, r9
 800b4fe:	4650      	mov	r0, sl
 800b500:	f002 fdb5 	bl	800e06e <__sprint_r>
 800b504:	2800      	cmp	r0, #0
 800b506:	f040 8226 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800b50a:	ac25      	add	r4, sp, #148	; 0x94
 800b50c:	e7c3      	b.n	800b496 <_vfprintf_r+0xee6>
 800b50e:	3110      	adds	r1, #16
 800b510:	2a07      	cmp	r2, #7
 800b512:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 800b516:	605f      	str	r7, [r3, #4]
 800b518:	dd08      	ble.n	800b52c <_vfprintf_r+0xf7c>
 800b51a:	aa22      	add	r2, sp, #136	; 0x88
 800b51c:	4649      	mov	r1, r9
 800b51e:	4650      	mov	r0, sl
 800b520:	f002 fda5 	bl	800e06e <__sprint_r>
 800b524:	2800      	cmp	r0, #0
 800b526:	f040 8216 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800b52a:	ac25      	add	r4, sp, #148	; 0x94
 800b52c:	3d10      	subs	r5, #16
 800b52e:	4623      	mov	r3, r4
 800b530:	e7b8      	b.n	800b4a4 <_vfprintf_r+0xef4>
 800b532:	bf00      	nop
 800b534:	08010eea 	.word	0x08010eea
 800b538:	08010efc 	.word	0x08010efc
 800b53c:	9b05      	ldr	r3, [sp, #20]
 800b53e:	42ab      	cmp	r3, r5
 800b540:	bfa8      	it	ge
 800b542:	462b      	movge	r3, r5
 800b544:	2b00      	cmp	r3, #0
 800b546:	461f      	mov	r7, r3
 800b548:	dd0b      	ble.n	800b562 <_vfprintf_r+0xfb2>
 800b54a:	9b03      	ldr	r3, [sp, #12]
 800b54c:	e9c4 3700 	strd	r3, r7, [r4]
 800b550:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b552:	3301      	adds	r3, #1
 800b554:	443e      	add	r6, r7
 800b556:	2b07      	cmp	r3, #7
 800b558:	9624      	str	r6, [sp, #144]	; 0x90
 800b55a:	9323      	str	r3, [sp, #140]	; 0x8c
 800b55c:	f300 808c 	bgt.w	800b678 <_vfprintf_r+0x10c8>
 800b560:	3408      	adds	r4, #8
 800b562:	2f00      	cmp	r7, #0
 800b564:	bfac      	ite	ge
 800b566:	1bee      	subge	r6, r5, r7
 800b568:	462e      	movlt	r6, r5
 800b56a:	2e00      	cmp	r6, #0
 800b56c:	dd1c      	ble.n	800b5a8 <_vfprintf_r+0xff8>
 800b56e:	4f9f      	ldr	r7, [pc, #636]	; (800b7ec <_vfprintf_r+0x123c>)
 800b570:	f04f 0810 	mov.w	r8, #16
 800b574:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800b578:	2e10      	cmp	r6, #16
 800b57a:	f103 0301 	add.w	r3, r3, #1
 800b57e:	f104 0108 	add.w	r1, r4, #8
 800b582:	6027      	str	r7, [r4, #0]
 800b584:	f300 8082 	bgt.w	800b68c <_vfprintf_r+0x10dc>
 800b588:	6066      	str	r6, [r4, #4]
 800b58a:	2b07      	cmp	r3, #7
 800b58c:	4416      	add	r6, r2
 800b58e:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800b592:	f340 808e 	ble.w	800b6b2 <_vfprintf_r+0x1102>
 800b596:	aa22      	add	r2, sp, #136	; 0x88
 800b598:	4649      	mov	r1, r9
 800b59a:	4650      	mov	r0, sl
 800b59c:	f002 fd67 	bl	800e06e <__sprint_r>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	f040 81d8 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800b5a6:	ac25      	add	r4, sp, #148	; 0x94
 800b5a8:	9b03      	ldr	r3, [sp, #12]
 800b5aa:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 800b5ae:	441d      	add	r5, r3
 800b5b0:	d00d      	beq.n	800b5ce <_vfprintf_r+0x101e>
 800b5b2:	4e8e      	ldr	r6, [pc, #568]	; (800b7ec <_vfprintf_r+0x123c>)
 800b5b4:	2710      	movs	r7, #16
 800b5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d17c      	bne.n	800b6b6 <_vfprintf_r+0x1106>
 800b5bc:	9b08      	ldr	r3, [sp, #32]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d17c      	bne.n	800b6bc <_vfprintf_r+0x110c>
 800b5c2:	9b03      	ldr	r3, [sp, #12]
 800b5c4:	9a05      	ldr	r2, [sp, #20]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	429d      	cmp	r5, r3
 800b5ca:	bf28      	it	cs
 800b5cc:	461d      	movcs	r5, r3
 800b5ce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b5d0:	9a05      	ldr	r2, [sp, #20]
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	db02      	blt.n	800b5dc <_vfprintf_r+0x102c>
 800b5d6:	f01b 0f01 	tst.w	fp, #1
 800b5da:	d00e      	beq.n	800b5fa <_vfprintf_r+0x104a>
 800b5dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b5de:	6023      	str	r3, [r4, #0]
 800b5e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5e4:	6063      	str	r3, [r4, #4]
 800b5e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b5e8:	4413      	add	r3, r2
 800b5ea:	9324      	str	r3, [sp, #144]	; 0x90
 800b5ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	2b07      	cmp	r3, #7
 800b5f2:	9323      	str	r3, [sp, #140]	; 0x8c
 800b5f4:	f300 80e5 	bgt.w	800b7c2 <_vfprintf_r+0x1212>
 800b5f8:	3408      	adds	r4, #8
 800b5fa:	9905      	ldr	r1, [sp, #20]
 800b5fc:	9b03      	ldr	r3, [sp, #12]
 800b5fe:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800b600:	440b      	add	r3, r1
 800b602:	1b8e      	subs	r6, r1, r6
 800b604:	1b5a      	subs	r2, r3, r5
 800b606:	4296      	cmp	r6, r2
 800b608:	bfa8      	it	ge
 800b60a:	4616      	movge	r6, r2
 800b60c:	2e00      	cmp	r6, #0
 800b60e:	dd0b      	ble.n	800b628 <_vfprintf_r+0x1078>
 800b610:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b612:	4433      	add	r3, r6
 800b614:	9324      	str	r3, [sp, #144]	; 0x90
 800b616:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b618:	3301      	adds	r3, #1
 800b61a:	2b07      	cmp	r3, #7
 800b61c:	e9c4 5600 	strd	r5, r6, [r4]
 800b620:	9323      	str	r3, [sp, #140]	; 0x8c
 800b622:	f300 80d8 	bgt.w	800b7d6 <_vfprintf_r+0x1226>
 800b626:	3408      	adds	r4, #8
 800b628:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800b62a:	9b05      	ldr	r3, [sp, #20]
 800b62c:	2e00      	cmp	r6, #0
 800b62e:	eba3 0505 	sub.w	r5, r3, r5
 800b632:	bfa8      	it	ge
 800b634:	1bad      	subge	r5, r5, r6
 800b636:	2d00      	cmp	r5, #0
 800b638:	f77f abdf 	ble.w	800adfa <_vfprintf_r+0x84a>
 800b63c:	4e6b      	ldr	r6, [pc, #428]	; (800b7ec <_vfprintf_r+0x123c>)
 800b63e:	2710      	movs	r7, #16
 800b640:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800b644:	2d10      	cmp	r5, #16
 800b646:	f103 0301 	add.w	r3, r3, #1
 800b64a:	f104 0108 	add.w	r1, r4, #8
 800b64e:	6026      	str	r6, [r4, #0]
 800b650:	f77f aec6 	ble.w	800b3e0 <_vfprintf_r+0xe30>
 800b654:	3210      	adds	r2, #16
 800b656:	2b07      	cmp	r3, #7
 800b658:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800b65c:	6067      	str	r7, [r4, #4]
 800b65e:	dd08      	ble.n	800b672 <_vfprintf_r+0x10c2>
 800b660:	aa22      	add	r2, sp, #136	; 0x88
 800b662:	4649      	mov	r1, r9
 800b664:	4650      	mov	r0, sl
 800b666:	f002 fd02 	bl	800e06e <__sprint_r>
 800b66a:	2800      	cmp	r0, #0
 800b66c:	f040 8173 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800b670:	a925      	add	r1, sp, #148	; 0x94
 800b672:	3d10      	subs	r5, #16
 800b674:	460c      	mov	r4, r1
 800b676:	e7e3      	b.n	800b640 <_vfprintf_r+0x1090>
 800b678:	aa22      	add	r2, sp, #136	; 0x88
 800b67a:	4649      	mov	r1, r9
 800b67c:	4650      	mov	r0, sl
 800b67e:	f002 fcf6 	bl	800e06e <__sprint_r>
 800b682:	2800      	cmp	r0, #0
 800b684:	f040 8167 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800b688:	ac25      	add	r4, sp, #148	; 0x94
 800b68a:	e76a      	b.n	800b562 <_vfprintf_r+0xfb2>
 800b68c:	3210      	adds	r2, #16
 800b68e:	2b07      	cmp	r3, #7
 800b690:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800b694:	f8c4 8004 	str.w	r8, [r4, #4]
 800b698:	dd08      	ble.n	800b6ac <_vfprintf_r+0x10fc>
 800b69a:	aa22      	add	r2, sp, #136	; 0x88
 800b69c:	4649      	mov	r1, r9
 800b69e:	4650      	mov	r0, sl
 800b6a0:	f002 fce5 	bl	800e06e <__sprint_r>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	f040 8156 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800b6aa:	a925      	add	r1, sp, #148	; 0x94
 800b6ac:	3e10      	subs	r6, #16
 800b6ae:	460c      	mov	r4, r1
 800b6b0:	e760      	b.n	800b574 <_vfprintf_r+0xfc4>
 800b6b2:	460c      	mov	r4, r1
 800b6b4:	e778      	b.n	800b5a8 <_vfprintf_r+0xff8>
 800b6b6:	9b08      	ldr	r3, [sp, #32]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d052      	beq.n	800b762 <_vfprintf_r+0x11b2>
 800b6bc:	9b08      	ldr	r3, [sp, #32]
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	9308      	str	r3, [sp, #32]
 800b6c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b6c4:	6023      	str	r3, [r4, #0]
 800b6c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b6ca:	6063      	str	r3, [r4, #4]
 800b6cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b6ce:	4413      	add	r3, r2
 800b6d0:	9324      	str	r3, [sp, #144]	; 0x90
 800b6d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	2b07      	cmp	r3, #7
 800b6d8:	9323      	str	r3, [sp, #140]	; 0x8c
 800b6da:	dc49      	bgt.n	800b770 <_vfprintf_r+0x11c0>
 800b6dc:	3408      	adds	r4, #8
 800b6de:	9b03      	ldr	r3, [sp, #12]
 800b6e0:	9a05      	ldr	r2, [sp, #20]
 800b6e2:	eb03 0802 	add.w	r8, r3, r2
 800b6e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	eba8 0805 	sub.w	r8, r8, r5
 800b6ee:	4598      	cmp	r8, r3
 800b6f0:	bfa8      	it	ge
 800b6f2:	4698      	movge	r8, r3
 800b6f4:	f1b8 0f00 	cmp.w	r8, #0
 800b6f8:	dd0a      	ble.n	800b710 <_vfprintf_r+0x1160>
 800b6fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b6fc:	4443      	add	r3, r8
 800b6fe:	9324      	str	r3, [sp, #144]	; 0x90
 800b700:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b702:	3301      	adds	r3, #1
 800b704:	2b07      	cmp	r3, #7
 800b706:	e9c4 5800 	strd	r5, r8, [r4]
 800b70a:	9323      	str	r3, [sp, #140]	; 0x8c
 800b70c:	dc3a      	bgt.n	800b784 <_vfprintf_r+0x11d4>
 800b70e:	3408      	adds	r4, #8
 800b710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	f1b8 0f00 	cmp.w	r8, #0
 800b718:	bfac      	ite	ge
 800b71a:	eba3 0808 	subge.w	r8, r3, r8
 800b71e:	4698      	movlt	r8, r3
 800b720:	f1b8 0f00 	cmp.w	r8, #0
 800b724:	dd19      	ble.n	800b75a <_vfprintf_r+0x11aa>
 800b726:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 800b72a:	f1b8 0f10 	cmp.w	r8, #16
 800b72e:	f102 0201 	add.w	r2, r2, #1
 800b732:	f104 0108 	add.w	r1, r4, #8
 800b736:	6026      	str	r6, [r4, #0]
 800b738:	dc2e      	bgt.n	800b798 <_vfprintf_r+0x11e8>
 800b73a:	4443      	add	r3, r8
 800b73c:	2a07      	cmp	r2, #7
 800b73e:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800b742:	f8c4 8004 	str.w	r8, [r4, #4]
 800b746:	dd3a      	ble.n	800b7be <_vfprintf_r+0x120e>
 800b748:	aa22      	add	r2, sp, #136	; 0x88
 800b74a:	4649      	mov	r1, r9
 800b74c:	4650      	mov	r0, sl
 800b74e:	f002 fc8e 	bl	800e06e <__sprint_r>
 800b752:	2800      	cmp	r0, #0
 800b754:	f040 80ff 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800b758:	ac25      	add	r4, sp, #148	; 0x94
 800b75a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	441d      	add	r5, r3
 800b760:	e729      	b.n	800b5b6 <_vfprintf_r+0x1006>
 800b762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b764:	3b01      	subs	r3, #1
 800b766:	930a      	str	r3, [sp, #40]	; 0x28
 800b768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b76a:	3b01      	subs	r3, #1
 800b76c:	9309      	str	r3, [sp, #36]	; 0x24
 800b76e:	e7a8      	b.n	800b6c2 <_vfprintf_r+0x1112>
 800b770:	aa22      	add	r2, sp, #136	; 0x88
 800b772:	4649      	mov	r1, r9
 800b774:	4650      	mov	r0, sl
 800b776:	f002 fc7a 	bl	800e06e <__sprint_r>
 800b77a:	2800      	cmp	r0, #0
 800b77c:	f040 80eb 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800b780:	ac25      	add	r4, sp, #148	; 0x94
 800b782:	e7ac      	b.n	800b6de <_vfprintf_r+0x112e>
 800b784:	aa22      	add	r2, sp, #136	; 0x88
 800b786:	4649      	mov	r1, r9
 800b788:	4650      	mov	r0, sl
 800b78a:	f002 fc70 	bl	800e06e <__sprint_r>
 800b78e:	2800      	cmp	r0, #0
 800b790:	f040 80e1 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800b794:	ac25      	add	r4, sp, #148	; 0x94
 800b796:	e7bb      	b.n	800b710 <_vfprintf_r+0x1160>
 800b798:	3310      	adds	r3, #16
 800b79a:	2a07      	cmp	r2, #7
 800b79c:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800b7a0:	6067      	str	r7, [r4, #4]
 800b7a2:	dd08      	ble.n	800b7b6 <_vfprintf_r+0x1206>
 800b7a4:	aa22      	add	r2, sp, #136	; 0x88
 800b7a6:	4649      	mov	r1, r9
 800b7a8:	4650      	mov	r0, sl
 800b7aa:	f002 fc60 	bl	800e06e <__sprint_r>
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	f040 80d1 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800b7b4:	a925      	add	r1, sp, #148	; 0x94
 800b7b6:	f1a8 0810 	sub.w	r8, r8, #16
 800b7ba:	460c      	mov	r4, r1
 800b7bc:	e7b3      	b.n	800b726 <_vfprintf_r+0x1176>
 800b7be:	460c      	mov	r4, r1
 800b7c0:	e7cb      	b.n	800b75a <_vfprintf_r+0x11aa>
 800b7c2:	aa22      	add	r2, sp, #136	; 0x88
 800b7c4:	4649      	mov	r1, r9
 800b7c6:	4650      	mov	r0, sl
 800b7c8:	f002 fc51 	bl	800e06e <__sprint_r>
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	f040 80c2 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800b7d2:	ac25      	add	r4, sp, #148	; 0x94
 800b7d4:	e711      	b.n	800b5fa <_vfprintf_r+0x104a>
 800b7d6:	aa22      	add	r2, sp, #136	; 0x88
 800b7d8:	4649      	mov	r1, r9
 800b7da:	4650      	mov	r0, sl
 800b7dc:	f002 fc47 	bl	800e06e <__sprint_r>
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	f040 80b8 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800b7e6:	ac25      	add	r4, sp, #148	; 0x94
 800b7e8:	e71e      	b.n	800b628 <_vfprintf_r+0x1078>
 800b7ea:	bf00      	nop
 800b7ec:	08010efc 	.word	0x08010efc
 800b7f0:	9a05      	ldr	r2, [sp, #20]
 800b7f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b7f4:	2a01      	cmp	r2, #1
 800b7f6:	9a03      	ldr	r2, [sp, #12]
 800b7f8:	6022      	str	r2, [r4, #0]
 800b7fa:	f106 0601 	add.w	r6, r6, #1
 800b7fe:	f103 0301 	add.w	r3, r3, #1
 800b802:	f04f 0201 	mov.w	r2, #1
 800b806:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800b80a:	f104 0508 	add.w	r5, r4, #8
 800b80e:	6062      	str	r2, [r4, #4]
 800b810:	dc02      	bgt.n	800b818 <_vfprintf_r+0x1268>
 800b812:	f01b 0f01 	tst.w	fp, #1
 800b816:	d078      	beq.n	800b90a <_vfprintf_r+0x135a>
 800b818:	2b07      	cmp	r3, #7
 800b81a:	dd08      	ble.n	800b82e <_vfprintf_r+0x127e>
 800b81c:	aa22      	add	r2, sp, #136	; 0x88
 800b81e:	4649      	mov	r1, r9
 800b820:	4650      	mov	r0, sl
 800b822:	f002 fc24 	bl	800e06e <__sprint_r>
 800b826:	2800      	cmp	r0, #0
 800b828:	f040 8095 	bne.w	800b956 <_vfprintf_r+0x13a6>
 800b82c:	ad25      	add	r5, sp, #148	; 0x94
 800b82e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b830:	602b      	str	r3, [r5, #0]
 800b832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b834:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b836:	606b      	str	r3, [r5, #4]
 800b838:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b83a:	4413      	add	r3, r2
 800b83c:	9324      	str	r3, [sp, #144]	; 0x90
 800b83e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b840:	3301      	adds	r3, #1
 800b842:	2b07      	cmp	r3, #7
 800b844:	9323      	str	r3, [sp, #140]	; 0x8c
 800b846:	dc32      	bgt.n	800b8ae <_vfprintf_r+0x12fe>
 800b848:	3508      	adds	r5, #8
 800b84a:	9b05      	ldr	r3, [sp, #20]
 800b84c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b850:	1e5c      	subs	r4, r3, #1
 800b852:	2200      	movs	r2, #0
 800b854:	2300      	movs	r3, #0
 800b856:	f7f5 f95f 	bl	8000b18 <__aeabi_dcmpeq>
 800b85a:	2800      	cmp	r0, #0
 800b85c:	d130      	bne.n	800b8c0 <_vfprintf_r+0x1310>
 800b85e:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800b860:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b862:	9803      	ldr	r0, [sp, #12]
 800b864:	9a05      	ldr	r2, [sp, #20]
 800b866:	3101      	adds	r1, #1
 800b868:	3b01      	subs	r3, #1
 800b86a:	3001      	adds	r0, #1
 800b86c:	4413      	add	r3, r2
 800b86e:	2907      	cmp	r1, #7
 800b870:	e9c5 0400 	strd	r0, r4, [r5]
 800b874:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 800b878:	dd4a      	ble.n	800b910 <_vfprintf_r+0x1360>
 800b87a:	aa22      	add	r2, sp, #136	; 0x88
 800b87c:	4649      	mov	r1, r9
 800b87e:	4650      	mov	r0, sl
 800b880:	f002 fbf5 	bl	800e06e <__sprint_r>
 800b884:	2800      	cmp	r0, #0
 800b886:	d166      	bne.n	800b956 <_vfprintf_r+0x13a6>
 800b888:	ad25      	add	r5, sp, #148	; 0x94
 800b88a:	ab1e      	add	r3, sp, #120	; 0x78
 800b88c:	602b      	str	r3, [r5, #0]
 800b88e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b890:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b892:	606b      	str	r3, [r5, #4]
 800b894:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b896:	4413      	add	r3, r2
 800b898:	9324      	str	r3, [sp, #144]	; 0x90
 800b89a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b89c:	3301      	adds	r3, #1
 800b89e:	2b07      	cmp	r3, #7
 800b8a0:	9323      	str	r3, [sp, #140]	; 0x8c
 800b8a2:	f73f ada4 	bgt.w	800b3ee <_vfprintf_r+0xe3e>
 800b8a6:	f105 0408 	add.w	r4, r5, #8
 800b8aa:	f7ff baa6 	b.w	800adfa <_vfprintf_r+0x84a>
 800b8ae:	aa22      	add	r2, sp, #136	; 0x88
 800b8b0:	4649      	mov	r1, r9
 800b8b2:	4650      	mov	r0, sl
 800b8b4:	f002 fbdb 	bl	800e06e <__sprint_r>
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	d14c      	bne.n	800b956 <_vfprintf_r+0x13a6>
 800b8bc:	ad25      	add	r5, sp, #148	; 0x94
 800b8be:	e7c4      	b.n	800b84a <_vfprintf_r+0x129a>
 800b8c0:	2c00      	cmp	r4, #0
 800b8c2:	dde2      	ble.n	800b88a <_vfprintf_r+0x12da>
 800b8c4:	4e53      	ldr	r6, [pc, #332]	; (800ba14 <_vfprintf_r+0x1464>)
 800b8c6:	2710      	movs	r7, #16
 800b8c8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800b8cc:	2c10      	cmp	r4, #16
 800b8ce:	f103 0301 	add.w	r3, r3, #1
 800b8d2:	f105 0108 	add.w	r1, r5, #8
 800b8d6:	602e      	str	r6, [r5, #0]
 800b8d8:	dc07      	bgt.n	800b8ea <_vfprintf_r+0x133a>
 800b8da:	606c      	str	r4, [r5, #4]
 800b8dc:	2b07      	cmp	r3, #7
 800b8de:	4414      	add	r4, r2
 800b8e0:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 800b8e4:	dcc9      	bgt.n	800b87a <_vfprintf_r+0x12ca>
 800b8e6:	460d      	mov	r5, r1
 800b8e8:	e7cf      	b.n	800b88a <_vfprintf_r+0x12da>
 800b8ea:	3210      	adds	r2, #16
 800b8ec:	2b07      	cmp	r3, #7
 800b8ee:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800b8f2:	606f      	str	r7, [r5, #4]
 800b8f4:	dd06      	ble.n	800b904 <_vfprintf_r+0x1354>
 800b8f6:	aa22      	add	r2, sp, #136	; 0x88
 800b8f8:	4649      	mov	r1, r9
 800b8fa:	4650      	mov	r0, sl
 800b8fc:	f002 fbb7 	bl	800e06e <__sprint_r>
 800b900:	bb48      	cbnz	r0, 800b956 <_vfprintf_r+0x13a6>
 800b902:	a925      	add	r1, sp, #148	; 0x94
 800b904:	3c10      	subs	r4, #16
 800b906:	460d      	mov	r5, r1
 800b908:	e7de      	b.n	800b8c8 <_vfprintf_r+0x1318>
 800b90a:	2b07      	cmp	r3, #7
 800b90c:	ddbd      	ble.n	800b88a <_vfprintf_r+0x12da>
 800b90e:	e7b4      	b.n	800b87a <_vfprintf_r+0x12ca>
 800b910:	3508      	adds	r5, #8
 800b912:	e7ba      	b.n	800b88a <_vfprintf_r+0x12da>
 800b914:	460c      	mov	r4, r1
 800b916:	f7ff ba70 	b.w	800adfa <_vfprintf_r+0x84a>
 800b91a:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800b91e:	1a9d      	subs	r5, r3, r2
 800b920:	2d00      	cmp	r5, #0
 800b922:	f77f aa6e 	ble.w	800ae02 <_vfprintf_r+0x852>
 800b926:	4e3c      	ldr	r6, [pc, #240]	; (800ba18 <_vfprintf_r+0x1468>)
 800b928:	2710      	movs	r7, #16
 800b92a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800b92e:	2d10      	cmp	r5, #16
 800b930:	f103 0301 	add.w	r3, r3, #1
 800b934:	6026      	str	r6, [r4, #0]
 800b936:	dc18      	bgt.n	800b96a <_vfprintf_r+0x13ba>
 800b938:	6065      	str	r5, [r4, #4]
 800b93a:	2b07      	cmp	r3, #7
 800b93c:	4415      	add	r5, r2
 800b93e:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800b942:	f77f aa5e 	ble.w	800ae02 <_vfprintf_r+0x852>
 800b946:	aa22      	add	r2, sp, #136	; 0x88
 800b948:	4649      	mov	r1, r9
 800b94a:	4650      	mov	r0, sl
 800b94c:	f002 fb8f 	bl	800e06e <__sprint_r>
 800b950:	2800      	cmp	r0, #0
 800b952:	f43f aa56 	beq.w	800ae02 <_vfprintf_r+0x852>
 800b956:	9b04      	ldr	r3, [sp, #16]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	f43f a872 	beq.w	800aa42 <_vfprintf_r+0x492>
 800b95e:	4619      	mov	r1, r3
 800b960:	4650      	mov	r0, sl
 800b962:	f001 f8ef 	bl	800cb44 <_free_r>
 800b966:	f7ff b86c 	b.w	800aa42 <_vfprintf_r+0x492>
 800b96a:	3210      	adds	r2, #16
 800b96c:	2b07      	cmp	r3, #7
 800b96e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800b972:	6067      	str	r7, [r4, #4]
 800b974:	dc02      	bgt.n	800b97c <_vfprintf_r+0x13cc>
 800b976:	3408      	adds	r4, #8
 800b978:	3d10      	subs	r5, #16
 800b97a:	e7d6      	b.n	800b92a <_vfprintf_r+0x137a>
 800b97c:	aa22      	add	r2, sp, #136	; 0x88
 800b97e:	4649      	mov	r1, r9
 800b980:	4650      	mov	r0, sl
 800b982:	f002 fb74 	bl	800e06e <__sprint_r>
 800b986:	2800      	cmp	r0, #0
 800b988:	d1e5      	bne.n	800b956 <_vfprintf_r+0x13a6>
 800b98a:	ac25      	add	r4, sp, #148	; 0x94
 800b98c:	e7f4      	b.n	800b978 <_vfprintf_r+0x13c8>
 800b98e:	9904      	ldr	r1, [sp, #16]
 800b990:	4650      	mov	r0, sl
 800b992:	f001 f8d7 	bl	800cb44 <_free_r>
 800b996:	f7ff ba4c 	b.w	800ae32 <_vfprintf_r+0x882>
 800b99a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b99c:	b91b      	cbnz	r3, 800b9a6 <_vfprintf_r+0x13f6>
 800b99e:	2300      	movs	r3, #0
 800b9a0:	9323      	str	r3, [sp, #140]	; 0x8c
 800b9a2:	f7ff b84e 	b.w	800aa42 <_vfprintf_r+0x492>
 800b9a6:	aa22      	add	r2, sp, #136	; 0x88
 800b9a8:	4649      	mov	r1, r9
 800b9aa:	4650      	mov	r0, sl
 800b9ac:	f002 fb5f 	bl	800e06e <__sprint_r>
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	d0f4      	beq.n	800b99e <_vfprintf_r+0x13ee>
 800b9b4:	f7ff b845 	b.w	800aa42 <_vfprintf_r+0x492>
 800b9b8:	ea56 0207 	orrs.w	r2, r6, r7
 800b9bc:	f8cd b010 	str.w	fp, [sp, #16]
 800b9c0:	f43f ab5c 	beq.w	800b07c <_vfprintf_r+0xacc>
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	f43f abf4 	beq.w	800b1b2 <_vfprintf_r+0xc02>
 800b9ca:	2b02      	cmp	r3, #2
 800b9cc:	ab4e      	add	r3, sp, #312	; 0x138
 800b9ce:	9303      	str	r3, [sp, #12]
 800b9d0:	f43f ac46 	beq.w	800b260 <_vfprintf_r+0xcb0>
 800b9d4:	9903      	ldr	r1, [sp, #12]
 800b9d6:	f006 0307 	and.w	r3, r6, #7
 800b9da:	460a      	mov	r2, r1
 800b9dc:	3330      	adds	r3, #48	; 0x30
 800b9de:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800b9e2:	9203      	str	r2, [sp, #12]
 800b9e4:	08f2      	lsrs	r2, r6, #3
 800b9e6:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 800b9ea:	08f8      	lsrs	r0, r7, #3
 800b9ec:	4616      	mov	r6, r2
 800b9ee:	4607      	mov	r7, r0
 800b9f0:	ea56 0207 	orrs.w	r2, r6, r7
 800b9f4:	d1ee      	bne.n	800b9d4 <_vfprintf_r+0x1424>
 800b9f6:	9a04      	ldr	r2, [sp, #16]
 800b9f8:	07d0      	lsls	r0, r2, #31
 800b9fa:	f57f ac20 	bpl.w	800b23e <_vfprintf_r+0xc8e>
 800b9fe:	2b30      	cmp	r3, #48	; 0x30
 800ba00:	f43f ac1d 	beq.w	800b23e <_vfprintf_r+0xc8e>
 800ba04:	9a03      	ldr	r2, [sp, #12]
 800ba06:	2330      	movs	r3, #48	; 0x30
 800ba08:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ba0c:	1e8b      	subs	r3, r1, #2
 800ba0e:	9303      	str	r3, [sp, #12]
 800ba10:	e415      	b.n	800b23e <_vfprintf_r+0xc8e>
 800ba12:	bf00      	nop
 800ba14:	08010efc 	.word	0x08010efc
 800ba18:	08010eec 	.word	0x08010eec

0800ba1c <__sbprintf>:
 800ba1c:	b570      	push	{r4, r5, r6, lr}
 800ba1e:	460c      	mov	r4, r1
 800ba20:	8989      	ldrh	r1, [r1, #12]
 800ba22:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800ba26:	f021 0102 	bic.w	r1, r1, #2
 800ba2a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800ba2e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800ba30:	911b      	str	r1, [sp, #108]	; 0x6c
 800ba32:	89e1      	ldrh	r1, [r4, #14]
 800ba34:	f8ad 1016 	strh.w	r1, [sp, #22]
 800ba38:	69e1      	ldr	r1, [r4, #28]
 800ba3a:	9109      	str	r1, [sp, #36]	; 0x24
 800ba3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ba3e:	910b      	str	r1, [sp, #44]	; 0x2c
 800ba40:	a91c      	add	r1, sp, #112	; 0x70
 800ba42:	9102      	str	r1, [sp, #8]
 800ba44:	9106      	str	r1, [sp, #24]
 800ba46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ba4a:	4606      	mov	r6, r0
 800ba4c:	9104      	str	r1, [sp, #16]
 800ba4e:	9107      	str	r1, [sp, #28]
 800ba50:	a818      	add	r0, sp, #96	; 0x60
 800ba52:	2100      	movs	r1, #0
 800ba54:	e9cd 3200 	strd	r3, r2, [sp]
 800ba58:	9108      	str	r1, [sp, #32]
 800ba5a:	f001 faa1 	bl	800cfa0 <__retarget_lock_init_recursive>
 800ba5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ba62:	a902      	add	r1, sp, #8
 800ba64:	4630      	mov	r0, r6
 800ba66:	f7fe fda3 	bl	800a5b0 <_vfprintf_r>
 800ba6a:	1e05      	subs	r5, r0, #0
 800ba6c:	db07      	blt.n	800ba7e <__sbprintf+0x62>
 800ba6e:	a902      	add	r1, sp, #8
 800ba70:	4630      	mov	r0, r6
 800ba72:	f000 ff6b 	bl	800c94c <_fflush_r>
 800ba76:	2800      	cmp	r0, #0
 800ba78:	bf18      	it	ne
 800ba7a:	f04f 35ff 	movne.w	r5, #4294967295
 800ba7e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800ba82:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ba84:	065b      	lsls	r3, r3, #25
 800ba86:	bf42      	ittt	mi
 800ba88:	89a3      	ldrhmi	r3, [r4, #12]
 800ba8a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800ba8e:	81a3      	strhmi	r3, [r4, #12]
 800ba90:	f001 fa87 	bl	800cfa2 <__retarget_lock_close_recursive>
 800ba94:	4628      	mov	r0, r5
 800ba96:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800ba9a:	bd70      	pop	{r4, r5, r6, pc}

0800ba9c <__swsetup_r>:
 800ba9c:	b538      	push	{r3, r4, r5, lr}
 800ba9e:	4b2a      	ldr	r3, [pc, #168]	; (800bb48 <__swsetup_r+0xac>)
 800baa0:	4605      	mov	r5, r0
 800baa2:	6818      	ldr	r0, [r3, #0]
 800baa4:	460c      	mov	r4, r1
 800baa6:	b118      	cbz	r0, 800bab0 <__swsetup_r+0x14>
 800baa8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800baaa:	b90b      	cbnz	r3, 800bab0 <__swsetup_r+0x14>
 800baac:	f000 ffba 	bl	800ca24 <__sinit>
 800bab0:	89a3      	ldrh	r3, [r4, #12]
 800bab2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bab6:	0718      	lsls	r0, r3, #28
 800bab8:	d422      	bmi.n	800bb00 <__swsetup_r+0x64>
 800baba:	06d9      	lsls	r1, r3, #27
 800babc:	d407      	bmi.n	800bace <__swsetup_r+0x32>
 800babe:	2309      	movs	r3, #9
 800bac0:	602b      	str	r3, [r5, #0]
 800bac2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bac6:	81a3      	strh	r3, [r4, #12]
 800bac8:	f04f 30ff 	mov.w	r0, #4294967295
 800bacc:	e034      	b.n	800bb38 <__swsetup_r+0x9c>
 800bace:	0758      	lsls	r0, r3, #29
 800bad0:	d512      	bpl.n	800baf8 <__swsetup_r+0x5c>
 800bad2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bad4:	b141      	cbz	r1, 800bae8 <__swsetup_r+0x4c>
 800bad6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800bada:	4299      	cmp	r1, r3
 800badc:	d002      	beq.n	800bae4 <__swsetup_r+0x48>
 800bade:	4628      	mov	r0, r5
 800bae0:	f001 f830 	bl	800cb44 <_free_r>
 800bae4:	2300      	movs	r3, #0
 800bae6:	6323      	str	r3, [r4, #48]	; 0x30
 800bae8:	89a3      	ldrh	r3, [r4, #12]
 800baea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800baee:	81a3      	strh	r3, [r4, #12]
 800baf0:	2300      	movs	r3, #0
 800baf2:	6063      	str	r3, [r4, #4]
 800baf4:	6923      	ldr	r3, [r4, #16]
 800baf6:	6023      	str	r3, [r4, #0]
 800baf8:	89a3      	ldrh	r3, [r4, #12]
 800bafa:	f043 0308 	orr.w	r3, r3, #8
 800bafe:	81a3      	strh	r3, [r4, #12]
 800bb00:	6923      	ldr	r3, [r4, #16]
 800bb02:	b94b      	cbnz	r3, 800bb18 <__swsetup_r+0x7c>
 800bb04:	89a3      	ldrh	r3, [r4, #12]
 800bb06:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb0e:	d003      	beq.n	800bb18 <__swsetup_r+0x7c>
 800bb10:	4621      	mov	r1, r4
 800bb12:	4628      	mov	r0, r5
 800bb14:	f001 fa74 	bl	800d000 <__smakebuf_r>
 800bb18:	89a0      	ldrh	r0, [r4, #12]
 800bb1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb1e:	f010 0301 	ands.w	r3, r0, #1
 800bb22:	d00a      	beq.n	800bb3a <__swsetup_r+0x9e>
 800bb24:	2300      	movs	r3, #0
 800bb26:	60a3      	str	r3, [r4, #8]
 800bb28:	6963      	ldr	r3, [r4, #20]
 800bb2a:	425b      	negs	r3, r3
 800bb2c:	61a3      	str	r3, [r4, #24]
 800bb2e:	6923      	ldr	r3, [r4, #16]
 800bb30:	b943      	cbnz	r3, 800bb44 <__swsetup_r+0xa8>
 800bb32:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb36:	d1c4      	bne.n	800bac2 <__swsetup_r+0x26>
 800bb38:	bd38      	pop	{r3, r4, r5, pc}
 800bb3a:	0781      	lsls	r1, r0, #30
 800bb3c:	bf58      	it	pl
 800bb3e:	6963      	ldrpl	r3, [r4, #20]
 800bb40:	60a3      	str	r3, [r4, #8]
 800bb42:	e7f4      	b.n	800bb2e <__swsetup_r+0x92>
 800bb44:	2000      	movs	r0, #0
 800bb46:	e7f7      	b.n	800bb38 <__swsetup_r+0x9c>
 800bb48:	2000004c 	.word	0x2000004c

0800bb4c <register_fini>:
 800bb4c:	4b02      	ldr	r3, [pc, #8]	; (800bb58 <register_fini+0xc>)
 800bb4e:	b113      	cbz	r3, 800bb56 <register_fini+0xa>
 800bb50:	4802      	ldr	r0, [pc, #8]	; (800bb5c <register_fini+0x10>)
 800bb52:	f000 b805 	b.w	800bb60 <atexit>
 800bb56:	4770      	bx	lr
 800bb58:	00000000 	.word	0x00000000
 800bb5c:	0800ca75 	.word	0x0800ca75

0800bb60 <atexit>:
 800bb60:	2300      	movs	r3, #0
 800bb62:	4601      	mov	r1, r0
 800bb64:	461a      	mov	r2, r3
 800bb66:	4618      	mov	r0, r3
 800bb68:	f002 bf8e 	b.w	800ea88 <__register_exitproc>

0800bb6c <quorem>:
 800bb6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb70:	6903      	ldr	r3, [r0, #16]
 800bb72:	690c      	ldr	r4, [r1, #16]
 800bb74:	42a3      	cmp	r3, r4
 800bb76:	4607      	mov	r7, r0
 800bb78:	f2c0 8081 	blt.w	800bc7e <quorem+0x112>
 800bb7c:	3c01      	subs	r4, #1
 800bb7e:	f101 0814 	add.w	r8, r1, #20
 800bb82:	f100 0514 	add.w	r5, r0, #20
 800bb86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb8a:	9301      	str	r3, [sp, #4]
 800bb8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb94:	3301      	adds	r3, #1
 800bb96:	429a      	cmp	r2, r3
 800bb98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bb9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bba0:	fbb2 f6f3 	udiv	r6, r2, r3
 800bba4:	d331      	bcc.n	800bc0a <quorem+0x9e>
 800bba6:	f04f 0e00 	mov.w	lr, #0
 800bbaa:	4640      	mov	r0, r8
 800bbac:	46ac      	mov	ip, r5
 800bbae:	46f2      	mov	sl, lr
 800bbb0:	f850 2b04 	ldr.w	r2, [r0], #4
 800bbb4:	b293      	uxth	r3, r2
 800bbb6:	fb06 e303 	mla	r3, r6, r3, lr
 800bbba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	ebaa 0303 	sub.w	r3, sl, r3
 800bbc4:	0c12      	lsrs	r2, r2, #16
 800bbc6:	f8dc a000 	ldr.w	sl, [ip]
 800bbca:	fb06 e202 	mla	r2, r6, r2, lr
 800bbce:	fa13 f38a 	uxtah	r3, r3, sl
 800bbd2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bbd6:	fa1f fa82 	uxth.w	sl, r2
 800bbda:	f8dc 2000 	ldr.w	r2, [ip]
 800bbde:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800bbe2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbec:	4581      	cmp	r9, r0
 800bbee:	f84c 3b04 	str.w	r3, [ip], #4
 800bbf2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bbf6:	d2db      	bcs.n	800bbb0 <quorem+0x44>
 800bbf8:	f855 300b 	ldr.w	r3, [r5, fp]
 800bbfc:	b92b      	cbnz	r3, 800bc0a <quorem+0x9e>
 800bbfe:	9b01      	ldr	r3, [sp, #4]
 800bc00:	3b04      	subs	r3, #4
 800bc02:	429d      	cmp	r5, r3
 800bc04:	461a      	mov	r2, r3
 800bc06:	d32e      	bcc.n	800bc66 <quorem+0xfa>
 800bc08:	613c      	str	r4, [r7, #16]
 800bc0a:	4638      	mov	r0, r7
 800bc0c:	f001 fede 	bl	800d9cc <__mcmp>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	db24      	blt.n	800bc5e <quorem+0xf2>
 800bc14:	3601      	adds	r6, #1
 800bc16:	4628      	mov	r0, r5
 800bc18:	f04f 0c00 	mov.w	ip, #0
 800bc1c:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc20:	f8d0 e000 	ldr.w	lr, [r0]
 800bc24:	b293      	uxth	r3, r2
 800bc26:	ebac 0303 	sub.w	r3, ip, r3
 800bc2a:	0c12      	lsrs	r2, r2, #16
 800bc2c:	fa13 f38e 	uxtah	r3, r3, lr
 800bc30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bc34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc3e:	45c1      	cmp	r9, r8
 800bc40:	f840 3b04 	str.w	r3, [r0], #4
 800bc44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bc48:	d2e8      	bcs.n	800bc1c <quorem+0xb0>
 800bc4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc52:	b922      	cbnz	r2, 800bc5e <quorem+0xf2>
 800bc54:	3b04      	subs	r3, #4
 800bc56:	429d      	cmp	r5, r3
 800bc58:	461a      	mov	r2, r3
 800bc5a:	d30a      	bcc.n	800bc72 <quorem+0x106>
 800bc5c:	613c      	str	r4, [r7, #16]
 800bc5e:	4630      	mov	r0, r6
 800bc60:	b003      	add	sp, #12
 800bc62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc66:	6812      	ldr	r2, [r2, #0]
 800bc68:	3b04      	subs	r3, #4
 800bc6a:	2a00      	cmp	r2, #0
 800bc6c:	d1cc      	bne.n	800bc08 <quorem+0x9c>
 800bc6e:	3c01      	subs	r4, #1
 800bc70:	e7c7      	b.n	800bc02 <quorem+0x96>
 800bc72:	6812      	ldr	r2, [r2, #0]
 800bc74:	3b04      	subs	r3, #4
 800bc76:	2a00      	cmp	r2, #0
 800bc78:	d1f0      	bne.n	800bc5c <quorem+0xf0>
 800bc7a:	3c01      	subs	r4, #1
 800bc7c:	e7eb      	b.n	800bc56 <quorem+0xea>
 800bc7e:	2000      	movs	r0, #0
 800bc80:	e7ee      	b.n	800bc60 <quorem+0xf4>
 800bc82:	0000      	movs	r0, r0
 800bc84:	0000      	movs	r0, r0
	...

0800bc88 <_dtoa_r>:
 800bc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc8c:	ed2d 8b02 	vpush	{d8}
 800bc90:	b095      	sub	sp, #84	; 0x54
 800bc92:	ec57 6b10 	vmov	r6, r7, d0
 800bc96:	9105      	str	r1, [sp, #20]
 800bc98:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800bc9a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800bc9c:	9209      	str	r2, [sp, #36]	; 0x24
 800bc9e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800bca2:	4604      	mov	r4, r0
 800bca4:	930f      	str	r3, [sp, #60]	; 0x3c
 800bca6:	b141      	cbz	r1, 800bcba <_dtoa_r+0x32>
 800bca8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bcaa:	604a      	str	r2, [r1, #4]
 800bcac:	2301      	movs	r3, #1
 800bcae:	4093      	lsls	r3, r2
 800bcb0:	608b      	str	r3, [r1, #8]
 800bcb2:	f001 fc80 	bl	800d5b6 <_Bfree>
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	6423      	str	r3, [r4, #64]	; 0x40
 800bcba:	1e3b      	subs	r3, r7, #0
 800bcbc:	bfb9      	ittee	lt
 800bcbe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bcc2:	9303      	strlt	r3, [sp, #12]
 800bcc4:	2300      	movge	r3, #0
 800bcc6:	602b      	strge	r3, [r5, #0]
 800bcc8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800bccc:	4ba2      	ldr	r3, [pc, #648]	; (800bf58 <_dtoa_r+0x2d0>)
 800bcce:	bfbc      	itt	lt
 800bcd0:	2201      	movlt	r2, #1
 800bcd2:	602a      	strlt	r2, [r5, #0]
 800bcd4:	ea33 0309 	bics.w	r3, r3, r9
 800bcd8:	d11b      	bne.n	800bd12 <_dtoa_r+0x8a>
 800bcda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bcdc:	f242 730f 	movw	r3, #9999	; 0x270f
 800bce0:	6013      	str	r3, [r2, #0]
 800bce2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bce6:	4333      	orrs	r3, r6
 800bce8:	f000 8578 	beq.w	800c7dc <_dtoa_r+0xb54>
 800bcec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcee:	b90b      	cbnz	r3, 800bcf4 <_dtoa_r+0x6c>
 800bcf0:	4b9a      	ldr	r3, [pc, #616]	; (800bf5c <_dtoa_r+0x2d4>)
 800bcf2:	e024      	b.n	800bd3e <_dtoa_r+0xb6>
 800bcf4:	4b99      	ldr	r3, [pc, #612]	; (800bf5c <_dtoa_r+0x2d4>)
 800bcf6:	9300      	str	r3, [sp, #0]
 800bcf8:	3303      	adds	r3, #3
 800bcfa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bcfc:	6013      	str	r3, [r2, #0]
 800bcfe:	9800      	ldr	r0, [sp, #0]
 800bd00:	b015      	add	sp, #84	; 0x54
 800bd02:	ecbd 8b02 	vpop	{d8}
 800bd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd0a:	4b95      	ldr	r3, [pc, #596]	; (800bf60 <_dtoa_r+0x2d8>)
 800bd0c:	9300      	str	r3, [sp, #0]
 800bd0e:	3308      	adds	r3, #8
 800bd10:	e7f3      	b.n	800bcfa <_dtoa_r+0x72>
 800bd12:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd16:	2200      	movs	r2, #0
 800bd18:	ec51 0b17 	vmov	r0, r1, d7
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800bd22:	f7f4 fef9 	bl	8000b18 <__aeabi_dcmpeq>
 800bd26:	4680      	mov	r8, r0
 800bd28:	b158      	cbz	r0, 800bd42 <_dtoa_r+0xba>
 800bd2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	6013      	str	r3, [r2, #0]
 800bd30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	f000 854f 	beq.w	800c7d6 <_dtoa_r+0xb4e>
 800bd38:	488a      	ldr	r0, [pc, #552]	; (800bf64 <_dtoa_r+0x2dc>)
 800bd3a:	6018      	str	r0, [r3, #0]
 800bd3c:	1e43      	subs	r3, r0, #1
 800bd3e:	9300      	str	r3, [sp, #0]
 800bd40:	e7dd      	b.n	800bcfe <_dtoa_r+0x76>
 800bd42:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800bd46:	aa12      	add	r2, sp, #72	; 0x48
 800bd48:	a913      	add	r1, sp, #76	; 0x4c
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	f001 fee2 	bl	800db14 <__d2b>
 800bd50:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bd54:	4683      	mov	fp, r0
 800bd56:	2d00      	cmp	r5, #0
 800bd58:	d07c      	beq.n	800be54 <_dtoa_r+0x1cc>
 800bd5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd5c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800bd60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd64:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800bd68:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bd6c:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bd70:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bd74:	4b7c      	ldr	r3, [pc, #496]	; (800bf68 <_dtoa_r+0x2e0>)
 800bd76:	2200      	movs	r2, #0
 800bd78:	4630      	mov	r0, r6
 800bd7a:	4639      	mov	r1, r7
 800bd7c:	f7f4 faac 	bl	80002d8 <__aeabi_dsub>
 800bd80:	a36f      	add	r3, pc, #444	; (adr r3, 800bf40 <_dtoa_r+0x2b8>)
 800bd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd86:	f7f4 fc5f 	bl	8000648 <__aeabi_dmul>
 800bd8a:	a36f      	add	r3, pc, #444	; (adr r3, 800bf48 <_dtoa_r+0x2c0>)
 800bd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd90:	f7f4 faa4 	bl	80002dc <__adddf3>
 800bd94:	4606      	mov	r6, r0
 800bd96:	4628      	mov	r0, r5
 800bd98:	460f      	mov	r7, r1
 800bd9a:	f7f4 fbeb 	bl	8000574 <__aeabi_i2d>
 800bd9e:	a36c      	add	r3, pc, #432	; (adr r3, 800bf50 <_dtoa_r+0x2c8>)
 800bda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda4:	f7f4 fc50 	bl	8000648 <__aeabi_dmul>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	460b      	mov	r3, r1
 800bdac:	4630      	mov	r0, r6
 800bdae:	4639      	mov	r1, r7
 800bdb0:	f7f4 fa94 	bl	80002dc <__adddf3>
 800bdb4:	4606      	mov	r6, r0
 800bdb6:	460f      	mov	r7, r1
 800bdb8:	f7f4 fef6 	bl	8000ba8 <__aeabi_d2iz>
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	4682      	mov	sl, r0
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	4630      	mov	r0, r6
 800bdc4:	4639      	mov	r1, r7
 800bdc6:	f7f4 feb1 	bl	8000b2c <__aeabi_dcmplt>
 800bdca:	b148      	cbz	r0, 800bde0 <_dtoa_r+0x158>
 800bdcc:	4650      	mov	r0, sl
 800bdce:	f7f4 fbd1 	bl	8000574 <__aeabi_i2d>
 800bdd2:	4632      	mov	r2, r6
 800bdd4:	463b      	mov	r3, r7
 800bdd6:	f7f4 fe9f 	bl	8000b18 <__aeabi_dcmpeq>
 800bdda:	b908      	cbnz	r0, 800bde0 <_dtoa_r+0x158>
 800bddc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bde0:	f1ba 0f16 	cmp.w	sl, #22
 800bde4:	d854      	bhi.n	800be90 <_dtoa_r+0x208>
 800bde6:	4b61      	ldr	r3, [pc, #388]	; (800bf6c <_dtoa_r+0x2e4>)
 800bde8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bdf4:	f7f4 fe9a 	bl	8000b2c <__aeabi_dcmplt>
 800bdf8:	2800      	cmp	r0, #0
 800bdfa:	d04b      	beq.n	800be94 <_dtoa_r+0x20c>
 800bdfc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be00:	2300      	movs	r3, #0
 800be02:	930e      	str	r3, [sp, #56]	; 0x38
 800be04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be06:	1b5d      	subs	r5, r3, r5
 800be08:	1e6b      	subs	r3, r5, #1
 800be0a:	9304      	str	r3, [sp, #16]
 800be0c:	bf43      	ittte	mi
 800be0e:	2300      	movmi	r3, #0
 800be10:	f1c5 0801 	rsbmi	r8, r5, #1
 800be14:	9304      	strmi	r3, [sp, #16]
 800be16:	f04f 0800 	movpl.w	r8, #0
 800be1a:	f1ba 0f00 	cmp.w	sl, #0
 800be1e:	db3b      	blt.n	800be98 <_dtoa_r+0x210>
 800be20:	9b04      	ldr	r3, [sp, #16]
 800be22:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800be26:	4453      	add	r3, sl
 800be28:	9304      	str	r3, [sp, #16]
 800be2a:	2300      	movs	r3, #0
 800be2c:	9306      	str	r3, [sp, #24]
 800be2e:	9b05      	ldr	r3, [sp, #20]
 800be30:	2b09      	cmp	r3, #9
 800be32:	d86a      	bhi.n	800bf0a <_dtoa_r+0x282>
 800be34:	2b05      	cmp	r3, #5
 800be36:	bfc4      	itt	gt
 800be38:	3b04      	subgt	r3, #4
 800be3a:	9305      	strgt	r3, [sp, #20]
 800be3c:	9b05      	ldr	r3, [sp, #20]
 800be3e:	f1a3 0302 	sub.w	r3, r3, #2
 800be42:	bfcc      	ite	gt
 800be44:	2500      	movgt	r5, #0
 800be46:	2501      	movle	r5, #1
 800be48:	2b03      	cmp	r3, #3
 800be4a:	d86a      	bhi.n	800bf22 <_dtoa_r+0x29a>
 800be4c:	e8df f003 	tbb	[pc, r3]
 800be50:	5b4d4f2c 	.word	0x5b4d4f2c
 800be54:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800be58:	441d      	add	r5, r3
 800be5a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800be5e:	2b20      	cmp	r3, #32
 800be60:	bfc1      	itttt	gt
 800be62:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800be66:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800be6a:	fa09 f303 	lslgt.w	r3, r9, r3
 800be6e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800be72:	bfda      	itte	le
 800be74:	f1c3 0320 	rsble	r3, r3, #32
 800be78:	fa06 f003 	lslle.w	r0, r6, r3
 800be7c:	4318      	orrgt	r0, r3
 800be7e:	f7f4 fb69 	bl	8000554 <__aeabi_ui2d>
 800be82:	2301      	movs	r3, #1
 800be84:	4606      	mov	r6, r0
 800be86:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800be8a:	3d01      	subs	r5, #1
 800be8c:	9310      	str	r3, [sp, #64]	; 0x40
 800be8e:	e771      	b.n	800bd74 <_dtoa_r+0xec>
 800be90:	2301      	movs	r3, #1
 800be92:	e7b6      	b.n	800be02 <_dtoa_r+0x17a>
 800be94:	900e      	str	r0, [sp, #56]	; 0x38
 800be96:	e7b5      	b.n	800be04 <_dtoa_r+0x17c>
 800be98:	f1ca 0300 	rsb	r3, sl, #0
 800be9c:	9306      	str	r3, [sp, #24]
 800be9e:	2300      	movs	r3, #0
 800bea0:	eba8 080a 	sub.w	r8, r8, sl
 800bea4:	930d      	str	r3, [sp, #52]	; 0x34
 800bea6:	e7c2      	b.n	800be2e <_dtoa_r+0x1a6>
 800bea8:	2300      	movs	r3, #0
 800beaa:	9308      	str	r3, [sp, #32]
 800beac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beae:	2b00      	cmp	r3, #0
 800beb0:	dc3a      	bgt.n	800bf28 <_dtoa_r+0x2a0>
 800beb2:	f04f 0901 	mov.w	r9, #1
 800beb6:	f8cd 9004 	str.w	r9, [sp, #4]
 800beba:	464b      	mov	r3, r9
 800bebc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800bec0:	2200      	movs	r2, #0
 800bec2:	6462      	str	r2, [r4, #68]	; 0x44
 800bec4:	2204      	movs	r2, #4
 800bec6:	f102 0014 	add.w	r0, r2, #20
 800beca:	4298      	cmp	r0, r3
 800becc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bece:	d931      	bls.n	800bf34 <_dtoa_r+0x2ac>
 800bed0:	4620      	mov	r0, r4
 800bed2:	f001 fb4b 	bl	800d56c <_Balloc>
 800bed6:	9000      	str	r0, [sp, #0]
 800bed8:	2800      	cmp	r0, #0
 800beda:	d14d      	bne.n	800bf78 <_dtoa_r+0x2f0>
 800bedc:	4b24      	ldr	r3, [pc, #144]	; (800bf70 <_dtoa_r+0x2e8>)
 800bede:	4602      	mov	r2, r0
 800bee0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bee4:	4823      	ldr	r0, [pc, #140]	; (800bf74 <_dtoa_r+0x2ec>)
 800bee6:	f002 fe0f 	bl	800eb08 <__assert_func>
 800beea:	2301      	movs	r3, #1
 800beec:	e7dd      	b.n	800beaa <_dtoa_r+0x222>
 800beee:	2300      	movs	r3, #0
 800bef0:	9308      	str	r3, [sp, #32]
 800bef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bef4:	eb0a 0903 	add.w	r9, sl, r3
 800bef8:	f109 0301 	add.w	r3, r9, #1
 800befc:	2b01      	cmp	r3, #1
 800befe:	9301      	str	r3, [sp, #4]
 800bf00:	bfb8      	it	lt
 800bf02:	2301      	movlt	r3, #1
 800bf04:	e7dc      	b.n	800bec0 <_dtoa_r+0x238>
 800bf06:	2301      	movs	r3, #1
 800bf08:	e7f2      	b.n	800bef0 <_dtoa_r+0x268>
 800bf0a:	2501      	movs	r5, #1
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	9305      	str	r3, [sp, #20]
 800bf10:	9508      	str	r5, [sp, #32]
 800bf12:	f04f 39ff 	mov.w	r9, #4294967295
 800bf16:	2200      	movs	r2, #0
 800bf18:	f8cd 9004 	str.w	r9, [sp, #4]
 800bf1c:	2312      	movs	r3, #18
 800bf1e:	9209      	str	r2, [sp, #36]	; 0x24
 800bf20:	e7ce      	b.n	800bec0 <_dtoa_r+0x238>
 800bf22:	2301      	movs	r3, #1
 800bf24:	9308      	str	r3, [sp, #32]
 800bf26:	e7f4      	b.n	800bf12 <_dtoa_r+0x28a>
 800bf28:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800bf2c:	f8cd 9004 	str.w	r9, [sp, #4]
 800bf30:	464b      	mov	r3, r9
 800bf32:	e7c5      	b.n	800bec0 <_dtoa_r+0x238>
 800bf34:	3101      	adds	r1, #1
 800bf36:	6461      	str	r1, [r4, #68]	; 0x44
 800bf38:	0052      	lsls	r2, r2, #1
 800bf3a:	e7c4      	b.n	800bec6 <_dtoa_r+0x23e>
 800bf3c:	f3af 8000 	nop.w
 800bf40:	636f4361 	.word	0x636f4361
 800bf44:	3fd287a7 	.word	0x3fd287a7
 800bf48:	8b60c8b3 	.word	0x8b60c8b3
 800bf4c:	3fc68a28 	.word	0x3fc68a28
 800bf50:	509f79fb 	.word	0x509f79fb
 800bf54:	3fd34413 	.word	0x3fd34413
 800bf58:	7ff00000 	.word	0x7ff00000
 800bf5c:	08010f0c 	.word	0x08010f0c
 800bf60:	08010f10 	.word	0x08010f10
 800bf64:	08010eeb 	.word	0x08010eeb
 800bf68:	3ff80000 	.word	0x3ff80000
 800bf6c:	08011018 	.word	0x08011018
 800bf70:	08010f19 	.word	0x08010f19
 800bf74:	08010f2a 	.word	0x08010f2a
 800bf78:	9b00      	ldr	r3, [sp, #0]
 800bf7a:	6423      	str	r3, [r4, #64]	; 0x40
 800bf7c:	9b01      	ldr	r3, [sp, #4]
 800bf7e:	2b0e      	cmp	r3, #14
 800bf80:	f200 80ad 	bhi.w	800c0de <_dtoa_r+0x456>
 800bf84:	2d00      	cmp	r5, #0
 800bf86:	f000 80aa 	beq.w	800c0de <_dtoa_r+0x456>
 800bf8a:	f1ba 0f00 	cmp.w	sl, #0
 800bf8e:	dd36      	ble.n	800bffe <_dtoa_r+0x376>
 800bf90:	4ac2      	ldr	r2, [pc, #776]	; (800c29c <_dtoa_r+0x614>)
 800bf92:	f00a 030f 	and.w	r3, sl, #15
 800bf96:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bf9a:	ed93 7b00 	vldr	d7, [r3]
 800bf9e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800bfa2:	ea4f 172a 	mov.w	r7, sl, asr #4
 800bfa6:	eeb0 8a47 	vmov.f32	s16, s14
 800bfaa:	eef0 8a67 	vmov.f32	s17, s15
 800bfae:	d016      	beq.n	800bfde <_dtoa_r+0x356>
 800bfb0:	4bbb      	ldr	r3, [pc, #748]	; (800c2a0 <_dtoa_r+0x618>)
 800bfb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bfb6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bfba:	f7f4 fc6f 	bl	800089c <__aeabi_ddiv>
 800bfbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfc2:	f007 070f 	and.w	r7, r7, #15
 800bfc6:	2503      	movs	r5, #3
 800bfc8:	4eb5      	ldr	r6, [pc, #724]	; (800c2a0 <_dtoa_r+0x618>)
 800bfca:	b957      	cbnz	r7, 800bfe2 <_dtoa_r+0x35a>
 800bfcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfd0:	ec53 2b18 	vmov	r2, r3, d8
 800bfd4:	f7f4 fc62 	bl	800089c <__aeabi_ddiv>
 800bfd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfdc:	e029      	b.n	800c032 <_dtoa_r+0x3aa>
 800bfde:	2502      	movs	r5, #2
 800bfe0:	e7f2      	b.n	800bfc8 <_dtoa_r+0x340>
 800bfe2:	07f9      	lsls	r1, r7, #31
 800bfe4:	d508      	bpl.n	800bff8 <_dtoa_r+0x370>
 800bfe6:	ec51 0b18 	vmov	r0, r1, d8
 800bfea:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bfee:	f7f4 fb2b 	bl	8000648 <__aeabi_dmul>
 800bff2:	ec41 0b18 	vmov	d8, r0, r1
 800bff6:	3501      	adds	r5, #1
 800bff8:	107f      	asrs	r7, r7, #1
 800bffa:	3608      	adds	r6, #8
 800bffc:	e7e5      	b.n	800bfca <_dtoa_r+0x342>
 800bffe:	f000 80a6 	beq.w	800c14e <_dtoa_r+0x4c6>
 800c002:	f1ca 0600 	rsb	r6, sl, #0
 800c006:	4ba5      	ldr	r3, [pc, #660]	; (800c29c <_dtoa_r+0x614>)
 800c008:	4fa5      	ldr	r7, [pc, #660]	; (800c2a0 <_dtoa_r+0x618>)
 800c00a:	f006 020f 	and.w	r2, r6, #15
 800c00e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c016:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c01a:	f7f4 fb15 	bl	8000648 <__aeabi_dmul>
 800c01e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c022:	1136      	asrs	r6, r6, #4
 800c024:	2300      	movs	r3, #0
 800c026:	2502      	movs	r5, #2
 800c028:	2e00      	cmp	r6, #0
 800c02a:	f040 8085 	bne.w	800c138 <_dtoa_r+0x4b0>
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d1d2      	bne.n	800bfd8 <_dtoa_r+0x350>
 800c032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c034:	2b00      	cmp	r3, #0
 800c036:	f000 808c 	beq.w	800c152 <_dtoa_r+0x4ca>
 800c03a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c03e:	4b99      	ldr	r3, [pc, #612]	; (800c2a4 <_dtoa_r+0x61c>)
 800c040:	2200      	movs	r2, #0
 800c042:	4630      	mov	r0, r6
 800c044:	4639      	mov	r1, r7
 800c046:	f7f4 fd71 	bl	8000b2c <__aeabi_dcmplt>
 800c04a:	2800      	cmp	r0, #0
 800c04c:	f000 8081 	beq.w	800c152 <_dtoa_r+0x4ca>
 800c050:	9b01      	ldr	r3, [sp, #4]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d07d      	beq.n	800c152 <_dtoa_r+0x4ca>
 800c056:	f1b9 0f00 	cmp.w	r9, #0
 800c05a:	dd3c      	ble.n	800c0d6 <_dtoa_r+0x44e>
 800c05c:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c060:	9307      	str	r3, [sp, #28]
 800c062:	2200      	movs	r2, #0
 800c064:	4b90      	ldr	r3, [pc, #576]	; (800c2a8 <_dtoa_r+0x620>)
 800c066:	4630      	mov	r0, r6
 800c068:	4639      	mov	r1, r7
 800c06a:	f7f4 faed 	bl	8000648 <__aeabi_dmul>
 800c06e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c072:	3501      	adds	r5, #1
 800c074:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c078:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c07c:	4628      	mov	r0, r5
 800c07e:	f7f4 fa79 	bl	8000574 <__aeabi_i2d>
 800c082:	4632      	mov	r2, r6
 800c084:	463b      	mov	r3, r7
 800c086:	f7f4 fadf 	bl	8000648 <__aeabi_dmul>
 800c08a:	4b88      	ldr	r3, [pc, #544]	; (800c2ac <_dtoa_r+0x624>)
 800c08c:	2200      	movs	r2, #0
 800c08e:	f7f4 f925 	bl	80002dc <__adddf3>
 800c092:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c096:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c09a:	9303      	str	r3, [sp, #12]
 800c09c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d15c      	bne.n	800c15c <_dtoa_r+0x4d4>
 800c0a2:	4b83      	ldr	r3, [pc, #524]	; (800c2b0 <_dtoa_r+0x628>)
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	4639      	mov	r1, r7
 800c0aa:	f7f4 f915 	bl	80002d8 <__aeabi_dsub>
 800c0ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0b2:	4606      	mov	r6, r0
 800c0b4:	460f      	mov	r7, r1
 800c0b6:	f7f4 fd57 	bl	8000b68 <__aeabi_dcmpgt>
 800c0ba:	2800      	cmp	r0, #0
 800c0bc:	f040 8295 	bne.w	800c5ea <_dtoa_r+0x962>
 800c0c0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c0c4:	4630      	mov	r0, r6
 800c0c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0ca:	4639      	mov	r1, r7
 800c0cc:	f7f4 fd2e 	bl	8000b2c <__aeabi_dcmplt>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	f040 8287 	bne.w	800c5e4 <_dtoa_r+0x95c>
 800c0d6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c0da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	f2c0 8157 	blt.w	800c394 <_dtoa_r+0x70c>
 800c0e6:	f1ba 0f0e 	cmp.w	sl, #14
 800c0ea:	f300 8153 	bgt.w	800c394 <_dtoa_r+0x70c>
 800c0ee:	4b6b      	ldr	r3, [pc, #428]	; (800c29c <_dtoa_r+0x614>)
 800c0f0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c0f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	f280 80e2 	bge.w	800c2c4 <_dtoa_r+0x63c>
 800c100:	9b01      	ldr	r3, [sp, #4]
 800c102:	2b00      	cmp	r3, #0
 800c104:	f300 80de 	bgt.w	800c2c4 <_dtoa_r+0x63c>
 800c108:	f040 826c 	bne.w	800c5e4 <_dtoa_r+0x95c>
 800c10c:	4b68      	ldr	r3, [pc, #416]	; (800c2b0 <_dtoa_r+0x628>)
 800c10e:	2200      	movs	r2, #0
 800c110:	4640      	mov	r0, r8
 800c112:	4649      	mov	r1, r9
 800c114:	f7f4 fa98 	bl	8000648 <__aeabi_dmul>
 800c118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c11c:	f7f4 fd1a 	bl	8000b54 <__aeabi_dcmpge>
 800c120:	9e01      	ldr	r6, [sp, #4]
 800c122:	4637      	mov	r7, r6
 800c124:	2800      	cmp	r0, #0
 800c126:	f040 8242 	bne.w	800c5ae <_dtoa_r+0x926>
 800c12a:	9d00      	ldr	r5, [sp, #0]
 800c12c:	2331      	movs	r3, #49	; 0x31
 800c12e:	f805 3b01 	strb.w	r3, [r5], #1
 800c132:	f10a 0a01 	add.w	sl, sl, #1
 800c136:	e23e      	b.n	800c5b6 <_dtoa_r+0x92e>
 800c138:	07f2      	lsls	r2, r6, #31
 800c13a:	d505      	bpl.n	800c148 <_dtoa_r+0x4c0>
 800c13c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c140:	f7f4 fa82 	bl	8000648 <__aeabi_dmul>
 800c144:	3501      	adds	r5, #1
 800c146:	2301      	movs	r3, #1
 800c148:	1076      	asrs	r6, r6, #1
 800c14a:	3708      	adds	r7, #8
 800c14c:	e76c      	b.n	800c028 <_dtoa_r+0x3a0>
 800c14e:	2502      	movs	r5, #2
 800c150:	e76f      	b.n	800c032 <_dtoa_r+0x3aa>
 800c152:	9b01      	ldr	r3, [sp, #4]
 800c154:	f8cd a01c 	str.w	sl, [sp, #28]
 800c158:	930c      	str	r3, [sp, #48]	; 0x30
 800c15a:	e78d      	b.n	800c078 <_dtoa_r+0x3f0>
 800c15c:	9900      	ldr	r1, [sp, #0]
 800c15e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c160:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c162:	4b4e      	ldr	r3, [pc, #312]	; (800c29c <_dtoa_r+0x614>)
 800c164:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c168:	4401      	add	r1, r0
 800c16a:	9102      	str	r1, [sp, #8]
 800c16c:	9908      	ldr	r1, [sp, #32]
 800c16e:	eeb0 8a47 	vmov.f32	s16, s14
 800c172:	eef0 8a67 	vmov.f32	s17, s15
 800c176:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c17a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c17e:	2900      	cmp	r1, #0
 800c180:	d045      	beq.n	800c20e <_dtoa_r+0x586>
 800c182:	494c      	ldr	r1, [pc, #304]	; (800c2b4 <_dtoa_r+0x62c>)
 800c184:	2000      	movs	r0, #0
 800c186:	f7f4 fb89 	bl	800089c <__aeabi_ddiv>
 800c18a:	ec53 2b18 	vmov	r2, r3, d8
 800c18e:	f7f4 f8a3 	bl	80002d8 <__aeabi_dsub>
 800c192:	9d00      	ldr	r5, [sp, #0]
 800c194:	ec41 0b18 	vmov	d8, r0, r1
 800c198:	4639      	mov	r1, r7
 800c19a:	4630      	mov	r0, r6
 800c19c:	f7f4 fd04 	bl	8000ba8 <__aeabi_d2iz>
 800c1a0:	900c      	str	r0, [sp, #48]	; 0x30
 800c1a2:	f7f4 f9e7 	bl	8000574 <__aeabi_i2d>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	4630      	mov	r0, r6
 800c1ac:	4639      	mov	r1, r7
 800c1ae:	f7f4 f893 	bl	80002d8 <__aeabi_dsub>
 800c1b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1b4:	3330      	adds	r3, #48	; 0x30
 800c1b6:	f805 3b01 	strb.w	r3, [r5], #1
 800c1ba:	ec53 2b18 	vmov	r2, r3, d8
 800c1be:	4606      	mov	r6, r0
 800c1c0:	460f      	mov	r7, r1
 800c1c2:	f7f4 fcb3 	bl	8000b2c <__aeabi_dcmplt>
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	d165      	bne.n	800c296 <_dtoa_r+0x60e>
 800c1ca:	4632      	mov	r2, r6
 800c1cc:	463b      	mov	r3, r7
 800c1ce:	4935      	ldr	r1, [pc, #212]	; (800c2a4 <_dtoa_r+0x61c>)
 800c1d0:	2000      	movs	r0, #0
 800c1d2:	f7f4 f881 	bl	80002d8 <__aeabi_dsub>
 800c1d6:	ec53 2b18 	vmov	r2, r3, d8
 800c1da:	f7f4 fca7 	bl	8000b2c <__aeabi_dcmplt>
 800c1de:	2800      	cmp	r0, #0
 800c1e0:	f040 80b8 	bne.w	800c354 <_dtoa_r+0x6cc>
 800c1e4:	9b02      	ldr	r3, [sp, #8]
 800c1e6:	429d      	cmp	r5, r3
 800c1e8:	f43f af75 	beq.w	800c0d6 <_dtoa_r+0x44e>
 800c1ec:	4b2e      	ldr	r3, [pc, #184]	; (800c2a8 <_dtoa_r+0x620>)
 800c1ee:	ec51 0b18 	vmov	r0, r1, d8
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	f7f4 fa28 	bl	8000648 <__aeabi_dmul>
 800c1f8:	4b2b      	ldr	r3, [pc, #172]	; (800c2a8 <_dtoa_r+0x620>)
 800c1fa:	ec41 0b18 	vmov	d8, r0, r1
 800c1fe:	2200      	movs	r2, #0
 800c200:	4630      	mov	r0, r6
 800c202:	4639      	mov	r1, r7
 800c204:	f7f4 fa20 	bl	8000648 <__aeabi_dmul>
 800c208:	4606      	mov	r6, r0
 800c20a:	460f      	mov	r7, r1
 800c20c:	e7c4      	b.n	800c198 <_dtoa_r+0x510>
 800c20e:	ec51 0b17 	vmov	r0, r1, d7
 800c212:	f7f4 fa19 	bl	8000648 <__aeabi_dmul>
 800c216:	9b02      	ldr	r3, [sp, #8]
 800c218:	9d00      	ldr	r5, [sp, #0]
 800c21a:	930c      	str	r3, [sp, #48]	; 0x30
 800c21c:	ec41 0b18 	vmov	d8, r0, r1
 800c220:	4639      	mov	r1, r7
 800c222:	4630      	mov	r0, r6
 800c224:	f7f4 fcc0 	bl	8000ba8 <__aeabi_d2iz>
 800c228:	9011      	str	r0, [sp, #68]	; 0x44
 800c22a:	f7f4 f9a3 	bl	8000574 <__aeabi_i2d>
 800c22e:	4602      	mov	r2, r0
 800c230:	460b      	mov	r3, r1
 800c232:	4630      	mov	r0, r6
 800c234:	4639      	mov	r1, r7
 800c236:	f7f4 f84f 	bl	80002d8 <__aeabi_dsub>
 800c23a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c23c:	3330      	adds	r3, #48	; 0x30
 800c23e:	f805 3b01 	strb.w	r3, [r5], #1
 800c242:	9b02      	ldr	r3, [sp, #8]
 800c244:	429d      	cmp	r5, r3
 800c246:	4606      	mov	r6, r0
 800c248:	460f      	mov	r7, r1
 800c24a:	f04f 0200 	mov.w	r2, #0
 800c24e:	d133      	bne.n	800c2b8 <_dtoa_r+0x630>
 800c250:	4b18      	ldr	r3, [pc, #96]	; (800c2b4 <_dtoa_r+0x62c>)
 800c252:	ec51 0b18 	vmov	r0, r1, d8
 800c256:	f7f4 f841 	bl	80002dc <__adddf3>
 800c25a:	4602      	mov	r2, r0
 800c25c:	460b      	mov	r3, r1
 800c25e:	4630      	mov	r0, r6
 800c260:	4639      	mov	r1, r7
 800c262:	f7f4 fc81 	bl	8000b68 <__aeabi_dcmpgt>
 800c266:	2800      	cmp	r0, #0
 800c268:	d174      	bne.n	800c354 <_dtoa_r+0x6cc>
 800c26a:	ec53 2b18 	vmov	r2, r3, d8
 800c26e:	4911      	ldr	r1, [pc, #68]	; (800c2b4 <_dtoa_r+0x62c>)
 800c270:	2000      	movs	r0, #0
 800c272:	f7f4 f831 	bl	80002d8 <__aeabi_dsub>
 800c276:	4602      	mov	r2, r0
 800c278:	460b      	mov	r3, r1
 800c27a:	4630      	mov	r0, r6
 800c27c:	4639      	mov	r1, r7
 800c27e:	f7f4 fc55 	bl	8000b2c <__aeabi_dcmplt>
 800c282:	2800      	cmp	r0, #0
 800c284:	f43f af27 	beq.w	800c0d6 <_dtoa_r+0x44e>
 800c288:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c28a:	1e6b      	subs	r3, r5, #1
 800c28c:	930c      	str	r3, [sp, #48]	; 0x30
 800c28e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c292:	2b30      	cmp	r3, #48	; 0x30
 800c294:	d0f8      	beq.n	800c288 <_dtoa_r+0x600>
 800c296:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c29a:	e049      	b.n	800c330 <_dtoa_r+0x6a8>
 800c29c:	08011018 	.word	0x08011018
 800c2a0:	08010ff0 	.word	0x08010ff0
 800c2a4:	3ff00000 	.word	0x3ff00000
 800c2a8:	40240000 	.word	0x40240000
 800c2ac:	401c0000 	.word	0x401c0000
 800c2b0:	40140000 	.word	0x40140000
 800c2b4:	3fe00000 	.word	0x3fe00000
 800c2b8:	4baf      	ldr	r3, [pc, #700]	; (800c578 <_dtoa_r+0x8f0>)
 800c2ba:	f7f4 f9c5 	bl	8000648 <__aeabi_dmul>
 800c2be:	4606      	mov	r6, r0
 800c2c0:	460f      	mov	r7, r1
 800c2c2:	e7ad      	b.n	800c220 <_dtoa_r+0x598>
 800c2c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c2c8:	9d00      	ldr	r5, [sp, #0]
 800c2ca:	4642      	mov	r2, r8
 800c2cc:	464b      	mov	r3, r9
 800c2ce:	4630      	mov	r0, r6
 800c2d0:	4639      	mov	r1, r7
 800c2d2:	f7f4 fae3 	bl	800089c <__aeabi_ddiv>
 800c2d6:	f7f4 fc67 	bl	8000ba8 <__aeabi_d2iz>
 800c2da:	9002      	str	r0, [sp, #8]
 800c2dc:	f7f4 f94a 	bl	8000574 <__aeabi_i2d>
 800c2e0:	4642      	mov	r2, r8
 800c2e2:	464b      	mov	r3, r9
 800c2e4:	f7f4 f9b0 	bl	8000648 <__aeabi_dmul>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	460b      	mov	r3, r1
 800c2ec:	4630      	mov	r0, r6
 800c2ee:	4639      	mov	r1, r7
 800c2f0:	f7f3 fff2 	bl	80002d8 <__aeabi_dsub>
 800c2f4:	9e02      	ldr	r6, [sp, #8]
 800c2f6:	9f01      	ldr	r7, [sp, #4]
 800c2f8:	3630      	adds	r6, #48	; 0x30
 800c2fa:	f805 6b01 	strb.w	r6, [r5], #1
 800c2fe:	9e00      	ldr	r6, [sp, #0]
 800c300:	1bae      	subs	r6, r5, r6
 800c302:	42b7      	cmp	r7, r6
 800c304:	4602      	mov	r2, r0
 800c306:	460b      	mov	r3, r1
 800c308:	d137      	bne.n	800c37a <_dtoa_r+0x6f2>
 800c30a:	f7f3 ffe7 	bl	80002dc <__adddf3>
 800c30e:	4642      	mov	r2, r8
 800c310:	464b      	mov	r3, r9
 800c312:	4606      	mov	r6, r0
 800c314:	460f      	mov	r7, r1
 800c316:	f7f4 fc27 	bl	8000b68 <__aeabi_dcmpgt>
 800c31a:	b9c8      	cbnz	r0, 800c350 <_dtoa_r+0x6c8>
 800c31c:	4642      	mov	r2, r8
 800c31e:	464b      	mov	r3, r9
 800c320:	4630      	mov	r0, r6
 800c322:	4639      	mov	r1, r7
 800c324:	f7f4 fbf8 	bl	8000b18 <__aeabi_dcmpeq>
 800c328:	b110      	cbz	r0, 800c330 <_dtoa_r+0x6a8>
 800c32a:	9b02      	ldr	r3, [sp, #8]
 800c32c:	07d9      	lsls	r1, r3, #31
 800c32e:	d40f      	bmi.n	800c350 <_dtoa_r+0x6c8>
 800c330:	4620      	mov	r0, r4
 800c332:	4659      	mov	r1, fp
 800c334:	f001 f93f 	bl	800d5b6 <_Bfree>
 800c338:	2300      	movs	r3, #0
 800c33a:	702b      	strb	r3, [r5, #0]
 800c33c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c33e:	f10a 0001 	add.w	r0, sl, #1
 800c342:	6018      	str	r0, [r3, #0]
 800c344:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c346:	2b00      	cmp	r3, #0
 800c348:	f43f acd9 	beq.w	800bcfe <_dtoa_r+0x76>
 800c34c:	601d      	str	r5, [r3, #0]
 800c34e:	e4d6      	b.n	800bcfe <_dtoa_r+0x76>
 800c350:	f8cd a01c 	str.w	sl, [sp, #28]
 800c354:	462b      	mov	r3, r5
 800c356:	461d      	mov	r5, r3
 800c358:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c35c:	2a39      	cmp	r2, #57	; 0x39
 800c35e:	d108      	bne.n	800c372 <_dtoa_r+0x6ea>
 800c360:	9a00      	ldr	r2, [sp, #0]
 800c362:	429a      	cmp	r2, r3
 800c364:	d1f7      	bne.n	800c356 <_dtoa_r+0x6ce>
 800c366:	9a07      	ldr	r2, [sp, #28]
 800c368:	9900      	ldr	r1, [sp, #0]
 800c36a:	3201      	adds	r2, #1
 800c36c:	9207      	str	r2, [sp, #28]
 800c36e:	2230      	movs	r2, #48	; 0x30
 800c370:	700a      	strb	r2, [r1, #0]
 800c372:	781a      	ldrb	r2, [r3, #0]
 800c374:	3201      	adds	r2, #1
 800c376:	701a      	strb	r2, [r3, #0]
 800c378:	e78d      	b.n	800c296 <_dtoa_r+0x60e>
 800c37a:	4b7f      	ldr	r3, [pc, #508]	; (800c578 <_dtoa_r+0x8f0>)
 800c37c:	2200      	movs	r2, #0
 800c37e:	f7f4 f963 	bl	8000648 <__aeabi_dmul>
 800c382:	2200      	movs	r2, #0
 800c384:	2300      	movs	r3, #0
 800c386:	4606      	mov	r6, r0
 800c388:	460f      	mov	r7, r1
 800c38a:	f7f4 fbc5 	bl	8000b18 <__aeabi_dcmpeq>
 800c38e:	2800      	cmp	r0, #0
 800c390:	d09b      	beq.n	800c2ca <_dtoa_r+0x642>
 800c392:	e7cd      	b.n	800c330 <_dtoa_r+0x6a8>
 800c394:	9a08      	ldr	r2, [sp, #32]
 800c396:	2a00      	cmp	r2, #0
 800c398:	f000 80c4 	beq.w	800c524 <_dtoa_r+0x89c>
 800c39c:	9a05      	ldr	r2, [sp, #20]
 800c39e:	2a01      	cmp	r2, #1
 800c3a0:	f300 80a8 	bgt.w	800c4f4 <_dtoa_r+0x86c>
 800c3a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c3a6:	2a00      	cmp	r2, #0
 800c3a8:	f000 80a0 	beq.w	800c4ec <_dtoa_r+0x864>
 800c3ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c3b0:	9e06      	ldr	r6, [sp, #24]
 800c3b2:	4645      	mov	r5, r8
 800c3b4:	9a04      	ldr	r2, [sp, #16]
 800c3b6:	2101      	movs	r1, #1
 800c3b8:	441a      	add	r2, r3
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	4498      	add	r8, r3
 800c3be:	9204      	str	r2, [sp, #16]
 800c3c0:	f001 f99c 	bl	800d6fc <__i2b>
 800c3c4:	4607      	mov	r7, r0
 800c3c6:	2d00      	cmp	r5, #0
 800c3c8:	dd0b      	ble.n	800c3e2 <_dtoa_r+0x75a>
 800c3ca:	9b04      	ldr	r3, [sp, #16]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	dd08      	ble.n	800c3e2 <_dtoa_r+0x75a>
 800c3d0:	42ab      	cmp	r3, r5
 800c3d2:	9a04      	ldr	r2, [sp, #16]
 800c3d4:	bfa8      	it	ge
 800c3d6:	462b      	movge	r3, r5
 800c3d8:	eba8 0803 	sub.w	r8, r8, r3
 800c3dc:	1aed      	subs	r5, r5, r3
 800c3de:	1ad3      	subs	r3, r2, r3
 800c3e0:	9304      	str	r3, [sp, #16]
 800c3e2:	9b06      	ldr	r3, [sp, #24]
 800c3e4:	b1fb      	cbz	r3, 800c426 <_dtoa_r+0x79e>
 800c3e6:	9b08      	ldr	r3, [sp, #32]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	f000 809f 	beq.w	800c52c <_dtoa_r+0x8a4>
 800c3ee:	2e00      	cmp	r6, #0
 800c3f0:	dd11      	ble.n	800c416 <_dtoa_r+0x78e>
 800c3f2:	4639      	mov	r1, r7
 800c3f4:	4632      	mov	r2, r6
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f001 fa3c 	bl	800d874 <__pow5mult>
 800c3fc:	465a      	mov	r2, fp
 800c3fe:	4601      	mov	r1, r0
 800c400:	4607      	mov	r7, r0
 800c402:	4620      	mov	r0, r4
 800c404:	f001 f990 	bl	800d728 <__multiply>
 800c408:	4659      	mov	r1, fp
 800c40a:	9007      	str	r0, [sp, #28]
 800c40c:	4620      	mov	r0, r4
 800c40e:	f001 f8d2 	bl	800d5b6 <_Bfree>
 800c412:	9b07      	ldr	r3, [sp, #28]
 800c414:	469b      	mov	fp, r3
 800c416:	9b06      	ldr	r3, [sp, #24]
 800c418:	1b9a      	subs	r2, r3, r6
 800c41a:	d004      	beq.n	800c426 <_dtoa_r+0x79e>
 800c41c:	4659      	mov	r1, fp
 800c41e:	4620      	mov	r0, r4
 800c420:	f001 fa28 	bl	800d874 <__pow5mult>
 800c424:	4683      	mov	fp, r0
 800c426:	2101      	movs	r1, #1
 800c428:	4620      	mov	r0, r4
 800c42a:	f001 f967 	bl	800d6fc <__i2b>
 800c42e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c430:	2b00      	cmp	r3, #0
 800c432:	4606      	mov	r6, r0
 800c434:	dd7c      	ble.n	800c530 <_dtoa_r+0x8a8>
 800c436:	461a      	mov	r2, r3
 800c438:	4601      	mov	r1, r0
 800c43a:	4620      	mov	r0, r4
 800c43c:	f001 fa1a 	bl	800d874 <__pow5mult>
 800c440:	9b05      	ldr	r3, [sp, #20]
 800c442:	2b01      	cmp	r3, #1
 800c444:	4606      	mov	r6, r0
 800c446:	dd76      	ble.n	800c536 <_dtoa_r+0x8ae>
 800c448:	2300      	movs	r3, #0
 800c44a:	9306      	str	r3, [sp, #24]
 800c44c:	6933      	ldr	r3, [r6, #16]
 800c44e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c452:	6918      	ldr	r0, [r3, #16]
 800c454:	f001 f902 	bl	800d65c <__hi0bits>
 800c458:	f1c0 0020 	rsb	r0, r0, #32
 800c45c:	9b04      	ldr	r3, [sp, #16]
 800c45e:	4418      	add	r0, r3
 800c460:	f010 001f 	ands.w	r0, r0, #31
 800c464:	f000 8086 	beq.w	800c574 <_dtoa_r+0x8ec>
 800c468:	f1c0 0320 	rsb	r3, r0, #32
 800c46c:	2b04      	cmp	r3, #4
 800c46e:	dd7f      	ble.n	800c570 <_dtoa_r+0x8e8>
 800c470:	f1c0 001c 	rsb	r0, r0, #28
 800c474:	9b04      	ldr	r3, [sp, #16]
 800c476:	4403      	add	r3, r0
 800c478:	4480      	add	r8, r0
 800c47a:	4405      	add	r5, r0
 800c47c:	9304      	str	r3, [sp, #16]
 800c47e:	f1b8 0f00 	cmp.w	r8, #0
 800c482:	dd05      	ble.n	800c490 <_dtoa_r+0x808>
 800c484:	4659      	mov	r1, fp
 800c486:	4642      	mov	r2, r8
 800c488:	4620      	mov	r0, r4
 800c48a:	f001 fa33 	bl	800d8f4 <__lshift>
 800c48e:	4683      	mov	fp, r0
 800c490:	9b04      	ldr	r3, [sp, #16]
 800c492:	2b00      	cmp	r3, #0
 800c494:	dd05      	ble.n	800c4a2 <_dtoa_r+0x81a>
 800c496:	4631      	mov	r1, r6
 800c498:	461a      	mov	r2, r3
 800c49a:	4620      	mov	r0, r4
 800c49c:	f001 fa2a 	bl	800d8f4 <__lshift>
 800c4a0:	4606      	mov	r6, r0
 800c4a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d069      	beq.n	800c57c <_dtoa_r+0x8f4>
 800c4a8:	4631      	mov	r1, r6
 800c4aa:	4658      	mov	r0, fp
 800c4ac:	f001 fa8e 	bl	800d9cc <__mcmp>
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	da63      	bge.n	800c57c <_dtoa_r+0x8f4>
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	4659      	mov	r1, fp
 800c4b8:	220a      	movs	r2, #10
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	f001 f884 	bl	800d5c8 <__multadd>
 800c4c0:	9b08      	ldr	r3, [sp, #32]
 800c4c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c4c6:	4683      	mov	fp, r0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	f000 818e 	beq.w	800c7ea <_dtoa_r+0xb62>
 800c4ce:	4639      	mov	r1, r7
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	220a      	movs	r2, #10
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	f001 f877 	bl	800d5c8 <__multadd>
 800c4da:	f1b9 0f00 	cmp.w	r9, #0
 800c4de:	4607      	mov	r7, r0
 800c4e0:	f300 808e 	bgt.w	800c600 <_dtoa_r+0x978>
 800c4e4:	9b05      	ldr	r3, [sp, #20]
 800c4e6:	2b02      	cmp	r3, #2
 800c4e8:	dc50      	bgt.n	800c58c <_dtoa_r+0x904>
 800c4ea:	e089      	b.n	800c600 <_dtoa_r+0x978>
 800c4ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c4ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c4f2:	e75d      	b.n	800c3b0 <_dtoa_r+0x728>
 800c4f4:	9b01      	ldr	r3, [sp, #4]
 800c4f6:	1e5e      	subs	r6, r3, #1
 800c4f8:	9b06      	ldr	r3, [sp, #24]
 800c4fa:	42b3      	cmp	r3, r6
 800c4fc:	bfbf      	itttt	lt
 800c4fe:	9b06      	ldrlt	r3, [sp, #24]
 800c500:	9606      	strlt	r6, [sp, #24]
 800c502:	1af2      	sublt	r2, r6, r3
 800c504:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c506:	bfb6      	itet	lt
 800c508:	189b      	addlt	r3, r3, r2
 800c50a:	1b9e      	subge	r6, r3, r6
 800c50c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c50e:	9b01      	ldr	r3, [sp, #4]
 800c510:	bfb8      	it	lt
 800c512:	2600      	movlt	r6, #0
 800c514:	2b00      	cmp	r3, #0
 800c516:	bfb5      	itete	lt
 800c518:	eba8 0503 	sublt.w	r5, r8, r3
 800c51c:	9b01      	ldrge	r3, [sp, #4]
 800c51e:	2300      	movlt	r3, #0
 800c520:	4645      	movge	r5, r8
 800c522:	e747      	b.n	800c3b4 <_dtoa_r+0x72c>
 800c524:	9e06      	ldr	r6, [sp, #24]
 800c526:	9f08      	ldr	r7, [sp, #32]
 800c528:	4645      	mov	r5, r8
 800c52a:	e74c      	b.n	800c3c6 <_dtoa_r+0x73e>
 800c52c:	9a06      	ldr	r2, [sp, #24]
 800c52e:	e775      	b.n	800c41c <_dtoa_r+0x794>
 800c530:	9b05      	ldr	r3, [sp, #20]
 800c532:	2b01      	cmp	r3, #1
 800c534:	dc18      	bgt.n	800c568 <_dtoa_r+0x8e0>
 800c536:	9b02      	ldr	r3, [sp, #8]
 800c538:	b9b3      	cbnz	r3, 800c568 <_dtoa_r+0x8e0>
 800c53a:	9b03      	ldr	r3, [sp, #12]
 800c53c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c540:	b9a3      	cbnz	r3, 800c56c <_dtoa_r+0x8e4>
 800c542:	9b03      	ldr	r3, [sp, #12]
 800c544:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c548:	0d1b      	lsrs	r3, r3, #20
 800c54a:	051b      	lsls	r3, r3, #20
 800c54c:	b12b      	cbz	r3, 800c55a <_dtoa_r+0x8d2>
 800c54e:	9b04      	ldr	r3, [sp, #16]
 800c550:	3301      	adds	r3, #1
 800c552:	9304      	str	r3, [sp, #16]
 800c554:	f108 0801 	add.w	r8, r8, #1
 800c558:	2301      	movs	r3, #1
 800c55a:	9306      	str	r3, [sp, #24]
 800c55c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c55e:	2b00      	cmp	r3, #0
 800c560:	f47f af74 	bne.w	800c44c <_dtoa_r+0x7c4>
 800c564:	2001      	movs	r0, #1
 800c566:	e779      	b.n	800c45c <_dtoa_r+0x7d4>
 800c568:	2300      	movs	r3, #0
 800c56a:	e7f6      	b.n	800c55a <_dtoa_r+0x8d2>
 800c56c:	9b02      	ldr	r3, [sp, #8]
 800c56e:	e7f4      	b.n	800c55a <_dtoa_r+0x8d2>
 800c570:	d085      	beq.n	800c47e <_dtoa_r+0x7f6>
 800c572:	4618      	mov	r0, r3
 800c574:	301c      	adds	r0, #28
 800c576:	e77d      	b.n	800c474 <_dtoa_r+0x7ec>
 800c578:	40240000 	.word	0x40240000
 800c57c:	9b01      	ldr	r3, [sp, #4]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	dc38      	bgt.n	800c5f4 <_dtoa_r+0x96c>
 800c582:	9b05      	ldr	r3, [sp, #20]
 800c584:	2b02      	cmp	r3, #2
 800c586:	dd35      	ble.n	800c5f4 <_dtoa_r+0x96c>
 800c588:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c58c:	f1b9 0f00 	cmp.w	r9, #0
 800c590:	d10d      	bne.n	800c5ae <_dtoa_r+0x926>
 800c592:	4631      	mov	r1, r6
 800c594:	464b      	mov	r3, r9
 800c596:	2205      	movs	r2, #5
 800c598:	4620      	mov	r0, r4
 800c59a:	f001 f815 	bl	800d5c8 <__multadd>
 800c59e:	4601      	mov	r1, r0
 800c5a0:	4606      	mov	r6, r0
 800c5a2:	4658      	mov	r0, fp
 800c5a4:	f001 fa12 	bl	800d9cc <__mcmp>
 800c5a8:	2800      	cmp	r0, #0
 800c5aa:	f73f adbe 	bgt.w	800c12a <_dtoa_r+0x4a2>
 800c5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5b0:	9d00      	ldr	r5, [sp, #0]
 800c5b2:	ea6f 0a03 	mvn.w	sl, r3
 800c5b6:	f04f 0800 	mov.w	r8, #0
 800c5ba:	4631      	mov	r1, r6
 800c5bc:	4620      	mov	r0, r4
 800c5be:	f000 fffa 	bl	800d5b6 <_Bfree>
 800c5c2:	2f00      	cmp	r7, #0
 800c5c4:	f43f aeb4 	beq.w	800c330 <_dtoa_r+0x6a8>
 800c5c8:	f1b8 0f00 	cmp.w	r8, #0
 800c5cc:	d005      	beq.n	800c5da <_dtoa_r+0x952>
 800c5ce:	45b8      	cmp	r8, r7
 800c5d0:	d003      	beq.n	800c5da <_dtoa_r+0x952>
 800c5d2:	4641      	mov	r1, r8
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	f000 ffee 	bl	800d5b6 <_Bfree>
 800c5da:	4639      	mov	r1, r7
 800c5dc:	4620      	mov	r0, r4
 800c5de:	f000 ffea 	bl	800d5b6 <_Bfree>
 800c5e2:	e6a5      	b.n	800c330 <_dtoa_r+0x6a8>
 800c5e4:	2600      	movs	r6, #0
 800c5e6:	4637      	mov	r7, r6
 800c5e8:	e7e1      	b.n	800c5ae <_dtoa_r+0x926>
 800c5ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c5ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c5f0:	4637      	mov	r7, r6
 800c5f2:	e59a      	b.n	800c12a <_dtoa_r+0x4a2>
 800c5f4:	9b08      	ldr	r3, [sp, #32]
 800c5f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	f000 80fc 	beq.w	800c7f8 <_dtoa_r+0xb70>
 800c600:	2d00      	cmp	r5, #0
 800c602:	dd05      	ble.n	800c610 <_dtoa_r+0x988>
 800c604:	4639      	mov	r1, r7
 800c606:	462a      	mov	r2, r5
 800c608:	4620      	mov	r0, r4
 800c60a:	f001 f973 	bl	800d8f4 <__lshift>
 800c60e:	4607      	mov	r7, r0
 800c610:	9b06      	ldr	r3, [sp, #24]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d05b      	beq.n	800c6ce <_dtoa_r+0xa46>
 800c616:	6879      	ldr	r1, [r7, #4]
 800c618:	4620      	mov	r0, r4
 800c61a:	f000 ffa7 	bl	800d56c <_Balloc>
 800c61e:	4605      	mov	r5, r0
 800c620:	b920      	cbnz	r0, 800c62c <_dtoa_r+0x9a4>
 800c622:	4b80      	ldr	r3, [pc, #512]	; (800c824 <_dtoa_r+0xb9c>)
 800c624:	4602      	mov	r2, r0
 800c626:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c62a:	e45b      	b.n	800bee4 <_dtoa_r+0x25c>
 800c62c:	693a      	ldr	r2, [r7, #16]
 800c62e:	3202      	adds	r2, #2
 800c630:	0092      	lsls	r2, r2, #2
 800c632:	f107 010c 	add.w	r1, r7, #12
 800c636:	300c      	adds	r0, #12
 800c638:	f000 ff64 	bl	800d504 <memcpy>
 800c63c:	2201      	movs	r2, #1
 800c63e:	4629      	mov	r1, r5
 800c640:	4620      	mov	r0, r4
 800c642:	f001 f957 	bl	800d8f4 <__lshift>
 800c646:	9b00      	ldr	r3, [sp, #0]
 800c648:	3301      	adds	r3, #1
 800c64a:	9301      	str	r3, [sp, #4]
 800c64c:	9b00      	ldr	r3, [sp, #0]
 800c64e:	444b      	add	r3, r9
 800c650:	9307      	str	r3, [sp, #28]
 800c652:	9b02      	ldr	r3, [sp, #8]
 800c654:	f003 0301 	and.w	r3, r3, #1
 800c658:	46b8      	mov	r8, r7
 800c65a:	9306      	str	r3, [sp, #24]
 800c65c:	4607      	mov	r7, r0
 800c65e:	9b01      	ldr	r3, [sp, #4]
 800c660:	4631      	mov	r1, r6
 800c662:	3b01      	subs	r3, #1
 800c664:	4658      	mov	r0, fp
 800c666:	9302      	str	r3, [sp, #8]
 800c668:	f7ff fa80 	bl	800bb6c <quorem>
 800c66c:	4603      	mov	r3, r0
 800c66e:	3330      	adds	r3, #48	; 0x30
 800c670:	9004      	str	r0, [sp, #16]
 800c672:	4641      	mov	r1, r8
 800c674:	4658      	mov	r0, fp
 800c676:	9308      	str	r3, [sp, #32]
 800c678:	f001 f9a8 	bl	800d9cc <__mcmp>
 800c67c:	463a      	mov	r2, r7
 800c67e:	4681      	mov	r9, r0
 800c680:	4631      	mov	r1, r6
 800c682:	4620      	mov	r0, r4
 800c684:	f001 f9be 	bl	800da04 <__mdiff>
 800c688:	68c2      	ldr	r2, [r0, #12]
 800c68a:	9b08      	ldr	r3, [sp, #32]
 800c68c:	4605      	mov	r5, r0
 800c68e:	bb02      	cbnz	r2, 800c6d2 <_dtoa_r+0xa4a>
 800c690:	4601      	mov	r1, r0
 800c692:	4658      	mov	r0, fp
 800c694:	f001 f99a 	bl	800d9cc <__mcmp>
 800c698:	9b08      	ldr	r3, [sp, #32]
 800c69a:	4602      	mov	r2, r0
 800c69c:	4629      	mov	r1, r5
 800c69e:	4620      	mov	r0, r4
 800c6a0:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c6a4:	f000 ff87 	bl	800d5b6 <_Bfree>
 800c6a8:	9b05      	ldr	r3, [sp, #20]
 800c6aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6ac:	9d01      	ldr	r5, [sp, #4]
 800c6ae:	ea43 0102 	orr.w	r1, r3, r2
 800c6b2:	9b06      	ldr	r3, [sp, #24]
 800c6b4:	430b      	orrs	r3, r1
 800c6b6:	9b08      	ldr	r3, [sp, #32]
 800c6b8:	d10d      	bne.n	800c6d6 <_dtoa_r+0xa4e>
 800c6ba:	2b39      	cmp	r3, #57	; 0x39
 800c6bc:	d029      	beq.n	800c712 <_dtoa_r+0xa8a>
 800c6be:	f1b9 0f00 	cmp.w	r9, #0
 800c6c2:	dd01      	ble.n	800c6c8 <_dtoa_r+0xa40>
 800c6c4:	9b04      	ldr	r3, [sp, #16]
 800c6c6:	3331      	adds	r3, #49	; 0x31
 800c6c8:	9a02      	ldr	r2, [sp, #8]
 800c6ca:	7013      	strb	r3, [r2, #0]
 800c6cc:	e775      	b.n	800c5ba <_dtoa_r+0x932>
 800c6ce:	4638      	mov	r0, r7
 800c6d0:	e7b9      	b.n	800c646 <_dtoa_r+0x9be>
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	e7e2      	b.n	800c69c <_dtoa_r+0xa14>
 800c6d6:	f1b9 0f00 	cmp.w	r9, #0
 800c6da:	db06      	blt.n	800c6ea <_dtoa_r+0xa62>
 800c6dc:	9905      	ldr	r1, [sp, #20]
 800c6de:	ea41 0909 	orr.w	r9, r1, r9
 800c6e2:	9906      	ldr	r1, [sp, #24]
 800c6e4:	ea59 0101 	orrs.w	r1, r9, r1
 800c6e8:	d120      	bne.n	800c72c <_dtoa_r+0xaa4>
 800c6ea:	2a00      	cmp	r2, #0
 800c6ec:	ddec      	ble.n	800c6c8 <_dtoa_r+0xa40>
 800c6ee:	4659      	mov	r1, fp
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	9301      	str	r3, [sp, #4]
 800c6f6:	f001 f8fd 	bl	800d8f4 <__lshift>
 800c6fa:	4631      	mov	r1, r6
 800c6fc:	4683      	mov	fp, r0
 800c6fe:	f001 f965 	bl	800d9cc <__mcmp>
 800c702:	2800      	cmp	r0, #0
 800c704:	9b01      	ldr	r3, [sp, #4]
 800c706:	dc02      	bgt.n	800c70e <_dtoa_r+0xa86>
 800c708:	d1de      	bne.n	800c6c8 <_dtoa_r+0xa40>
 800c70a:	07da      	lsls	r2, r3, #31
 800c70c:	d5dc      	bpl.n	800c6c8 <_dtoa_r+0xa40>
 800c70e:	2b39      	cmp	r3, #57	; 0x39
 800c710:	d1d8      	bne.n	800c6c4 <_dtoa_r+0xa3c>
 800c712:	9a02      	ldr	r2, [sp, #8]
 800c714:	2339      	movs	r3, #57	; 0x39
 800c716:	7013      	strb	r3, [r2, #0]
 800c718:	462b      	mov	r3, r5
 800c71a:	461d      	mov	r5, r3
 800c71c:	3b01      	subs	r3, #1
 800c71e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c722:	2a39      	cmp	r2, #57	; 0x39
 800c724:	d050      	beq.n	800c7c8 <_dtoa_r+0xb40>
 800c726:	3201      	adds	r2, #1
 800c728:	701a      	strb	r2, [r3, #0]
 800c72a:	e746      	b.n	800c5ba <_dtoa_r+0x932>
 800c72c:	2a00      	cmp	r2, #0
 800c72e:	dd03      	ble.n	800c738 <_dtoa_r+0xab0>
 800c730:	2b39      	cmp	r3, #57	; 0x39
 800c732:	d0ee      	beq.n	800c712 <_dtoa_r+0xa8a>
 800c734:	3301      	adds	r3, #1
 800c736:	e7c7      	b.n	800c6c8 <_dtoa_r+0xa40>
 800c738:	9a01      	ldr	r2, [sp, #4]
 800c73a:	9907      	ldr	r1, [sp, #28]
 800c73c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c740:	428a      	cmp	r2, r1
 800c742:	d02a      	beq.n	800c79a <_dtoa_r+0xb12>
 800c744:	4659      	mov	r1, fp
 800c746:	2300      	movs	r3, #0
 800c748:	220a      	movs	r2, #10
 800c74a:	4620      	mov	r0, r4
 800c74c:	f000 ff3c 	bl	800d5c8 <__multadd>
 800c750:	45b8      	cmp	r8, r7
 800c752:	4683      	mov	fp, r0
 800c754:	f04f 0300 	mov.w	r3, #0
 800c758:	f04f 020a 	mov.w	r2, #10
 800c75c:	4641      	mov	r1, r8
 800c75e:	4620      	mov	r0, r4
 800c760:	d107      	bne.n	800c772 <_dtoa_r+0xaea>
 800c762:	f000 ff31 	bl	800d5c8 <__multadd>
 800c766:	4680      	mov	r8, r0
 800c768:	4607      	mov	r7, r0
 800c76a:	9b01      	ldr	r3, [sp, #4]
 800c76c:	3301      	adds	r3, #1
 800c76e:	9301      	str	r3, [sp, #4]
 800c770:	e775      	b.n	800c65e <_dtoa_r+0x9d6>
 800c772:	f000 ff29 	bl	800d5c8 <__multadd>
 800c776:	4639      	mov	r1, r7
 800c778:	4680      	mov	r8, r0
 800c77a:	2300      	movs	r3, #0
 800c77c:	220a      	movs	r2, #10
 800c77e:	4620      	mov	r0, r4
 800c780:	f000 ff22 	bl	800d5c8 <__multadd>
 800c784:	4607      	mov	r7, r0
 800c786:	e7f0      	b.n	800c76a <_dtoa_r+0xae2>
 800c788:	f1b9 0f00 	cmp.w	r9, #0
 800c78c:	9a00      	ldr	r2, [sp, #0]
 800c78e:	bfcc      	ite	gt
 800c790:	464d      	movgt	r5, r9
 800c792:	2501      	movle	r5, #1
 800c794:	4415      	add	r5, r2
 800c796:	f04f 0800 	mov.w	r8, #0
 800c79a:	4659      	mov	r1, fp
 800c79c:	2201      	movs	r2, #1
 800c79e:	4620      	mov	r0, r4
 800c7a0:	9301      	str	r3, [sp, #4]
 800c7a2:	f001 f8a7 	bl	800d8f4 <__lshift>
 800c7a6:	4631      	mov	r1, r6
 800c7a8:	4683      	mov	fp, r0
 800c7aa:	f001 f90f 	bl	800d9cc <__mcmp>
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	dcb2      	bgt.n	800c718 <_dtoa_r+0xa90>
 800c7b2:	d102      	bne.n	800c7ba <_dtoa_r+0xb32>
 800c7b4:	9b01      	ldr	r3, [sp, #4]
 800c7b6:	07db      	lsls	r3, r3, #31
 800c7b8:	d4ae      	bmi.n	800c718 <_dtoa_r+0xa90>
 800c7ba:	462b      	mov	r3, r5
 800c7bc:	461d      	mov	r5, r3
 800c7be:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7c2:	2a30      	cmp	r2, #48	; 0x30
 800c7c4:	d0fa      	beq.n	800c7bc <_dtoa_r+0xb34>
 800c7c6:	e6f8      	b.n	800c5ba <_dtoa_r+0x932>
 800c7c8:	9a00      	ldr	r2, [sp, #0]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d1a5      	bne.n	800c71a <_dtoa_r+0xa92>
 800c7ce:	f10a 0a01 	add.w	sl, sl, #1
 800c7d2:	2331      	movs	r3, #49	; 0x31
 800c7d4:	e779      	b.n	800c6ca <_dtoa_r+0xa42>
 800c7d6:	4b14      	ldr	r3, [pc, #80]	; (800c828 <_dtoa_r+0xba0>)
 800c7d8:	f7ff bab1 	b.w	800bd3e <_dtoa_r+0xb6>
 800c7dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	f47f aa93 	bne.w	800bd0a <_dtoa_r+0x82>
 800c7e4:	4b11      	ldr	r3, [pc, #68]	; (800c82c <_dtoa_r+0xba4>)
 800c7e6:	f7ff baaa 	b.w	800bd3e <_dtoa_r+0xb6>
 800c7ea:	f1b9 0f00 	cmp.w	r9, #0
 800c7ee:	dc03      	bgt.n	800c7f8 <_dtoa_r+0xb70>
 800c7f0:	9b05      	ldr	r3, [sp, #20]
 800c7f2:	2b02      	cmp	r3, #2
 800c7f4:	f73f aeca 	bgt.w	800c58c <_dtoa_r+0x904>
 800c7f8:	9d00      	ldr	r5, [sp, #0]
 800c7fa:	4631      	mov	r1, r6
 800c7fc:	4658      	mov	r0, fp
 800c7fe:	f7ff f9b5 	bl	800bb6c <quorem>
 800c802:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c806:	f805 3b01 	strb.w	r3, [r5], #1
 800c80a:	9a00      	ldr	r2, [sp, #0]
 800c80c:	1aaa      	subs	r2, r5, r2
 800c80e:	4591      	cmp	r9, r2
 800c810:	ddba      	ble.n	800c788 <_dtoa_r+0xb00>
 800c812:	4659      	mov	r1, fp
 800c814:	2300      	movs	r3, #0
 800c816:	220a      	movs	r2, #10
 800c818:	4620      	mov	r0, r4
 800c81a:	f000 fed5 	bl	800d5c8 <__multadd>
 800c81e:	4683      	mov	fp, r0
 800c820:	e7eb      	b.n	800c7fa <_dtoa_r+0xb72>
 800c822:	bf00      	nop
 800c824:	08010f19 	.word	0x08010f19
 800c828:	08010eea 	.word	0x08010eea
 800c82c:	08010f10 	.word	0x08010f10

0800c830 <__sflush_r>:
 800c830:	898b      	ldrh	r3, [r1, #12]
 800c832:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c83a:	4605      	mov	r5, r0
 800c83c:	0718      	lsls	r0, r3, #28
 800c83e:	460c      	mov	r4, r1
 800c840:	d45f      	bmi.n	800c902 <__sflush_r+0xd2>
 800c842:	684b      	ldr	r3, [r1, #4]
 800c844:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c848:	2b00      	cmp	r3, #0
 800c84a:	818a      	strh	r2, [r1, #12]
 800c84c:	dc05      	bgt.n	800c85a <__sflush_r+0x2a>
 800c84e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800c850:	2b00      	cmp	r3, #0
 800c852:	dc02      	bgt.n	800c85a <__sflush_r+0x2a>
 800c854:	2000      	movs	r0, #0
 800c856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c85a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c85c:	2e00      	cmp	r6, #0
 800c85e:	d0f9      	beq.n	800c854 <__sflush_r+0x24>
 800c860:	2300      	movs	r3, #0
 800c862:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c866:	682f      	ldr	r7, [r5, #0]
 800c868:	602b      	str	r3, [r5, #0]
 800c86a:	d036      	beq.n	800c8da <__sflush_r+0xaa>
 800c86c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c86e:	89a3      	ldrh	r3, [r4, #12]
 800c870:	075a      	lsls	r2, r3, #29
 800c872:	d505      	bpl.n	800c880 <__sflush_r+0x50>
 800c874:	6863      	ldr	r3, [r4, #4]
 800c876:	1ac0      	subs	r0, r0, r3
 800c878:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c87a:	b10b      	cbz	r3, 800c880 <__sflush_r+0x50>
 800c87c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c87e:	1ac0      	subs	r0, r0, r3
 800c880:	2300      	movs	r3, #0
 800c882:	4602      	mov	r2, r0
 800c884:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c886:	69e1      	ldr	r1, [r4, #28]
 800c888:	4628      	mov	r0, r5
 800c88a:	47b0      	blx	r6
 800c88c:	1c43      	adds	r3, r0, #1
 800c88e:	89a3      	ldrh	r3, [r4, #12]
 800c890:	d106      	bne.n	800c8a0 <__sflush_r+0x70>
 800c892:	6829      	ldr	r1, [r5, #0]
 800c894:	291d      	cmp	r1, #29
 800c896:	d830      	bhi.n	800c8fa <__sflush_r+0xca>
 800c898:	4a2b      	ldr	r2, [pc, #172]	; (800c948 <__sflush_r+0x118>)
 800c89a:	40ca      	lsrs	r2, r1
 800c89c:	07d6      	lsls	r6, r2, #31
 800c89e:	d52c      	bpl.n	800c8fa <__sflush_r+0xca>
 800c8a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c8a4:	b21b      	sxth	r3, r3
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	6062      	str	r2, [r4, #4]
 800c8aa:	04d9      	lsls	r1, r3, #19
 800c8ac:	6922      	ldr	r2, [r4, #16]
 800c8ae:	81a3      	strh	r3, [r4, #12]
 800c8b0:	6022      	str	r2, [r4, #0]
 800c8b2:	d504      	bpl.n	800c8be <__sflush_r+0x8e>
 800c8b4:	1c42      	adds	r2, r0, #1
 800c8b6:	d101      	bne.n	800c8bc <__sflush_r+0x8c>
 800c8b8:	682b      	ldr	r3, [r5, #0]
 800c8ba:	b903      	cbnz	r3, 800c8be <__sflush_r+0x8e>
 800c8bc:	6520      	str	r0, [r4, #80]	; 0x50
 800c8be:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c8c0:	602f      	str	r7, [r5, #0]
 800c8c2:	2900      	cmp	r1, #0
 800c8c4:	d0c6      	beq.n	800c854 <__sflush_r+0x24>
 800c8c6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800c8ca:	4299      	cmp	r1, r3
 800c8cc:	d002      	beq.n	800c8d4 <__sflush_r+0xa4>
 800c8ce:	4628      	mov	r0, r5
 800c8d0:	f000 f938 	bl	800cb44 <_free_r>
 800c8d4:	2000      	movs	r0, #0
 800c8d6:	6320      	str	r0, [r4, #48]	; 0x30
 800c8d8:	e7bd      	b.n	800c856 <__sflush_r+0x26>
 800c8da:	69e1      	ldr	r1, [r4, #28]
 800c8dc:	2301      	movs	r3, #1
 800c8de:	4628      	mov	r0, r5
 800c8e0:	47b0      	blx	r6
 800c8e2:	1c41      	adds	r1, r0, #1
 800c8e4:	d1c3      	bne.n	800c86e <__sflush_r+0x3e>
 800c8e6:	682b      	ldr	r3, [r5, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d0c0      	beq.n	800c86e <__sflush_r+0x3e>
 800c8ec:	2b1d      	cmp	r3, #29
 800c8ee:	d001      	beq.n	800c8f4 <__sflush_r+0xc4>
 800c8f0:	2b16      	cmp	r3, #22
 800c8f2:	d101      	bne.n	800c8f8 <__sflush_r+0xc8>
 800c8f4:	602f      	str	r7, [r5, #0]
 800c8f6:	e7ad      	b.n	800c854 <__sflush_r+0x24>
 800c8f8:	89a3      	ldrh	r3, [r4, #12]
 800c8fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8fe:	81a3      	strh	r3, [r4, #12]
 800c900:	e7a9      	b.n	800c856 <__sflush_r+0x26>
 800c902:	690f      	ldr	r7, [r1, #16]
 800c904:	2f00      	cmp	r7, #0
 800c906:	d0a5      	beq.n	800c854 <__sflush_r+0x24>
 800c908:	079b      	lsls	r3, r3, #30
 800c90a:	680e      	ldr	r6, [r1, #0]
 800c90c:	bf08      	it	eq
 800c90e:	694b      	ldreq	r3, [r1, #20]
 800c910:	600f      	str	r7, [r1, #0]
 800c912:	bf18      	it	ne
 800c914:	2300      	movne	r3, #0
 800c916:	eba6 0807 	sub.w	r8, r6, r7
 800c91a:	608b      	str	r3, [r1, #8]
 800c91c:	f1b8 0f00 	cmp.w	r8, #0
 800c920:	dd98      	ble.n	800c854 <__sflush_r+0x24>
 800c922:	69e1      	ldr	r1, [r4, #28]
 800c924:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c926:	4643      	mov	r3, r8
 800c928:	463a      	mov	r2, r7
 800c92a:	4628      	mov	r0, r5
 800c92c:	47b0      	blx	r6
 800c92e:	2800      	cmp	r0, #0
 800c930:	dc06      	bgt.n	800c940 <__sflush_r+0x110>
 800c932:	89a3      	ldrh	r3, [r4, #12]
 800c934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c938:	81a3      	strh	r3, [r4, #12]
 800c93a:	f04f 30ff 	mov.w	r0, #4294967295
 800c93e:	e78a      	b.n	800c856 <__sflush_r+0x26>
 800c940:	4407      	add	r7, r0
 800c942:	eba8 0800 	sub.w	r8, r8, r0
 800c946:	e7e9      	b.n	800c91c <__sflush_r+0xec>
 800c948:	20400001 	.word	0x20400001

0800c94c <_fflush_r>:
 800c94c:	b538      	push	{r3, r4, r5, lr}
 800c94e:	460c      	mov	r4, r1
 800c950:	4605      	mov	r5, r0
 800c952:	b118      	cbz	r0, 800c95c <_fflush_r+0x10>
 800c954:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c956:	b90b      	cbnz	r3, 800c95c <_fflush_r+0x10>
 800c958:	f000 f864 	bl	800ca24 <__sinit>
 800c95c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c960:	b1bb      	cbz	r3, 800c992 <_fflush_r+0x46>
 800c962:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c964:	07d0      	lsls	r0, r2, #31
 800c966:	d404      	bmi.n	800c972 <_fflush_r+0x26>
 800c968:	0599      	lsls	r1, r3, #22
 800c96a:	d402      	bmi.n	800c972 <_fflush_r+0x26>
 800c96c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c96e:	f000 fb19 	bl	800cfa4 <__retarget_lock_acquire_recursive>
 800c972:	4628      	mov	r0, r5
 800c974:	4621      	mov	r1, r4
 800c976:	f7ff ff5b 	bl	800c830 <__sflush_r>
 800c97a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c97c:	07da      	lsls	r2, r3, #31
 800c97e:	4605      	mov	r5, r0
 800c980:	d405      	bmi.n	800c98e <_fflush_r+0x42>
 800c982:	89a3      	ldrh	r3, [r4, #12]
 800c984:	059b      	lsls	r3, r3, #22
 800c986:	d402      	bmi.n	800c98e <_fflush_r+0x42>
 800c988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c98a:	f000 fb0c 	bl	800cfa6 <__retarget_lock_release_recursive>
 800c98e:	4628      	mov	r0, r5
 800c990:	bd38      	pop	{r3, r4, r5, pc}
 800c992:	461d      	mov	r5, r3
 800c994:	e7fb      	b.n	800c98e <_fflush_r+0x42>
	...

0800c998 <std>:
 800c998:	2300      	movs	r3, #0
 800c99a:	b510      	push	{r4, lr}
 800c99c:	4604      	mov	r4, r0
 800c99e:	e9c0 3300 	strd	r3, r3, [r0]
 800c9a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c9a6:	6083      	str	r3, [r0, #8]
 800c9a8:	8181      	strh	r1, [r0, #12]
 800c9aa:	6643      	str	r3, [r0, #100]	; 0x64
 800c9ac:	81c2      	strh	r2, [r0, #14]
 800c9ae:	6183      	str	r3, [r0, #24]
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	2208      	movs	r2, #8
 800c9b4:	305c      	adds	r0, #92	; 0x5c
 800c9b6:	f7fd fd91 	bl	800a4dc <memset>
 800c9ba:	4b07      	ldr	r3, [pc, #28]	; (800c9d8 <std+0x40>)
 800c9bc:	6223      	str	r3, [r4, #32]
 800c9be:	4b07      	ldr	r3, [pc, #28]	; (800c9dc <std+0x44>)
 800c9c0:	6263      	str	r3, [r4, #36]	; 0x24
 800c9c2:	4b07      	ldr	r3, [pc, #28]	; (800c9e0 <std+0x48>)
 800c9c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c9c6:	4b07      	ldr	r3, [pc, #28]	; (800c9e4 <std+0x4c>)
 800c9c8:	61e4      	str	r4, [r4, #28]
 800c9ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c9cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c9d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9d4:	f000 bae4 	b.w	800cfa0 <__retarget_lock_init_recursive>
 800c9d8:	0800dfa9 	.word	0x0800dfa9
 800c9dc:	0800dfcb 	.word	0x0800dfcb
 800c9e0:	0800e003 	.word	0x0800e003
 800c9e4:	0800e027 	.word	0x0800e027

0800c9e8 <_cleanup_r>:
 800c9e8:	4901      	ldr	r1, [pc, #4]	; (800c9f0 <_cleanup_r+0x8>)
 800c9ea:	f000 bab5 	b.w	800cf58 <_fwalk_reent>
 800c9ee:	bf00      	nop
 800c9f0:	0800ebc1 	.word	0x0800ebc1

0800c9f4 <__sfp_lock_acquire>:
 800c9f4:	4801      	ldr	r0, [pc, #4]	; (800c9fc <__sfp_lock_acquire+0x8>)
 800c9f6:	f000 bad5 	b.w	800cfa4 <__retarget_lock_acquire_recursive>
 800c9fa:	bf00      	nop
 800c9fc:	20001bb8 	.word	0x20001bb8

0800ca00 <__sfp_lock_release>:
 800ca00:	4801      	ldr	r0, [pc, #4]	; (800ca08 <__sfp_lock_release+0x8>)
 800ca02:	f000 bad0 	b.w	800cfa6 <__retarget_lock_release_recursive>
 800ca06:	bf00      	nop
 800ca08:	20001bb8 	.word	0x20001bb8

0800ca0c <__sinit_lock_acquire>:
 800ca0c:	4801      	ldr	r0, [pc, #4]	; (800ca14 <__sinit_lock_acquire+0x8>)
 800ca0e:	f000 bac9 	b.w	800cfa4 <__retarget_lock_acquire_recursive>
 800ca12:	bf00      	nop
 800ca14:	20001bb3 	.word	0x20001bb3

0800ca18 <__sinit_lock_release>:
 800ca18:	4801      	ldr	r0, [pc, #4]	; (800ca20 <__sinit_lock_release+0x8>)
 800ca1a:	f000 bac4 	b.w	800cfa6 <__retarget_lock_release_recursive>
 800ca1e:	bf00      	nop
 800ca20:	20001bb3 	.word	0x20001bb3

0800ca24 <__sinit>:
 800ca24:	b510      	push	{r4, lr}
 800ca26:	4604      	mov	r4, r0
 800ca28:	f7ff fff0 	bl	800ca0c <__sinit_lock_acquire>
 800ca2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ca2e:	b11a      	cbz	r2, 800ca38 <__sinit+0x14>
 800ca30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca34:	f7ff bff0 	b.w	800ca18 <__sinit_lock_release>
 800ca38:	4b0d      	ldr	r3, [pc, #52]	; (800ca70 <__sinit+0x4c>)
 800ca3a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800ca3c:	2303      	movs	r3, #3
 800ca3e:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800ca42:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800ca46:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800ca4a:	6860      	ldr	r0, [r4, #4]
 800ca4c:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800ca50:	2104      	movs	r1, #4
 800ca52:	f7ff ffa1 	bl	800c998 <std>
 800ca56:	68a0      	ldr	r0, [r4, #8]
 800ca58:	2201      	movs	r2, #1
 800ca5a:	2109      	movs	r1, #9
 800ca5c:	f7ff ff9c 	bl	800c998 <std>
 800ca60:	68e0      	ldr	r0, [r4, #12]
 800ca62:	2202      	movs	r2, #2
 800ca64:	2112      	movs	r1, #18
 800ca66:	f7ff ff97 	bl	800c998 <std>
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	63a3      	str	r3, [r4, #56]	; 0x38
 800ca6e:	e7df      	b.n	800ca30 <__sinit+0xc>
 800ca70:	0800c9e9 	.word	0x0800c9e9

0800ca74 <__libc_fini_array>:
 800ca74:	b538      	push	{r3, r4, r5, lr}
 800ca76:	4d07      	ldr	r5, [pc, #28]	; (800ca94 <__libc_fini_array+0x20>)
 800ca78:	4c07      	ldr	r4, [pc, #28]	; (800ca98 <__libc_fini_array+0x24>)
 800ca7a:	1b64      	subs	r4, r4, r5
 800ca7c:	10a4      	asrs	r4, r4, #2
 800ca7e:	b91c      	cbnz	r4, 800ca88 <__libc_fini_array+0x14>
 800ca80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca84:	f004 b9e8 	b.w	8010e58 <_fini>
 800ca88:	3c01      	subs	r4, #1
 800ca8a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800ca8e:	4798      	blx	r3
 800ca90:	e7f5      	b.n	800ca7e <__libc_fini_array+0xa>
 800ca92:	bf00      	nop
 800ca94:	08011498 	.word	0x08011498
 800ca98:	0801149c 	.word	0x0801149c

0800ca9c <_malloc_trim_r>:
 800ca9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caa0:	4606      	mov	r6, r0
 800caa2:	2008      	movs	r0, #8
 800caa4:	460c      	mov	r4, r1
 800caa6:	f001 fad5 	bl	800e054 <sysconf>
 800caaa:	4f23      	ldr	r7, [pc, #140]	; (800cb38 <_malloc_trim_r+0x9c>)
 800caac:	4680      	mov	r8, r0
 800caae:	4630      	mov	r0, r6
 800cab0:	f000 fd50 	bl	800d554 <__malloc_lock>
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	685d      	ldr	r5, [r3, #4]
 800cab8:	f025 0503 	bic.w	r5, r5, #3
 800cabc:	1b2c      	subs	r4, r5, r4
 800cabe:	3c11      	subs	r4, #17
 800cac0:	4444      	add	r4, r8
 800cac2:	fbb4 f4f8 	udiv	r4, r4, r8
 800cac6:	3c01      	subs	r4, #1
 800cac8:	fb08 f404 	mul.w	r4, r8, r4
 800cacc:	45a0      	cmp	r8, r4
 800cace:	dd05      	ble.n	800cadc <_malloc_trim_r+0x40>
 800cad0:	4630      	mov	r0, r6
 800cad2:	f000 fd45 	bl	800d560 <__malloc_unlock>
 800cad6:	2000      	movs	r0, #0
 800cad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cadc:	2100      	movs	r1, #0
 800cade:	4630      	mov	r0, r6
 800cae0:	f001 fa52 	bl	800df88 <_sbrk_r>
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	442b      	add	r3, r5
 800cae8:	4298      	cmp	r0, r3
 800caea:	d1f1      	bne.n	800cad0 <_malloc_trim_r+0x34>
 800caec:	4261      	negs	r1, r4
 800caee:	4630      	mov	r0, r6
 800caf0:	f001 fa4a 	bl	800df88 <_sbrk_r>
 800caf4:	3001      	adds	r0, #1
 800caf6:	d110      	bne.n	800cb1a <_malloc_trim_r+0x7e>
 800caf8:	2100      	movs	r1, #0
 800cafa:	4630      	mov	r0, r6
 800cafc:	f001 fa44 	bl	800df88 <_sbrk_r>
 800cb00:	68ba      	ldr	r2, [r7, #8]
 800cb02:	1a83      	subs	r3, r0, r2
 800cb04:	2b0f      	cmp	r3, #15
 800cb06:	dde3      	ble.n	800cad0 <_malloc_trim_r+0x34>
 800cb08:	490c      	ldr	r1, [pc, #48]	; (800cb3c <_malloc_trim_r+0xa0>)
 800cb0a:	6809      	ldr	r1, [r1, #0]
 800cb0c:	1a40      	subs	r0, r0, r1
 800cb0e:	490c      	ldr	r1, [pc, #48]	; (800cb40 <_malloc_trim_r+0xa4>)
 800cb10:	f043 0301 	orr.w	r3, r3, #1
 800cb14:	6008      	str	r0, [r1, #0]
 800cb16:	6053      	str	r3, [r2, #4]
 800cb18:	e7da      	b.n	800cad0 <_malloc_trim_r+0x34>
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	4a08      	ldr	r2, [pc, #32]	; (800cb40 <_malloc_trim_r+0xa4>)
 800cb1e:	1b2d      	subs	r5, r5, r4
 800cb20:	f045 0501 	orr.w	r5, r5, #1
 800cb24:	605d      	str	r5, [r3, #4]
 800cb26:	6813      	ldr	r3, [r2, #0]
 800cb28:	4630      	mov	r0, r6
 800cb2a:	1b1c      	subs	r4, r3, r4
 800cb2c:	6014      	str	r4, [r2, #0]
 800cb2e:	f000 fd17 	bl	800d560 <__malloc_unlock>
 800cb32:	2001      	movs	r0, #1
 800cb34:	e7d0      	b.n	800cad8 <_malloc_trim_r+0x3c>
 800cb36:	bf00      	nop
 800cb38:	2000047c 	.word	0x2000047c
 800cb3c:	20000884 	.word	0x20000884
 800cb40:	20000a28 	.word	0x20000a28

0800cb44 <_free_r>:
 800cb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb46:	4605      	mov	r5, r0
 800cb48:	460f      	mov	r7, r1
 800cb4a:	2900      	cmp	r1, #0
 800cb4c:	f000 80b1 	beq.w	800ccb2 <_free_r+0x16e>
 800cb50:	f000 fd00 	bl	800d554 <__malloc_lock>
 800cb54:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800cb58:	4856      	ldr	r0, [pc, #344]	; (800ccb4 <_free_r+0x170>)
 800cb5a:	f022 0401 	bic.w	r4, r2, #1
 800cb5e:	f1a7 0308 	sub.w	r3, r7, #8
 800cb62:	eb03 0c04 	add.w	ip, r3, r4
 800cb66:	6881      	ldr	r1, [r0, #8]
 800cb68:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800cb6c:	4561      	cmp	r1, ip
 800cb6e:	f026 0603 	bic.w	r6, r6, #3
 800cb72:	f002 0201 	and.w	r2, r2, #1
 800cb76:	d11b      	bne.n	800cbb0 <_free_r+0x6c>
 800cb78:	4434      	add	r4, r6
 800cb7a:	b93a      	cbnz	r2, 800cb8c <_free_r+0x48>
 800cb7c:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800cb80:	1a9b      	subs	r3, r3, r2
 800cb82:	4414      	add	r4, r2
 800cb84:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800cb88:	60ca      	str	r2, [r1, #12]
 800cb8a:	6091      	str	r1, [r2, #8]
 800cb8c:	f044 0201 	orr.w	r2, r4, #1
 800cb90:	605a      	str	r2, [r3, #4]
 800cb92:	6083      	str	r3, [r0, #8]
 800cb94:	4b48      	ldr	r3, [pc, #288]	; (800ccb8 <_free_r+0x174>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	42a3      	cmp	r3, r4
 800cb9a:	d804      	bhi.n	800cba6 <_free_r+0x62>
 800cb9c:	4b47      	ldr	r3, [pc, #284]	; (800ccbc <_free_r+0x178>)
 800cb9e:	4628      	mov	r0, r5
 800cba0:	6819      	ldr	r1, [r3, #0]
 800cba2:	f7ff ff7b 	bl	800ca9c <_malloc_trim_r>
 800cba6:	4628      	mov	r0, r5
 800cba8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cbac:	f000 bcd8 	b.w	800d560 <__malloc_unlock>
 800cbb0:	f8cc 6004 	str.w	r6, [ip, #4]
 800cbb4:	2a00      	cmp	r2, #0
 800cbb6:	d138      	bne.n	800cc2a <_free_r+0xe6>
 800cbb8:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800cbbc:	1a5b      	subs	r3, r3, r1
 800cbbe:	440c      	add	r4, r1
 800cbc0:	6899      	ldr	r1, [r3, #8]
 800cbc2:	f100 0708 	add.w	r7, r0, #8
 800cbc6:	42b9      	cmp	r1, r7
 800cbc8:	d031      	beq.n	800cc2e <_free_r+0xea>
 800cbca:	68df      	ldr	r7, [r3, #12]
 800cbcc:	60cf      	str	r7, [r1, #12]
 800cbce:	60b9      	str	r1, [r7, #8]
 800cbd0:	eb0c 0106 	add.w	r1, ip, r6
 800cbd4:	6849      	ldr	r1, [r1, #4]
 800cbd6:	07c9      	lsls	r1, r1, #31
 800cbd8:	d40b      	bmi.n	800cbf2 <_free_r+0xae>
 800cbda:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800cbde:	4434      	add	r4, r6
 800cbe0:	bb3a      	cbnz	r2, 800cc32 <_free_r+0xee>
 800cbe2:	4e37      	ldr	r6, [pc, #220]	; (800ccc0 <_free_r+0x17c>)
 800cbe4:	42b1      	cmp	r1, r6
 800cbe6:	d124      	bne.n	800cc32 <_free_r+0xee>
 800cbe8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cbec:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	f044 0101 	orr.w	r1, r4, #1
 800cbf6:	6059      	str	r1, [r3, #4]
 800cbf8:	511c      	str	r4, [r3, r4]
 800cbfa:	2a00      	cmp	r2, #0
 800cbfc:	d1d3      	bne.n	800cba6 <_free_r+0x62>
 800cbfe:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800cc02:	d21b      	bcs.n	800cc3c <_free_r+0xf8>
 800cc04:	0961      	lsrs	r1, r4, #5
 800cc06:	08e2      	lsrs	r2, r4, #3
 800cc08:	2401      	movs	r4, #1
 800cc0a:	408c      	lsls	r4, r1
 800cc0c:	6841      	ldr	r1, [r0, #4]
 800cc0e:	3201      	adds	r2, #1
 800cc10:	430c      	orrs	r4, r1
 800cc12:	6044      	str	r4, [r0, #4]
 800cc14:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800cc18:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800cc1c:	3908      	subs	r1, #8
 800cc1e:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800cc22:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800cc26:	60e3      	str	r3, [r4, #12]
 800cc28:	e7bd      	b.n	800cba6 <_free_r+0x62>
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	e7d0      	b.n	800cbd0 <_free_r+0x8c>
 800cc2e:	2201      	movs	r2, #1
 800cc30:	e7ce      	b.n	800cbd0 <_free_r+0x8c>
 800cc32:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800cc36:	60ce      	str	r6, [r1, #12]
 800cc38:	60b1      	str	r1, [r6, #8]
 800cc3a:	e7da      	b.n	800cbf2 <_free_r+0xae>
 800cc3c:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800cc40:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800cc44:	d214      	bcs.n	800cc70 <_free_r+0x12c>
 800cc46:	09a2      	lsrs	r2, r4, #6
 800cc48:	3238      	adds	r2, #56	; 0x38
 800cc4a:	1c51      	adds	r1, r2, #1
 800cc4c:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800cc50:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800cc54:	428e      	cmp	r6, r1
 800cc56:	d125      	bne.n	800cca4 <_free_r+0x160>
 800cc58:	2401      	movs	r4, #1
 800cc5a:	1092      	asrs	r2, r2, #2
 800cc5c:	fa04 f202 	lsl.w	r2, r4, r2
 800cc60:	6844      	ldr	r4, [r0, #4]
 800cc62:	4322      	orrs	r2, r4
 800cc64:	6042      	str	r2, [r0, #4]
 800cc66:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800cc6a:	60b3      	str	r3, [r6, #8]
 800cc6c:	60cb      	str	r3, [r1, #12]
 800cc6e:	e79a      	b.n	800cba6 <_free_r+0x62>
 800cc70:	2a14      	cmp	r2, #20
 800cc72:	d801      	bhi.n	800cc78 <_free_r+0x134>
 800cc74:	325b      	adds	r2, #91	; 0x5b
 800cc76:	e7e8      	b.n	800cc4a <_free_r+0x106>
 800cc78:	2a54      	cmp	r2, #84	; 0x54
 800cc7a:	d802      	bhi.n	800cc82 <_free_r+0x13e>
 800cc7c:	0b22      	lsrs	r2, r4, #12
 800cc7e:	326e      	adds	r2, #110	; 0x6e
 800cc80:	e7e3      	b.n	800cc4a <_free_r+0x106>
 800cc82:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800cc86:	d802      	bhi.n	800cc8e <_free_r+0x14a>
 800cc88:	0be2      	lsrs	r2, r4, #15
 800cc8a:	3277      	adds	r2, #119	; 0x77
 800cc8c:	e7dd      	b.n	800cc4a <_free_r+0x106>
 800cc8e:	f240 5154 	movw	r1, #1364	; 0x554
 800cc92:	428a      	cmp	r2, r1
 800cc94:	bf9a      	itte	ls
 800cc96:	0ca2      	lsrls	r2, r4, #18
 800cc98:	327c      	addls	r2, #124	; 0x7c
 800cc9a:	227e      	movhi	r2, #126	; 0x7e
 800cc9c:	e7d5      	b.n	800cc4a <_free_r+0x106>
 800cc9e:	6889      	ldr	r1, [r1, #8]
 800cca0:	428e      	cmp	r6, r1
 800cca2:	d004      	beq.n	800ccae <_free_r+0x16a>
 800cca4:	684a      	ldr	r2, [r1, #4]
 800cca6:	f022 0203 	bic.w	r2, r2, #3
 800ccaa:	42a2      	cmp	r2, r4
 800ccac:	d8f7      	bhi.n	800cc9e <_free_r+0x15a>
 800ccae:	68ce      	ldr	r6, [r1, #12]
 800ccb0:	e7d9      	b.n	800cc66 <_free_r+0x122>
 800ccb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccb4:	2000047c 	.word	0x2000047c
 800ccb8:	20000888 	.word	0x20000888
 800ccbc:	20000a58 	.word	0x20000a58
 800ccc0:	20000484 	.word	0x20000484

0800ccc4 <__sfvwrite_r>:
 800ccc4:	6893      	ldr	r3, [r2, #8]
 800ccc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccca:	4606      	mov	r6, r0
 800cccc:	460c      	mov	r4, r1
 800ccce:	4690      	mov	r8, r2
 800ccd0:	b91b      	cbnz	r3, 800ccda <__sfvwrite_r+0x16>
 800ccd2:	2000      	movs	r0, #0
 800ccd4:	b003      	add	sp, #12
 800ccd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccda:	898b      	ldrh	r3, [r1, #12]
 800ccdc:	0718      	lsls	r0, r3, #28
 800ccde:	d550      	bpl.n	800cd82 <__sfvwrite_r+0xbe>
 800cce0:	690b      	ldr	r3, [r1, #16]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d04d      	beq.n	800cd82 <__sfvwrite_r+0xbe>
 800cce6:	89a3      	ldrh	r3, [r4, #12]
 800cce8:	f8d8 7000 	ldr.w	r7, [r8]
 800ccec:	f013 0902 	ands.w	r9, r3, #2
 800ccf0:	d16c      	bne.n	800cdcc <__sfvwrite_r+0x108>
 800ccf2:	f013 0301 	ands.w	r3, r3, #1
 800ccf6:	f000 809c 	beq.w	800ce32 <__sfvwrite_r+0x16e>
 800ccfa:	4648      	mov	r0, r9
 800ccfc:	46ca      	mov	sl, r9
 800ccfe:	46cb      	mov	fp, r9
 800cd00:	f1bb 0f00 	cmp.w	fp, #0
 800cd04:	f000 8103 	beq.w	800cf0e <__sfvwrite_r+0x24a>
 800cd08:	b950      	cbnz	r0, 800cd20 <__sfvwrite_r+0x5c>
 800cd0a:	465a      	mov	r2, fp
 800cd0c:	210a      	movs	r1, #10
 800cd0e:	4650      	mov	r0, sl
 800cd10:	f7f3 fa8e 	bl	8000230 <memchr>
 800cd14:	2800      	cmp	r0, #0
 800cd16:	f000 80ff 	beq.w	800cf18 <__sfvwrite_r+0x254>
 800cd1a:	3001      	adds	r0, #1
 800cd1c:	eba0 090a 	sub.w	r9, r0, sl
 800cd20:	6820      	ldr	r0, [r4, #0]
 800cd22:	6921      	ldr	r1, [r4, #16]
 800cd24:	6963      	ldr	r3, [r4, #20]
 800cd26:	45d9      	cmp	r9, fp
 800cd28:	464a      	mov	r2, r9
 800cd2a:	bf28      	it	cs
 800cd2c:	465a      	movcs	r2, fp
 800cd2e:	4288      	cmp	r0, r1
 800cd30:	f240 80f5 	bls.w	800cf1e <__sfvwrite_r+0x25a>
 800cd34:	68a5      	ldr	r5, [r4, #8]
 800cd36:	441d      	add	r5, r3
 800cd38:	42aa      	cmp	r2, r5
 800cd3a:	f340 80f0 	ble.w	800cf1e <__sfvwrite_r+0x25a>
 800cd3e:	4651      	mov	r1, sl
 800cd40:	462a      	mov	r2, r5
 800cd42:	f000 fbed 	bl	800d520 <memmove>
 800cd46:	6823      	ldr	r3, [r4, #0]
 800cd48:	442b      	add	r3, r5
 800cd4a:	6023      	str	r3, [r4, #0]
 800cd4c:	4621      	mov	r1, r4
 800cd4e:	4630      	mov	r0, r6
 800cd50:	f7ff fdfc 	bl	800c94c <_fflush_r>
 800cd54:	2800      	cmp	r0, #0
 800cd56:	d167      	bne.n	800ce28 <__sfvwrite_r+0x164>
 800cd58:	ebb9 0905 	subs.w	r9, r9, r5
 800cd5c:	f040 80f7 	bne.w	800cf4e <__sfvwrite_r+0x28a>
 800cd60:	4621      	mov	r1, r4
 800cd62:	4630      	mov	r0, r6
 800cd64:	f7ff fdf2 	bl	800c94c <_fflush_r>
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	d15d      	bne.n	800ce28 <__sfvwrite_r+0x164>
 800cd6c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800cd70:	44aa      	add	sl, r5
 800cd72:	ebab 0b05 	sub.w	fp, fp, r5
 800cd76:	1b55      	subs	r5, r2, r5
 800cd78:	f8c8 5008 	str.w	r5, [r8, #8]
 800cd7c:	2d00      	cmp	r5, #0
 800cd7e:	d1bf      	bne.n	800cd00 <__sfvwrite_r+0x3c>
 800cd80:	e7a7      	b.n	800ccd2 <__sfvwrite_r+0xe>
 800cd82:	4621      	mov	r1, r4
 800cd84:	4630      	mov	r0, r6
 800cd86:	f7fe fe89 	bl	800ba9c <__swsetup_r>
 800cd8a:	2800      	cmp	r0, #0
 800cd8c:	d0ab      	beq.n	800cce6 <__sfvwrite_r+0x22>
 800cd8e:	f04f 30ff 	mov.w	r0, #4294967295
 800cd92:	e79f      	b.n	800ccd4 <__sfvwrite_r+0x10>
 800cd94:	e9d7 b900 	ldrd	fp, r9, [r7]
 800cd98:	3708      	adds	r7, #8
 800cd9a:	f1b9 0f00 	cmp.w	r9, #0
 800cd9e:	d0f9      	beq.n	800cd94 <__sfvwrite_r+0xd0>
 800cda0:	45d1      	cmp	r9, sl
 800cda2:	464b      	mov	r3, r9
 800cda4:	69e1      	ldr	r1, [r4, #28]
 800cda6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800cda8:	bf28      	it	cs
 800cdaa:	4653      	movcs	r3, sl
 800cdac:	465a      	mov	r2, fp
 800cdae:	4630      	mov	r0, r6
 800cdb0:	47a8      	blx	r5
 800cdb2:	2800      	cmp	r0, #0
 800cdb4:	dd38      	ble.n	800ce28 <__sfvwrite_r+0x164>
 800cdb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cdba:	4483      	add	fp, r0
 800cdbc:	eba9 0900 	sub.w	r9, r9, r0
 800cdc0:	1a18      	subs	r0, r3, r0
 800cdc2:	f8c8 0008 	str.w	r0, [r8, #8]
 800cdc6:	2800      	cmp	r0, #0
 800cdc8:	d1e7      	bne.n	800cd9a <__sfvwrite_r+0xd6>
 800cdca:	e782      	b.n	800ccd2 <__sfvwrite_r+0xe>
 800cdcc:	f04f 0b00 	mov.w	fp, #0
 800cdd0:	f8df a180 	ldr.w	sl, [pc, #384]	; 800cf54 <__sfvwrite_r+0x290>
 800cdd4:	46d9      	mov	r9, fp
 800cdd6:	e7e0      	b.n	800cd9a <__sfvwrite_r+0xd6>
 800cdd8:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800cddc:	3708      	adds	r7, #8
 800cdde:	f1ba 0f00 	cmp.w	sl, #0
 800cde2:	d0f9      	beq.n	800cdd8 <__sfvwrite_r+0x114>
 800cde4:	89a3      	ldrh	r3, [r4, #12]
 800cde6:	68a2      	ldr	r2, [r4, #8]
 800cde8:	6820      	ldr	r0, [r4, #0]
 800cdea:	0599      	lsls	r1, r3, #22
 800cdec:	d563      	bpl.n	800ceb6 <__sfvwrite_r+0x1f2>
 800cdee:	4552      	cmp	r2, sl
 800cdf0:	d836      	bhi.n	800ce60 <__sfvwrite_r+0x19c>
 800cdf2:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800cdf6:	d033      	beq.n	800ce60 <__sfvwrite_r+0x19c>
 800cdf8:	6921      	ldr	r1, [r4, #16]
 800cdfa:	6965      	ldr	r5, [r4, #20]
 800cdfc:	eba0 0b01 	sub.w	fp, r0, r1
 800ce00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce08:	f10b 0201 	add.w	r2, fp, #1
 800ce0c:	106d      	asrs	r5, r5, #1
 800ce0e:	4452      	add	r2, sl
 800ce10:	4295      	cmp	r5, r2
 800ce12:	bf38      	it	cc
 800ce14:	4615      	movcc	r5, r2
 800ce16:	055b      	lsls	r3, r3, #21
 800ce18:	d53d      	bpl.n	800ce96 <__sfvwrite_r+0x1d2>
 800ce1a:	4629      	mov	r1, r5
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	f000 f92f 	bl	800d080 <_malloc_r>
 800ce22:	b948      	cbnz	r0, 800ce38 <__sfvwrite_r+0x174>
 800ce24:	230c      	movs	r3, #12
 800ce26:	6033      	str	r3, [r6, #0]
 800ce28:	89a3      	ldrh	r3, [r4, #12]
 800ce2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce2e:	81a3      	strh	r3, [r4, #12]
 800ce30:	e7ad      	b.n	800cd8e <__sfvwrite_r+0xca>
 800ce32:	4699      	mov	r9, r3
 800ce34:	469a      	mov	sl, r3
 800ce36:	e7d2      	b.n	800cdde <__sfvwrite_r+0x11a>
 800ce38:	465a      	mov	r2, fp
 800ce3a:	6921      	ldr	r1, [r4, #16]
 800ce3c:	9001      	str	r0, [sp, #4]
 800ce3e:	f000 fb61 	bl	800d504 <memcpy>
 800ce42:	89a2      	ldrh	r2, [r4, #12]
 800ce44:	9b01      	ldr	r3, [sp, #4]
 800ce46:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800ce4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ce4e:	81a2      	strh	r2, [r4, #12]
 800ce50:	6123      	str	r3, [r4, #16]
 800ce52:	6165      	str	r5, [r4, #20]
 800ce54:	445b      	add	r3, fp
 800ce56:	eba5 050b 	sub.w	r5, r5, fp
 800ce5a:	6023      	str	r3, [r4, #0]
 800ce5c:	4652      	mov	r2, sl
 800ce5e:	60a5      	str	r5, [r4, #8]
 800ce60:	4552      	cmp	r2, sl
 800ce62:	bf28      	it	cs
 800ce64:	4652      	movcs	r2, sl
 800ce66:	6820      	ldr	r0, [r4, #0]
 800ce68:	9201      	str	r2, [sp, #4]
 800ce6a:	4649      	mov	r1, r9
 800ce6c:	f000 fb58 	bl	800d520 <memmove>
 800ce70:	68a3      	ldr	r3, [r4, #8]
 800ce72:	9a01      	ldr	r2, [sp, #4]
 800ce74:	1a9b      	subs	r3, r3, r2
 800ce76:	60a3      	str	r3, [r4, #8]
 800ce78:	6823      	ldr	r3, [r4, #0]
 800ce7a:	441a      	add	r2, r3
 800ce7c:	4655      	mov	r5, sl
 800ce7e:	6022      	str	r2, [r4, #0]
 800ce80:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800ce84:	44a9      	add	r9, r5
 800ce86:	ebaa 0a05 	sub.w	sl, sl, r5
 800ce8a:	1b45      	subs	r5, r0, r5
 800ce8c:	f8c8 5008 	str.w	r5, [r8, #8]
 800ce90:	2d00      	cmp	r5, #0
 800ce92:	d1a4      	bne.n	800cdde <__sfvwrite_r+0x11a>
 800ce94:	e71d      	b.n	800ccd2 <__sfvwrite_r+0xe>
 800ce96:	462a      	mov	r2, r5
 800ce98:	4630      	mov	r0, r6
 800ce9a:	f000 fe97 	bl	800dbcc <_realloc_r>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	2800      	cmp	r0, #0
 800cea2:	d1d5      	bne.n	800ce50 <__sfvwrite_r+0x18c>
 800cea4:	6921      	ldr	r1, [r4, #16]
 800cea6:	4630      	mov	r0, r6
 800cea8:	f7ff fe4c 	bl	800cb44 <_free_r>
 800ceac:	89a3      	ldrh	r3, [r4, #12]
 800ceae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ceb2:	81a3      	strh	r3, [r4, #12]
 800ceb4:	e7b6      	b.n	800ce24 <__sfvwrite_r+0x160>
 800ceb6:	6923      	ldr	r3, [r4, #16]
 800ceb8:	4283      	cmp	r3, r0
 800ceba:	d302      	bcc.n	800cec2 <__sfvwrite_r+0x1fe>
 800cebc:	6961      	ldr	r1, [r4, #20]
 800cebe:	4551      	cmp	r1, sl
 800cec0:	d915      	bls.n	800ceee <__sfvwrite_r+0x22a>
 800cec2:	4552      	cmp	r2, sl
 800cec4:	bf28      	it	cs
 800cec6:	4652      	movcs	r2, sl
 800cec8:	4649      	mov	r1, r9
 800ceca:	4615      	mov	r5, r2
 800cecc:	f000 fb28 	bl	800d520 <memmove>
 800ced0:	68a3      	ldr	r3, [r4, #8]
 800ced2:	6822      	ldr	r2, [r4, #0]
 800ced4:	1b5b      	subs	r3, r3, r5
 800ced6:	442a      	add	r2, r5
 800ced8:	60a3      	str	r3, [r4, #8]
 800ceda:	6022      	str	r2, [r4, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d1cf      	bne.n	800ce80 <__sfvwrite_r+0x1bc>
 800cee0:	4621      	mov	r1, r4
 800cee2:	4630      	mov	r0, r6
 800cee4:	f7ff fd32 	bl	800c94c <_fflush_r>
 800cee8:	2800      	cmp	r0, #0
 800ceea:	d0c9      	beq.n	800ce80 <__sfvwrite_r+0x1bc>
 800ceec:	e79c      	b.n	800ce28 <__sfvwrite_r+0x164>
 800ceee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cef2:	459a      	cmp	sl, r3
 800cef4:	bf38      	it	cc
 800cef6:	4653      	movcc	r3, sl
 800cef8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800cefa:	fb93 f3f1 	sdiv	r3, r3, r1
 800cefe:	464a      	mov	r2, r9
 800cf00:	434b      	muls	r3, r1
 800cf02:	4630      	mov	r0, r6
 800cf04:	69e1      	ldr	r1, [r4, #28]
 800cf06:	47a8      	blx	r5
 800cf08:	1e05      	subs	r5, r0, #0
 800cf0a:	dcb9      	bgt.n	800ce80 <__sfvwrite_r+0x1bc>
 800cf0c:	e78c      	b.n	800ce28 <__sfvwrite_r+0x164>
 800cf0e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cf12:	2000      	movs	r0, #0
 800cf14:	3708      	adds	r7, #8
 800cf16:	e6f3      	b.n	800cd00 <__sfvwrite_r+0x3c>
 800cf18:	f10b 0901 	add.w	r9, fp, #1
 800cf1c:	e700      	b.n	800cd20 <__sfvwrite_r+0x5c>
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	dc08      	bgt.n	800cf34 <__sfvwrite_r+0x270>
 800cf22:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800cf24:	69e1      	ldr	r1, [r4, #28]
 800cf26:	4652      	mov	r2, sl
 800cf28:	4630      	mov	r0, r6
 800cf2a:	47a8      	blx	r5
 800cf2c:	1e05      	subs	r5, r0, #0
 800cf2e:	f73f af13 	bgt.w	800cd58 <__sfvwrite_r+0x94>
 800cf32:	e779      	b.n	800ce28 <__sfvwrite_r+0x164>
 800cf34:	4651      	mov	r1, sl
 800cf36:	9201      	str	r2, [sp, #4]
 800cf38:	f000 faf2 	bl	800d520 <memmove>
 800cf3c:	9a01      	ldr	r2, [sp, #4]
 800cf3e:	68a3      	ldr	r3, [r4, #8]
 800cf40:	1a9b      	subs	r3, r3, r2
 800cf42:	60a3      	str	r3, [r4, #8]
 800cf44:	6823      	ldr	r3, [r4, #0]
 800cf46:	4413      	add	r3, r2
 800cf48:	6023      	str	r3, [r4, #0]
 800cf4a:	4615      	mov	r5, r2
 800cf4c:	e704      	b.n	800cd58 <__sfvwrite_r+0x94>
 800cf4e:	2001      	movs	r0, #1
 800cf50:	e70c      	b.n	800cd6c <__sfvwrite_r+0xa8>
 800cf52:	bf00      	nop
 800cf54:	7ffffc00 	.word	0x7ffffc00

0800cf58 <_fwalk_reent>:
 800cf58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf5c:	4606      	mov	r6, r0
 800cf5e:	4688      	mov	r8, r1
 800cf60:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800cf64:	2700      	movs	r7, #0
 800cf66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf6a:	f1b9 0901 	subs.w	r9, r9, #1
 800cf6e:	d505      	bpl.n	800cf7c <_fwalk_reent+0x24>
 800cf70:	6824      	ldr	r4, [r4, #0]
 800cf72:	2c00      	cmp	r4, #0
 800cf74:	d1f7      	bne.n	800cf66 <_fwalk_reent+0xe>
 800cf76:	4638      	mov	r0, r7
 800cf78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf7c:	89ab      	ldrh	r3, [r5, #12]
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d907      	bls.n	800cf92 <_fwalk_reent+0x3a>
 800cf82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf86:	3301      	adds	r3, #1
 800cf88:	d003      	beq.n	800cf92 <_fwalk_reent+0x3a>
 800cf8a:	4629      	mov	r1, r5
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	47c0      	blx	r8
 800cf90:	4307      	orrs	r7, r0
 800cf92:	3568      	adds	r5, #104	; 0x68
 800cf94:	e7e9      	b.n	800cf6a <_fwalk_reent+0x12>
	...

0800cf98 <_localeconv_r>:
 800cf98:	4800      	ldr	r0, [pc, #0]	; (800cf9c <_localeconv_r+0x4>)
 800cf9a:	4770      	bx	lr
 800cf9c:	2000097c 	.word	0x2000097c

0800cfa0 <__retarget_lock_init_recursive>:
 800cfa0:	4770      	bx	lr

0800cfa2 <__retarget_lock_close_recursive>:
 800cfa2:	4770      	bx	lr

0800cfa4 <__retarget_lock_acquire_recursive>:
 800cfa4:	4770      	bx	lr

0800cfa6 <__retarget_lock_release_recursive>:
 800cfa6:	4770      	bx	lr

0800cfa8 <__swhatbuf_r>:
 800cfa8:	b570      	push	{r4, r5, r6, lr}
 800cfaa:	460e      	mov	r6, r1
 800cfac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfb0:	2900      	cmp	r1, #0
 800cfb2:	b096      	sub	sp, #88	; 0x58
 800cfb4:	4614      	mov	r4, r2
 800cfb6:	461d      	mov	r5, r3
 800cfb8:	da09      	bge.n	800cfce <__swhatbuf_r+0x26>
 800cfba:	89b3      	ldrh	r3, [r6, #12]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800cfc2:	602a      	str	r2, [r5, #0]
 800cfc4:	d116      	bne.n	800cff4 <__swhatbuf_r+0x4c>
 800cfc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfca:	6023      	str	r3, [r4, #0]
 800cfcc:	e015      	b.n	800cffa <__swhatbuf_r+0x52>
 800cfce:	466a      	mov	r2, sp
 800cfd0:	f001 fecc 	bl	800ed6c <_fstat_r>
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	dbf0      	blt.n	800cfba <__swhatbuf_r+0x12>
 800cfd8:	9a01      	ldr	r2, [sp, #4]
 800cfda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cfde:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cfe2:	425a      	negs	r2, r3
 800cfe4:	415a      	adcs	r2, r3
 800cfe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfea:	602a      	str	r2, [r5, #0]
 800cfec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800cff0:	6023      	str	r3, [r4, #0]
 800cff2:	e002      	b.n	800cffa <__swhatbuf_r+0x52>
 800cff4:	2340      	movs	r3, #64	; 0x40
 800cff6:	6023      	str	r3, [r4, #0]
 800cff8:	4610      	mov	r0, r2
 800cffa:	b016      	add	sp, #88	; 0x58
 800cffc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d000 <__smakebuf_r>:
 800d000:	898b      	ldrh	r3, [r1, #12]
 800d002:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d004:	079d      	lsls	r5, r3, #30
 800d006:	4606      	mov	r6, r0
 800d008:	460c      	mov	r4, r1
 800d00a:	d507      	bpl.n	800d01c <__smakebuf_r+0x1c>
 800d00c:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800d010:	6023      	str	r3, [r4, #0]
 800d012:	6123      	str	r3, [r4, #16]
 800d014:	2301      	movs	r3, #1
 800d016:	6163      	str	r3, [r4, #20]
 800d018:	b002      	add	sp, #8
 800d01a:	bd70      	pop	{r4, r5, r6, pc}
 800d01c:	ab01      	add	r3, sp, #4
 800d01e:	466a      	mov	r2, sp
 800d020:	f7ff ffc2 	bl	800cfa8 <__swhatbuf_r>
 800d024:	9900      	ldr	r1, [sp, #0]
 800d026:	4605      	mov	r5, r0
 800d028:	4630      	mov	r0, r6
 800d02a:	f000 f829 	bl	800d080 <_malloc_r>
 800d02e:	b948      	cbnz	r0, 800d044 <__smakebuf_r+0x44>
 800d030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d034:	059a      	lsls	r2, r3, #22
 800d036:	d4ef      	bmi.n	800d018 <__smakebuf_r+0x18>
 800d038:	f023 0303 	bic.w	r3, r3, #3
 800d03c:	f043 0302 	orr.w	r3, r3, #2
 800d040:	81a3      	strh	r3, [r4, #12]
 800d042:	e7e3      	b.n	800d00c <__smakebuf_r+0xc>
 800d044:	4b0d      	ldr	r3, [pc, #52]	; (800d07c <__smakebuf_r+0x7c>)
 800d046:	63f3      	str	r3, [r6, #60]	; 0x3c
 800d048:	89a3      	ldrh	r3, [r4, #12]
 800d04a:	6020      	str	r0, [r4, #0]
 800d04c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d050:	81a3      	strh	r3, [r4, #12]
 800d052:	9b00      	ldr	r3, [sp, #0]
 800d054:	6163      	str	r3, [r4, #20]
 800d056:	9b01      	ldr	r3, [sp, #4]
 800d058:	6120      	str	r0, [r4, #16]
 800d05a:	b15b      	cbz	r3, 800d074 <__smakebuf_r+0x74>
 800d05c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d060:	4630      	mov	r0, r6
 800d062:	f001 fe95 	bl	800ed90 <_isatty_r>
 800d066:	b128      	cbz	r0, 800d074 <__smakebuf_r+0x74>
 800d068:	89a3      	ldrh	r3, [r4, #12]
 800d06a:	f023 0303 	bic.w	r3, r3, #3
 800d06e:	f043 0301 	orr.w	r3, r3, #1
 800d072:	81a3      	strh	r3, [r4, #12]
 800d074:	89a0      	ldrh	r0, [r4, #12]
 800d076:	4305      	orrs	r5, r0
 800d078:	81a5      	strh	r5, [r4, #12]
 800d07a:	e7cd      	b.n	800d018 <__smakebuf_r+0x18>
 800d07c:	0800c9e9 	.word	0x0800c9e9

0800d080 <_malloc_r>:
 800d080:	f101 030b 	add.w	r3, r1, #11
 800d084:	2b16      	cmp	r3, #22
 800d086:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d08a:	4605      	mov	r5, r0
 800d08c:	d906      	bls.n	800d09c <_malloc_r+0x1c>
 800d08e:	f033 0707 	bics.w	r7, r3, #7
 800d092:	d504      	bpl.n	800d09e <_malloc_r+0x1e>
 800d094:	230c      	movs	r3, #12
 800d096:	602b      	str	r3, [r5, #0]
 800d098:	2400      	movs	r4, #0
 800d09a:	e1ae      	b.n	800d3fa <_malloc_r+0x37a>
 800d09c:	2710      	movs	r7, #16
 800d09e:	42b9      	cmp	r1, r7
 800d0a0:	d8f8      	bhi.n	800d094 <_malloc_r+0x14>
 800d0a2:	4628      	mov	r0, r5
 800d0a4:	f000 fa56 	bl	800d554 <__malloc_lock>
 800d0a8:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 800d0ac:	4ec3      	ldr	r6, [pc, #780]	; (800d3bc <_malloc_r+0x33c>)
 800d0ae:	d238      	bcs.n	800d122 <_malloc_r+0xa2>
 800d0b0:	f107 0208 	add.w	r2, r7, #8
 800d0b4:	4432      	add	r2, r6
 800d0b6:	f1a2 0108 	sub.w	r1, r2, #8
 800d0ba:	6854      	ldr	r4, [r2, #4]
 800d0bc:	428c      	cmp	r4, r1
 800d0be:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800d0c2:	d102      	bne.n	800d0ca <_malloc_r+0x4a>
 800d0c4:	68d4      	ldr	r4, [r2, #12]
 800d0c6:	42a2      	cmp	r2, r4
 800d0c8:	d010      	beq.n	800d0ec <_malloc_r+0x6c>
 800d0ca:	6863      	ldr	r3, [r4, #4]
 800d0cc:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800d0d0:	f023 0303 	bic.w	r3, r3, #3
 800d0d4:	60ca      	str	r2, [r1, #12]
 800d0d6:	4423      	add	r3, r4
 800d0d8:	6091      	str	r1, [r2, #8]
 800d0da:	685a      	ldr	r2, [r3, #4]
 800d0dc:	f042 0201 	orr.w	r2, r2, #1
 800d0e0:	605a      	str	r2, [r3, #4]
 800d0e2:	4628      	mov	r0, r5
 800d0e4:	f000 fa3c 	bl	800d560 <__malloc_unlock>
 800d0e8:	3408      	adds	r4, #8
 800d0ea:	e186      	b.n	800d3fa <_malloc_r+0x37a>
 800d0ec:	3302      	adds	r3, #2
 800d0ee:	4ab4      	ldr	r2, [pc, #720]	; (800d3c0 <_malloc_r+0x340>)
 800d0f0:	6934      	ldr	r4, [r6, #16]
 800d0f2:	4294      	cmp	r4, r2
 800d0f4:	4611      	mov	r1, r2
 800d0f6:	d077      	beq.n	800d1e8 <_malloc_r+0x168>
 800d0f8:	6860      	ldr	r0, [r4, #4]
 800d0fa:	f020 0c03 	bic.w	ip, r0, #3
 800d0fe:	ebac 0007 	sub.w	r0, ip, r7
 800d102:	280f      	cmp	r0, #15
 800d104:	dd48      	ble.n	800d198 <_malloc_r+0x118>
 800d106:	19e1      	adds	r1, r4, r7
 800d108:	f040 0301 	orr.w	r3, r0, #1
 800d10c:	f047 0701 	orr.w	r7, r7, #1
 800d110:	6067      	str	r7, [r4, #4]
 800d112:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800d116:	e9c1 2202 	strd	r2, r2, [r1, #8]
 800d11a:	604b      	str	r3, [r1, #4]
 800d11c:	f844 000c 	str.w	r0, [r4, ip]
 800d120:	e7df      	b.n	800d0e2 <_malloc_r+0x62>
 800d122:	0a7b      	lsrs	r3, r7, #9
 800d124:	d02a      	beq.n	800d17c <_malloc_r+0xfc>
 800d126:	2b04      	cmp	r3, #4
 800d128:	d812      	bhi.n	800d150 <_malloc_r+0xd0>
 800d12a:	09bb      	lsrs	r3, r7, #6
 800d12c:	3338      	adds	r3, #56	; 0x38
 800d12e:	1c5a      	adds	r2, r3, #1
 800d130:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800d134:	f1a2 0c08 	sub.w	ip, r2, #8
 800d138:	6854      	ldr	r4, [r2, #4]
 800d13a:	4564      	cmp	r4, ip
 800d13c:	d006      	beq.n	800d14c <_malloc_r+0xcc>
 800d13e:	6862      	ldr	r2, [r4, #4]
 800d140:	f022 0203 	bic.w	r2, r2, #3
 800d144:	1bd0      	subs	r0, r2, r7
 800d146:	280f      	cmp	r0, #15
 800d148:	dd1c      	ble.n	800d184 <_malloc_r+0x104>
 800d14a:	3b01      	subs	r3, #1
 800d14c:	3301      	adds	r3, #1
 800d14e:	e7ce      	b.n	800d0ee <_malloc_r+0x6e>
 800d150:	2b14      	cmp	r3, #20
 800d152:	d801      	bhi.n	800d158 <_malloc_r+0xd8>
 800d154:	335b      	adds	r3, #91	; 0x5b
 800d156:	e7ea      	b.n	800d12e <_malloc_r+0xae>
 800d158:	2b54      	cmp	r3, #84	; 0x54
 800d15a:	d802      	bhi.n	800d162 <_malloc_r+0xe2>
 800d15c:	0b3b      	lsrs	r3, r7, #12
 800d15e:	336e      	adds	r3, #110	; 0x6e
 800d160:	e7e5      	b.n	800d12e <_malloc_r+0xae>
 800d162:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800d166:	d802      	bhi.n	800d16e <_malloc_r+0xee>
 800d168:	0bfb      	lsrs	r3, r7, #15
 800d16a:	3377      	adds	r3, #119	; 0x77
 800d16c:	e7df      	b.n	800d12e <_malloc_r+0xae>
 800d16e:	f240 5254 	movw	r2, #1364	; 0x554
 800d172:	4293      	cmp	r3, r2
 800d174:	d804      	bhi.n	800d180 <_malloc_r+0x100>
 800d176:	0cbb      	lsrs	r3, r7, #18
 800d178:	337c      	adds	r3, #124	; 0x7c
 800d17a:	e7d8      	b.n	800d12e <_malloc_r+0xae>
 800d17c:	233f      	movs	r3, #63	; 0x3f
 800d17e:	e7d6      	b.n	800d12e <_malloc_r+0xae>
 800d180:	237e      	movs	r3, #126	; 0x7e
 800d182:	e7d4      	b.n	800d12e <_malloc_r+0xae>
 800d184:	2800      	cmp	r0, #0
 800d186:	68e1      	ldr	r1, [r4, #12]
 800d188:	db04      	blt.n	800d194 <_malloc_r+0x114>
 800d18a:	68a3      	ldr	r3, [r4, #8]
 800d18c:	60d9      	str	r1, [r3, #12]
 800d18e:	608b      	str	r3, [r1, #8]
 800d190:	18a3      	adds	r3, r4, r2
 800d192:	e7a2      	b.n	800d0da <_malloc_r+0x5a>
 800d194:	460c      	mov	r4, r1
 800d196:	e7d0      	b.n	800d13a <_malloc_r+0xba>
 800d198:	2800      	cmp	r0, #0
 800d19a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800d19e:	db07      	blt.n	800d1b0 <_malloc_r+0x130>
 800d1a0:	44a4      	add	ip, r4
 800d1a2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800d1a6:	f043 0301 	orr.w	r3, r3, #1
 800d1aa:	f8cc 3004 	str.w	r3, [ip, #4]
 800d1ae:	e798      	b.n	800d0e2 <_malloc_r+0x62>
 800d1b0:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800d1b4:	6870      	ldr	r0, [r6, #4]
 800d1b6:	f080 809e 	bcs.w	800d2f6 <_malloc_r+0x276>
 800d1ba:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800d1be:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800d1c2:	f04f 0c01 	mov.w	ip, #1
 800d1c6:	3201      	adds	r2, #1
 800d1c8:	fa0c fc0e 	lsl.w	ip, ip, lr
 800d1cc:	ea4c 0000 	orr.w	r0, ip, r0
 800d1d0:	6070      	str	r0, [r6, #4]
 800d1d2:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800d1d6:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800d1da:	3808      	subs	r0, #8
 800d1dc:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800d1e0:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800d1e4:	f8cc 400c 	str.w	r4, [ip, #12]
 800d1e8:	2001      	movs	r0, #1
 800d1ea:	109a      	asrs	r2, r3, #2
 800d1ec:	fa00 f202 	lsl.w	r2, r0, r2
 800d1f0:	6870      	ldr	r0, [r6, #4]
 800d1f2:	4290      	cmp	r0, r2
 800d1f4:	d326      	bcc.n	800d244 <_malloc_r+0x1c4>
 800d1f6:	4210      	tst	r0, r2
 800d1f8:	d106      	bne.n	800d208 <_malloc_r+0x188>
 800d1fa:	f023 0303 	bic.w	r3, r3, #3
 800d1fe:	0052      	lsls	r2, r2, #1
 800d200:	4210      	tst	r0, r2
 800d202:	f103 0304 	add.w	r3, r3, #4
 800d206:	d0fa      	beq.n	800d1fe <_malloc_r+0x17e>
 800d208:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800d20c:	46c1      	mov	r9, r8
 800d20e:	469e      	mov	lr, r3
 800d210:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800d214:	454c      	cmp	r4, r9
 800d216:	f040 80b3 	bne.w	800d380 <_malloc_r+0x300>
 800d21a:	f10e 0e01 	add.w	lr, lr, #1
 800d21e:	f01e 0f03 	tst.w	lr, #3
 800d222:	f109 0908 	add.w	r9, r9, #8
 800d226:	d1f3      	bne.n	800d210 <_malloc_r+0x190>
 800d228:	0798      	lsls	r0, r3, #30
 800d22a:	f040 80ec 	bne.w	800d406 <_malloc_r+0x386>
 800d22e:	6873      	ldr	r3, [r6, #4]
 800d230:	ea23 0302 	bic.w	r3, r3, r2
 800d234:	6073      	str	r3, [r6, #4]
 800d236:	6870      	ldr	r0, [r6, #4]
 800d238:	0052      	lsls	r2, r2, #1
 800d23a:	4290      	cmp	r0, r2
 800d23c:	d302      	bcc.n	800d244 <_malloc_r+0x1c4>
 800d23e:	2a00      	cmp	r2, #0
 800d240:	f040 80ee 	bne.w	800d420 <_malloc_r+0x3a0>
 800d244:	f8d6 b008 	ldr.w	fp, [r6, #8]
 800d248:	f8db 1004 	ldr.w	r1, [fp, #4]
 800d24c:	f021 0903 	bic.w	r9, r1, #3
 800d250:	45b9      	cmp	r9, r7
 800d252:	d304      	bcc.n	800d25e <_malloc_r+0x1de>
 800d254:	eba9 0207 	sub.w	r2, r9, r7
 800d258:	2a0f      	cmp	r2, #15
 800d25a:	f300 8149 	bgt.w	800d4f0 <_malloc_r+0x470>
 800d25e:	4a59      	ldr	r2, [pc, #356]	; (800d3c4 <_malloc_r+0x344>)
 800d260:	6811      	ldr	r1, [r2, #0]
 800d262:	3110      	adds	r1, #16
 800d264:	eb0b 0309 	add.w	r3, fp, r9
 800d268:	4439      	add	r1, r7
 800d26a:	2008      	movs	r0, #8
 800d26c:	9301      	str	r3, [sp, #4]
 800d26e:	9100      	str	r1, [sp, #0]
 800d270:	f000 fef0 	bl	800e054 <sysconf>
 800d274:	4a54      	ldr	r2, [pc, #336]	; (800d3c8 <_malloc_r+0x348>)
 800d276:	e9dd 1300 	ldrd	r1, r3, [sp]
 800d27a:	4680      	mov	r8, r0
 800d27c:	6810      	ldr	r0, [r2, #0]
 800d27e:	3001      	adds	r0, #1
 800d280:	bf1f      	itttt	ne
 800d282:	f101 31ff 	addne.w	r1, r1, #4294967295
 800d286:	4441      	addne	r1, r8
 800d288:	f1c8 0000 	rsbne	r0, r8, #0
 800d28c:	4001      	andne	r1, r0
 800d28e:	4628      	mov	r0, r5
 800d290:	e9cd 1300 	strd	r1, r3, [sp]
 800d294:	f000 fe78 	bl	800df88 <_sbrk_r>
 800d298:	1c42      	adds	r2, r0, #1
 800d29a:	4604      	mov	r4, r0
 800d29c:	f000 80fc 	beq.w	800d498 <_malloc_r+0x418>
 800d2a0:	9b01      	ldr	r3, [sp, #4]
 800d2a2:	9900      	ldr	r1, [sp, #0]
 800d2a4:	4a48      	ldr	r2, [pc, #288]	; (800d3c8 <_malloc_r+0x348>)
 800d2a6:	4283      	cmp	r3, r0
 800d2a8:	d902      	bls.n	800d2b0 <_malloc_r+0x230>
 800d2aa:	45b3      	cmp	fp, r6
 800d2ac:	f040 80f4 	bne.w	800d498 <_malloc_r+0x418>
 800d2b0:	f8df a120 	ldr.w	sl, [pc, #288]	; 800d3d4 <_malloc_r+0x354>
 800d2b4:	f8da 0000 	ldr.w	r0, [sl]
 800d2b8:	42a3      	cmp	r3, r4
 800d2ba:	eb00 0e01 	add.w	lr, r0, r1
 800d2be:	f8ca e000 	str.w	lr, [sl]
 800d2c2:	f108 3cff 	add.w	ip, r8, #4294967295
 800d2c6:	f040 80ad 	bne.w	800d424 <_malloc_r+0x3a4>
 800d2ca:	ea13 0f0c 	tst.w	r3, ip
 800d2ce:	f040 80a9 	bne.w	800d424 <_malloc_r+0x3a4>
 800d2d2:	68b3      	ldr	r3, [r6, #8]
 800d2d4:	4449      	add	r1, r9
 800d2d6:	f041 0101 	orr.w	r1, r1, #1
 800d2da:	6059      	str	r1, [r3, #4]
 800d2dc:	4a3b      	ldr	r2, [pc, #236]	; (800d3cc <_malloc_r+0x34c>)
 800d2de:	f8da 3000 	ldr.w	r3, [sl]
 800d2e2:	6811      	ldr	r1, [r2, #0]
 800d2e4:	428b      	cmp	r3, r1
 800d2e6:	bf88      	it	hi
 800d2e8:	6013      	strhi	r3, [r2, #0]
 800d2ea:	4a39      	ldr	r2, [pc, #228]	; (800d3d0 <_malloc_r+0x350>)
 800d2ec:	6811      	ldr	r1, [r2, #0]
 800d2ee:	428b      	cmp	r3, r1
 800d2f0:	bf88      	it	hi
 800d2f2:	6013      	strhi	r3, [r2, #0]
 800d2f4:	e0d0      	b.n	800d498 <_malloc_r+0x418>
 800d2f6:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800d2fa:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800d2fe:	d218      	bcs.n	800d332 <_malloc_r+0x2b2>
 800d300:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800d304:	3238      	adds	r2, #56	; 0x38
 800d306:	f102 0e01 	add.w	lr, r2, #1
 800d30a:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800d30e:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800d312:	45f0      	cmp	r8, lr
 800d314:	d12b      	bne.n	800d36e <_malloc_r+0x2ee>
 800d316:	1092      	asrs	r2, r2, #2
 800d318:	f04f 0c01 	mov.w	ip, #1
 800d31c:	fa0c f202 	lsl.w	r2, ip, r2
 800d320:	4310      	orrs	r0, r2
 800d322:	6070      	str	r0, [r6, #4]
 800d324:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800d328:	f8c8 4008 	str.w	r4, [r8, #8]
 800d32c:	f8ce 400c 	str.w	r4, [lr, #12]
 800d330:	e75a      	b.n	800d1e8 <_malloc_r+0x168>
 800d332:	2a14      	cmp	r2, #20
 800d334:	d801      	bhi.n	800d33a <_malloc_r+0x2ba>
 800d336:	325b      	adds	r2, #91	; 0x5b
 800d338:	e7e5      	b.n	800d306 <_malloc_r+0x286>
 800d33a:	2a54      	cmp	r2, #84	; 0x54
 800d33c:	d803      	bhi.n	800d346 <_malloc_r+0x2c6>
 800d33e:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800d342:	326e      	adds	r2, #110	; 0x6e
 800d344:	e7df      	b.n	800d306 <_malloc_r+0x286>
 800d346:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800d34a:	d803      	bhi.n	800d354 <_malloc_r+0x2d4>
 800d34c:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800d350:	3277      	adds	r2, #119	; 0x77
 800d352:	e7d8      	b.n	800d306 <_malloc_r+0x286>
 800d354:	f240 5e54 	movw	lr, #1364	; 0x554
 800d358:	4572      	cmp	r2, lr
 800d35a:	bf9a      	itte	ls
 800d35c:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800d360:	327c      	addls	r2, #124	; 0x7c
 800d362:	227e      	movhi	r2, #126	; 0x7e
 800d364:	e7cf      	b.n	800d306 <_malloc_r+0x286>
 800d366:	f8de e008 	ldr.w	lr, [lr, #8]
 800d36a:	45f0      	cmp	r8, lr
 800d36c:	d005      	beq.n	800d37a <_malloc_r+0x2fa>
 800d36e:	f8de 2004 	ldr.w	r2, [lr, #4]
 800d372:	f022 0203 	bic.w	r2, r2, #3
 800d376:	4562      	cmp	r2, ip
 800d378:	d8f5      	bhi.n	800d366 <_malloc_r+0x2e6>
 800d37a:	f8de 800c 	ldr.w	r8, [lr, #12]
 800d37e:	e7d1      	b.n	800d324 <_malloc_r+0x2a4>
 800d380:	6860      	ldr	r0, [r4, #4]
 800d382:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800d386:	f020 0003 	bic.w	r0, r0, #3
 800d38a:	eba0 0a07 	sub.w	sl, r0, r7
 800d38e:	f1ba 0f0f 	cmp.w	sl, #15
 800d392:	dd21      	ble.n	800d3d8 <_malloc_r+0x358>
 800d394:	68a3      	ldr	r3, [r4, #8]
 800d396:	19e2      	adds	r2, r4, r7
 800d398:	f047 0701 	orr.w	r7, r7, #1
 800d39c:	6067      	str	r7, [r4, #4]
 800d39e:	f8c3 c00c 	str.w	ip, [r3, #12]
 800d3a2:	f8cc 3008 	str.w	r3, [ip, #8]
 800d3a6:	f04a 0301 	orr.w	r3, sl, #1
 800d3aa:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800d3ae:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800d3b2:	6053      	str	r3, [r2, #4]
 800d3b4:	f844 a000 	str.w	sl, [r4, r0]
 800d3b8:	e693      	b.n	800d0e2 <_malloc_r+0x62>
 800d3ba:	bf00      	nop
 800d3bc:	2000047c 	.word	0x2000047c
 800d3c0:	20000484 	.word	0x20000484
 800d3c4:	20000a58 	.word	0x20000a58
 800d3c8:	20000884 	.word	0x20000884
 800d3cc:	20000a50 	.word	0x20000a50
 800d3d0:	20000a54 	.word	0x20000a54
 800d3d4:	20000a28 	.word	0x20000a28
 800d3d8:	f1ba 0f00 	cmp.w	sl, #0
 800d3dc:	db11      	blt.n	800d402 <_malloc_r+0x382>
 800d3de:	4420      	add	r0, r4
 800d3e0:	6843      	ldr	r3, [r0, #4]
 800d3e2:	f043 0301 	orr.w	r3, r3, #1
 800d3e6:	6043      	str	r3, [r0, #4]
 800d3e8:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800d3ec:	4628      	mov	r0, r5
 800d3ee:	f8c3 c00c 	str.w	ip, [r3, #12]
 800d3f2:	f8cc 3008 	str.w	r3, [ip, #8]
 800d3f6:	f000 f8b3 	bl	800d560 <__malloc_unlock>
 800d3fa:	4620      	mov	r0, r4
 800d3fc:	b003      	add	sp, #12
 800d3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d402:	4664      	mov	r4, ip
 800d404:	e706      	b.n	800d214 <_malloc_r+0x194>
 800d406:	f858 0908 	ldr.w	r0, [r8], #-8
 800d40a:	4540      	cmp	r0, r8
 800d40c:	f103 33ff 	add.w	r3, r3, #4294967295
 800d410:	f43f af0a 	beq.w	800d228 <_malloc_r+0x1a8>
 800d414:	e70f      	b.n	800d236 <_malloc_r+0x1b6>
 800d416:	3304      	adds	r3, #4
 800d418:	0052      	lsls	r2, r2, #1
 800d41a:	4210      	tst	r0, r2
 800d41c:	d0fb      	beq.n	800d416 <_malloc_r+0x396>
 800d41e:	e6f3      	b.n	800d208 <_malloc_r+0x188>
 800d420:	4673      	mov	r3, lr
 800d422:	e7fa      	b.n	800d41a <_malloc_r+0x39a>
 800d424:	6810      	ldr	r0, [r2, #0]
 800d426:	3001      	adds	r0, #1
 800d428:	bf1b      	ittet	ne
 800d42a:	1ae3      	subne	r3, r4, r3
 800d42c:	4473      	addne	r3, lr
 800d42e:	6014      	streq	r4, [r2, #0]
 800d430:	f8ca 3000 	strne.w	r3, [sl]
 800d434:	f014 0307 	ands.w	r3, r4, #7
 800d438:	bf1a      	itte	ne
 800d43a:	f1c3 0008 	rsbne	r0, r3, #8
 800d43e:	1824      	addne	r4, r4, r0
 800d440:	4618      	moveq	r0, r3
 800d442:	1862      	adds	r2, r4, r1
 800d444:	ea02 010c 	and.w	r1, r2, ip
 800d448:	4480      	add	r8, r0
 800d44a:	eba8 0801 	sub.w	r8, r8, r1
 800d44e:	ea08 080c 	and.w	r8, r8, ip
 800d452:	4641      	mov	r1, r8
 800d454:	4628      	mov	r0, r5
 800d456:	9301      	str	r3, [sp, #4]
 800d458:	9200      	str	r2, [sp, #0]
 800d45a:	f000 fd95 	bl	800df88 <_sbrk_r>
 800d45e:	1c43      	adds	r3, r0, #1
 800d460:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d464:	d105      	bne.n	800d472 <_malloc_r+0x3f2>
 800d466:	b32b      	cbz	r3, 800d4b4 <_malloc_r+0x434>
 800d468:	f1a3 0008 	sub.w	r0, r3, #8
 800d46c:	4410      	add	r0, r2
 800d46e:	f04f 0800 	mov.w	r8, #0
 800d472:	f8da 2000 	ldr.w	r2, [sl]
 800d476:	60b4      	str	r4, [r6, #8]
 800d478:	1b00      	subs	r0, r0, r4
 800d47a:	4440      	add	r0, r8
 800d47c:	4442      	add	r2, r8
 800d47e:	f040 0001 	orr.w	r0, r0, #1
 800d482:	45b3      	cmp	fp, r6
 800d484:	f8ca 2000 	str.w	r2, [sl]
 800d488:	6060      	str	r0, [r4, #4]
 800d48a:	f43f af27 	beq.w	800d2dc <_malloc_r+0x25c>
 800d48e:	f1b9 0f0f 	cmp.w	r9, #15
 800d492:	d812      	bhi.n	800d4ba <_malloc_r+0x43a>
 800d494:	2301      	movs	r3, #1
 800d496:	6063      	str	r3, [r4, #4]
 800d498:	68b3      	ldr	r3, [r6, #8]
 800d49a:	685b      	ldr	r3, [r3, #4]
 800d49c:	f023 0303 	bic.w	r3, r3, #3
 800d4a0:	42bb      	cmp	r3, r7
 800d4a2:	eba3 0207 	sub.w	r2, r3, r7
 800d4a6:	d301      	bcc.n	800d4ac <_malloc_r+0x42c>
 800d4a8:	2a0f      	cmp	r2, #15
 800d4aa:	dc21      	bgt.n	800d4f0 <_malloc_r+0x470>
 800d4ac:	4628      	mov	r0, r5
 800d4ae:	f000 f857 	bl	800d560 <__malloc_unlock>
 800d4b2:	e5f1      	b.n	800d098 <_malloc_r+0x18>
 800d4b4:	4610      	mov	r0, r2
 800d4b6:	4698      	mov	r8, r3
 800d4b8:	e7db      	b.n	800d472 <_malloc_r+0x3f2>
 800d4ba:	f8db 3004 	ldr.w	r3, [fp, #4]
 800d4be:	f1a9 090c 	sub.w	r9, r9, #12
 800d4c2:	f029 0907 	bic.w	r9, r9, #7
 800d4c6:	f003 0301 	and.w	r3, r3, #1
 800d4ca:	ea43 0309 	orr.w	r3, r3, r9
 800d4ce:	f8cb 3004 	str.w	r3, [fp, #4]
 800d4d2:	2205      	movs	r2, #5
 800d4d4:	eb0b 0309 	add.w	r3, fp, r9
 800d4d8:	f1b9 0f0f 	cmp.w	r9, #15
 800d4dc:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800d4e0:	f67f aefc 	bls.w	800d2dc <_malloc_r+0x25c>
 800d4e4:	f10b 0108 	add.w	r1, fp, #8
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	f7ff fb2b 	bl	800cb44 <_free_r>
 800d4ee:	e6f5      	b.n	800d2dc <_malloc_r+0x25c>
 800d4f0:	68b4      	ldr	r4, [r6, #8]
 800d4f2:	f047 0301 	orr.w	r3, r7, #1
 800d4f6:	4427      	add	r7, r4
 800d4f8:	f042 0201 	orr.w	r2, r2, #1
 800d4fc:	6063      	str	r3, [r4, #4]
 800d4fe:	60b7      	str	r7, [r6, #8]
 800d500:	607a      	str	r2, [r7, #4]
 800d502:	e5ee      	b.n	800d0e2 <_malloc_r+0x62>

0800d504 <memcpy>:
 800d504:	440a      	add	r2, r1
 800d506:	4291      	cmp	r1, r2
 800d508:	f100 33ff 	add.w	r3, r0, #4294967295
 800d50c:	d100      	bne.n	800d510 <memcpy+0xc>
 800d50e:	4770      	bx	lr
 800d510:	b510      	push	{r4, lr}
 800d512:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d516:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d51a:	4291      	cmp	r1, r2
 800d51c:	d1f9      	bne.n	800d512 <memcpy+0xe>
 800d51e:	bd10      	pop	{r4, pc}

0800d520 <memmove>:
 800d520:	4288      	cmp	r0, r1
 800d522:	b510      	push	{r4, lr}
 800d524:	eb01 0402 	add.w	r4, r1, r2
 800d528:	d902      	bls.n	800d530 <memmove+0x10>
 800d52a:	4284      	cmp	r4, r0
 800d52c:	4623      	mov	r3, r4
 800d52e:	d807      	bhi.n	800d540 <memmove+0x20>
 800d530:	1e43      	subs	r3, r0, #1
 800d532:	42a1      	cmp	r1, r4
 800d534:	d008      	beq.n	800d548 <memmove+0x28>
 800d536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d53a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d53e:	e7f8      	b.n	800d532 <memmove+0x12>
 800d540:	4402      	add	r2, r0
 800d542:	4601      	mov	r1, r0
 800d544:	428a      	cmp	r2, r1
 800d546:	d100      	bne.n	800d54a <memmove+0x2a>
 800d548:	bd10      	pop	{r4, pc}
 800d54a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d54e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d552:	e7f7      	b.n	800d544 <memmove+0x24>

0800d554 <__malloc_lock>:
 800d554:	4801      	ldr	r0, [pc, #4]	; (800d55c <__malloc_lock+0x8>)
 800d556:	f7ff bd25 	b.w	800cfa4 <__retarget_lock_acquire_recursive>
 800d55a:	bf00      	nop
 800d55c:	20001bb4 	.word	0x20001bb4

0800d560 <__malloc_unlock>:
 800d560:	4801      	ldr	r0, [pc, #4]	; (800d568 <__malloc_unlock+0x8>)
 800d562:	f7ff bd20 	b.w	800cfa6 <__retarget_lock_release_recursive>
 800d566:	bf00      	nop
 800d568:	20001bb4 	.word	0x20001bb4

0800d56c <_Balloc>:
 800d56c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d56e:	b570      	push	{r4, r5, r6, lr}
 800d570:	4605      	mov	r5, r0
 800d572:	460c      	mov	r4, r1
 800d574:	b17b      	cbz	r3, 800d596 <_Balloc+0x2a>
 800d576:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800d578:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d57c:	b9a0      	cbnz	r0, 800d5a8 <_Balloc+0x3c>
 800d57e:	2101      	movs	r1, #1
 800d580:	fa01 f604 	lsl.w	r6, r1, r4
 800d584:	1d72      	adds	r2, r6, #5
 800d586:	0092      	lsls	r2, r2, #2
 800d588:	4628      	mov	r0, r5
 800d58a:	f001 fadb 	bl	800eb44 <_calloc_r>
 800d58e:	b148      	cbz	r0, 800d5a4 <_Balloc+0x38>
 800d590:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800d594:	e00b      	b.n	800d5ae <_Balloc+0x42>
 800d596:	2221      	movs	r2, #33	; 0x21
 800d598:	2104      	movs	r1, #4
 800d59a:	f001 fad3 	bl	800eb44 <_calloc_r>
 800d59e:	64e8      	str	r0, [r5, #76]	; 0x4c
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	d1e8      	bne.n	800d576 <_Balloc+0xa>
 800d5a4:	2000      	movs	r0, #0
 800d5a6:	bd70      	pop	{r4, r5, r6, pc}
 800d5a8:	6802      	ldr	r2, [r0, #0]
 800d5aa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d5b4:	e7f7      	b.n	800d5a6 <_Balloc+0x3a>

0800d5b6 <_Bfree>:
 800d5b6:	b131      	cbz	r1, 800d5c6 <_Bfree+0x10>
 800d5b8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d5ba:	684a      	ldr	r2, [r1, #4]
 800d5bc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d5c0:	6008      	str	r0, [r1, #0]
 800d5c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d5c6:	4770      	bx	lr

0800d5c8 <__multadd>:
 800d5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5cc:	690e      	ldr	r6, [r1, #16]
 800d5ce:	4607      	mov	r7, r0
 800d5d0:	4698      	mov	r8, r3
 800d5d2:	460c      	mov	r4, r1
 800d5d4:	f101 0014 	add.w	r0, r1, #20
 800d5d8:	2300      	movs	r3, #0
 800d5da:	6805      	ldr	r5, [r0, #0]
 800d5dc:	b2a9      	uxth	r1, r5
 800d5de:	fb02 8101 	mla	r1, r2, r1, r8
 800d5e2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d5e6:	0c2d      	lsrs	r5, r5, #16
 800d5e8:	fb02 c505 	mla	r5, r2, r5, ip
 800d5ec:	b289      	uxth	r1, r1
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d5f4:	429e      	cmp	r6, r3
 800d5f6:	f840 1b04 	str.w	r1, [r0], #4
 800d5fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d5fe:	dcec      	bgt.n	800d5da <__multadd+0x12>
 800d600:	f1b8 0f00 	cmp.w	r8, #0
 800d604:	d022      	beq.n	800d64c <__multadd+0x84>
 800d606:	68a3      	ldr	r3, [r4, #8]
 800d608:	42b3      	cmp	r3, r6
 800d60a:	dc19      	bgt.n	800d640 <__multadd+0x78>
 800d60c:	6861      	ldr	r1, [r4, #4]
 800d60e:	4638      	mov	r0, r7
 800d610:	3101      	adds	r1, #1
 800d612:	f7ff ffab 	bl	800d56c <_Balloc>
 800d616:	4605      	mov	r5, r0
 800d618:	b928      	cbnz	r0, 800d626 <__multadd+0x5e>
 800d61a:	4602      	mov	r2, r0
 800d61c:	4b0d      	ldr	r3, [pc, #52]	; (800d654 <__multadd+0x8c>)
 800d61e:	480e      	ldr	r0, [pc, #56]	; (800d658 <__multadd+0x90>)
 800d620:	21b5      	movs	r1, #181	; 0xb5
 800d622:	f001 fa71 	bl	800eb08 <__assert_func>
 800d626:	6922      	ldr	r2, [r4, #16]
 800d628:	3202      	adds	r2, #2
 800d62a:	f104 010c 	add.w	r1, r4, #12
 800d62e:	0092      	lsls	r2, r2, #2
 800d630:	300c      	adds	r0, #12
 800d632:	f7ff ff67 	bl	800d504 <memcpy>
 800d636:	4621      	mov	r1, r4
 800d638:	4638      	mov	r0, r7
 800d63a:	f7ff ffbc 	bl	800d5b6 <_Bfree>
 800d63e:	462c      	mov	r4, r5
 800d640:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d644:	3601      	adds	r6, #1
 800d646:	f8c3 8014 	str.w	r8, [r3, #20]
 800d64a:	6126      	str	r6, [r4, #16]
 800d64c:	4620      	mov	r0, r4
 800d64e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d652:	bf00      	nop
 800d654:	08010f19 	.word	0x08010f19
 800d658:	08010f89 	.word	0x08010f89

0800d65c <__hi0bits>:
 800d65c:	0c03      	lsrs	r3, r0, #16
 800d65e:	041b      	lsls	r3, r3, #16
 800d660:	b9d3      	cbnz	r3, 800d698 <__hi0bits+0x3c>
 800d662:	0400      	lsls	r0, r0, #16
 800d664:	2310      	movs	r3, #16
 800d666:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d66a:	bf04      	itt	eq
 800d66c:	0200      	lsleq	r0, r0, #8
 800d66e:	3308      	addeq	r3, #8
 800d670:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d674:	bf04      	itt	eq
 800d676:	0100      	lsleq	r0, r0, #4
 800d678:	3304      	addeq	r3, #4
 800d67a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d67e:	bf04      	itt	eq
 800d680:	0080      	lsleq	r0, r0, #2
 800d682:	3302      	addeq	r3, #2
 800d684:	2800      	cmp	r0, #0
 800d686:	db05      	blt.n	800d694 <__hi0bits+0x38>
 800d688:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d68c:	f103 0301 	add.w	r3, r3, #1
 800d690:	bf08      	it	eq
 800d692:	2320      	moveq	r3, #32
 800d694:	4618      	mov	r0, r3
 800d696:	4770      	bx	lr
 800d698:	2300      	movs	r3, #0
 800d69a:	e7e4      	b.n	800d666 <__hi0bits+0xa>

0800d69c <__lo0bits>:
 800d69c:	6803      	ldr	r3, [r0, #0]
 800d69e:	f013 0207 	ands.w	r2, r3, #7
 800d6a2:	4601      	mov	r1, r0
 800d6a4:	d00b      	beq.n	800d6be <__lo0bits+0x22>
 800d6a6:	07da      	lsls	r2, r3, #31
 800d6a8:	d424      	bmi.n	800d6f4 <__lo0bits+0x58>
 800d6aa:	0798      	lsls	r0, r3, #30
 800d6ac:	bf49      	itett	mi
 800d6ae:	085b      	lsrmi	r3, r3, #1
 800d6b0:	089b      	lsrpl	r3, r3, #2
 800d6b2:	2001      	movmi	r0, #1
 800d6b4:	600b      	strmi	r3, [r1, #0]
 800d6b6:	bf5c      	itt	pl
 800d6b8:	600b      	strpl	r3, [r1, #0]
 800d6ba:	2002      	movpl	r0, #2
 800d6bc:	4770      	bx	lr
 800d6be:	b298      	uxth	r0, r3
 800d6c0:	b9b0      	cbnz	r0, 800d6f0 <__lo0bits+0x54>
 800d6c2:	0c1b      	lsrs	r3, r3, #16
 800d6c4:	2010      	movs	r0, #16
 800d6c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d6ca:	bf04      	itt	eq
 800d6cc:	0a1b      	lsreq	r3, r3, #8
 800d6ce:	3008      	addeq	r0, #8
 800d6d0:	071a      	lsls	r2, r3, #28
 800d6d2:	bf04      	itt	eq
 800d6d4:	091b      	lsreq	r3, r3, #4
 800d6d6:	3004      	addeq	r0, #4
 800d6d8:	079a      	lsls	r2, r3, #30
 800d6da:	bf04      	itt	eq
 800d6dc:	089b      	lsreq	r3, r3, #2
 800d6de:	3002      	addeq	r0, #2
 800d6e0:	07da      	lsls	r2, r3, #31
 800d6e2:	d403      	bmi.n	800d6ec <__lo0bits+0x50>
 800d6e4:	085b      	lsrs	r3, r3, #1
 800d6e6:	f100 0001 	add.w	r0, r0, #1
 800d6ea:	d005      	beq.n	800d6f8 <__lo0bits+0x5c>
 800d6ec:	600b      	str	r3, [r1, #0]
 800d6ee:	4770      	bx	lr
 800d6f0:	4610      	mov	r0, r2
 800d6f2:	e7e8      	b.n	800d6c6 <__lo0bits+0x2a>
 800d6f4:	2000      	movs	r0, #0
 800d6f6:	4770      	bx	lr
 800d6f8:	2020      	movs	r0, #32
 800d6fa:	4770      	bx	lr

0800d6fc <__i2b>:
 800d6fc:	b510      	push	{r4, lr}
 800d6fe:	460c      	mov	r4, r1
 800d700:	2101      	movs	r1, #1
 800d702:	f7ff ff33 	bl	800d56c <_Balloc>
 800d706:	4602      	mov	r2, r0
 800d708:	b928      	cbnz	r0, 800d716 <__i2b+0x1a>
 800d70a:	4b05      	ldr	r3, [pc, #20]	; (800d720 <__i2b+0x24>)
 800d70c:	4805      	ldr	r0, [pc, #20]	; (800d724 <__i2b+0x28>)
 800d70e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d712:	f001 f9f9 	bl	800eb08 <__assert_func>
 800d716:	2301      	movs	r3, #1
 800d718:	6144      	str	r4, [r0, #20]
 800d71a:	6103      	str	r3, [r0, #16]
 800d71c:	bd10      	pop	{r4, pc}
 800d71e:	bf00      	nop
 800d720:	08010f19 	.word	0x08010f19
 800d724:	08010f89 	.word	0x08010f89

0800d728 <__multiply>:
 800d728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d72c:	4614      	mov	r4, r2
 800d72e:	690a      	ldr	r2, [r1, #16]
 800d730:	6923      	ldr	r3, [r4, #16]
 800d732:	429a      	cmp	r2, r3
 800d734:	bfb8      	it	lt
 800d736:	460b      	movlt	r3, r1
 800d738:	460d      	mov	r5, r1
 800d73a:	bfbc      	itt	lt
 800d73c:	4625      	movlt	r5, r4
 800d73e:	461c      	movlt	r4, r3
 800d740:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d744:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d748:	68ab      	ldr	r3, [r5, #8]
 800d74a:	6869      	ldr	r1, [r5, #4]
 800d74c:	eb0a 0709 	add.w	r7, sl, r9
 800d750:	42bb      	cmp	r3, r7
 800d752:	b085      	sub	sp, #20
 800d754:	bfb8      	it	lt
 800d756:	3101      	addlt	r1, #1
 800d758:	f7ff ff08 	bl	800d56c <_Balloc>
 800d75c:	b930      	cbnz	r0, 800d76c <__multiply+0x44>
 800d75e:	4602      	mov	r2, r0
 800d760:	4b42      	ldr	r3, [pc, #264]	; (800d86c <__multiply+0x144>)
 800d762:	4843      	ldr	r0, [pc, #268]	; (800d870 <__multiply+0x148>)
 800d764:	f240 115d 	movw	r1, #349	; 0x15d
 800d768:	f001 f9ce 	bl	800eb08 <__assert_func>
 800d76c:	f100 0614 	add.w	r6, r0, #20
 800d770:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d774:	4633      	mov	r3, r6
 800d776:	2200      	movs	r2, #0
 800d778:	4543      	cmp	r3, r8
 800d77a:	d31e      	bcc.n	800d7ba <__multiply+0x92>
 800d77c:	f105 0c14 	add.w	ip, r5, #20
 800d780:	f104 0314 	add.w	r3, r4, #20
 800d784:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d788:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d78c:	9202      	str	r2, [sp, #8]
 800d78e:	ebac 0205 	sub.w	r2, ip, r5
 800d792:	3a15      	subs	r2, #21
 800d794:	f022 0203 	bic.w	r2, r2, #3
 800d798:	3204      	adds	r2, #4
 800d79a:	f105 0115 	add.w	r1, r5, #21
 800d79e:	458c      	cmp	ip, r1
 800d7a0:	bf38      	it	cc
 800d7a2:	2204      	movcc	r2, #4
 800d7a4:	9201      	str	r2, [sp, #4]
 800d7a6:	9a02      	ldr	r2, [sp, #8]
 800d7a8:	9303      	str	r3, [sp, #12]
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	d808      	bhi.n	800d7c0 <__multiply+0x98>
 800d7ae:	2f00      	cmp	r7, #0
 800d7b0:	dc55      	bgt.n	800d85e <__multiply+0x136>
 800d7b2:	6107      	str	r7, [r0, #16]
 800d7b4:	b005      	add	sp, #20
 800d7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ba:	f843 2b04 	str.w	r2, [r3], #4
 800d7be:	e7db      	b.n	800d778 <__multiply+0x50>
 800d7c0:	f8b3 a000 	ldrh.w	sl, [r3]
 800d7c4:	f1ba 0f00 	cmp.w	sl, #0
 800d7c8:	d020      	beq.n	800d80c <__multiply+0xe4>
 800d7ca:	f105 0e14 	add.w	lr, r5, #20
 800d7ce:	46b1      	mov	r9, r6
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d7d6:	f8d9 b000 	ldr.w	fp, [r9]
 800d7da:	b2a1      	uxth	r1, r4
 800d7dc:	fa1f fb8b 	uxth.w	fp, fp
 800d7e0:	fb0a b101 	mla	r1, sl, r1, fp
 800d7e4:	4411      	add	r1, r2
 800d7e6:	f8d9 2000 	ldr.w	r2, [r9]
 800d7ea:	0c24      	lsrs	r4, r4, #16
 800d7ec:	0c12      	lsrs	r2, r2, #16
 800d7ee:	fb0a 2404 	mla	r4, sl, r4, r2
 800d7f2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d7f6:	b289      	uxth	r1, r1
 800d7f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d7fc:	45f4      	cmp	ip, lr
 800d7fe:	f849 1b04 	str.w	r1, [r9], #4
 800d802:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d806:	d8e4      	bhi.n	800d7d2 <__multiply+0xaa>
 800d808:	9901      	ldr	r1, [sp, #4]
 800d80a:	5072      	str	r2, [r6, r1]
 800d80c:	9a03      	ldr	r2, [sp, #12]
 800d80e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d812:	3304      	adds	r3, #4
 800d814:	f1b9 0f00 	cmp.w	r9, #0
 800d818:	d01f      	beq.n	800d85a <__multiply+0x132>
 800d81a:	6834      	ldr	r4, [r6, #0]
 800d81c:	f105 0114 	add.w	r1, r5, #20
 800d820:	46b6      	mov	lr, r6
 800d822:	f04f 0a00 	mov.w	sl, #0
 800d826:	880a      	ldrh	r2, [r1, #0]
 800d828:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d82c:	fb09 b202 	mla	r2, r9, r2, fp
 800d830:	4492      	add	sl, r2
 800d832:	b2a4      	uxth	r4, r4
 800d834:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d838:	f84e 4b04 	str.w	r4, [lr], #4
 800d83c:	f851 4b04 	ldr.w	r4, [r1], #4
 800d840:	f8be 2000 	ldrh.w	r2, [lr]
 800d844:	0c24      	lsrs	r4, r4, #16
 800d846:	fb09 2404 	mla	r4, r9, r4, r2
 800d84a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d84e:	458c      	cmp	ip, r1
 800d850:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d854:	d8e7      	bhi.n	800d826 <__multiply+0xfe>
 800d856:	9a01      	ldr	r2, [sp, #4]
 800d858:	50b4      	str	r4, [r6, r2]
 800d85a:	3604      	adds	r6, #4
 800d85c:	e7a3      	b.n	800d7a6 <__multiply+0x7e>
 800d85e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d862:	2b00      	cmp	r3, #0
 800d864:	d1a5      	bne.n	800d7b2 <__multiply+0x8a>
 800d866:	3f01      	subs	r7, #1
 800d868:	e7a1      	b.n	800d7ae <__multiply+0x86>
 800d86a:	bf00      	nop
 800d86c:	08010f19 	.word	0x08010f19
 800d870:	08010f89 	.word	0x08010f89

0800d874 <__pow5mult>:
 800d874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d878:	4615      	mov	r5, r2
 800d87a:	f012 0203 	ands.w	r2, r2, #3
 800d87e:	4606      	mov	r6, r0
 800d880:	460f      	mov	r7, r1
 800d882:	d007      	beq.n	800d894 <__pow5mult+0x20>
 800d884:	4c1a      	ldr	r4, [pc, #104]	; (800d8f0 <__pow5mult+0x7c>)
 800d886:	3a01      	subs	r2, #1
 800d888:	2300      	movs	r3, #0
 800d88a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d88e:	f7ff fe9b 	bl	800d5c8 <__multadd>
 800d892:	4607      	mov	r7, r0
 800d894:	10ad      	asrs	r5, r5, #2
 800d896:	d027      	beq.n	800d8e8 <__pow5mult+0x74>
 800d898:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800d89a:	b944      	cbnz	r4, 800d8ae <__pow5mult+0x3a>
 800d89c:	f240 2171 	movw	r1, #625	; 0x271
 800d8a0:	4630      	mov	r0, r6
 800d8a2:	f7ff ff2b 	bl	800d6fc <__i2b>
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	64b0      	str	r0, [r6, #72]	; 0x48
 800d8aa:	4604      	mov	r4, r0
 800d8ac:	6003      	str	r3, [r0, #0]
 800d8ae:	f04f 0900 	mov.w	r9, #0
 800d8b2:	07eb      	lsls	r3, r5, #31
 800d8b4:	d50a      	bpl.n	800d8cc <__pow5mult+0x58>
 800d8b6:	4639      	mov	r1, r7
 800d8b8:	4622      	mov	r2, r4
 800d8ba:	4630      	mov	r0, r6
 800d8bc:	f7ff ff34 	bl	800d728 <__multiply>
 800d8c0:	4639      	mov	r1, r7
 800d8c2:	4680      	mov	r8, r0
 800d8c4:	4630      	mov	r0, r6
 800d8c6:	f7ff fe76 	bl	800d5b6 <_Bfree>
 800d8ca:	4647      	mov	r7, r8
 800d8cc:	106d      	asrs	r5, r5, #1
 800d8ce:	d00b      	beq.n	800d8e8 <__pow5mult+0x74>
 800d8d0:	6820      	ldr	r0, [r4, #0]
 800d8d2:	b938      	cbnz	r0, 800d8e4 <__pow5mult+0x70>
 800d8d4:	4622      	mov	r2, r4
 800d8d6:	4621      	mov	r1, r4
 800d8d8:	4630      	mov	r0, r6
 800d8da:	f7ff ff25 	bl	800d728 <__multiply>
 800d8de:	6020      	str	r0, [r4, #0]
 800d8e0:	f8c0 9000 	str.w	r9, [r0]
 800d8e4:	4604      	mov	r4, r0
 800d8e6:	e7e4      	b.n	800d8b2 <__pow5mult+0x3e>
 800d8e8:	4638      	mov	r0, r7
 800d8ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8ee:	bf00      	nop
 800d8f0:	080110e0 	.word	0x080110e0

0800d8f4 <__lshift>:
 800d8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8f8:	460c      	mov	r4, r1
 800d8fa:	6849      	ldr	r1, [r1, #4]
 800d8fc:	6923      	ldr	r3, [r4, #16]
 800d8fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d902:	68a3      	ldr	r3, [r4, #8]
 800d904:	4607      	mov	r7, r0
 800d906:	4691      	mov	r9, r2
 800d908:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d90c:	f108 0601 	add.w	r6, r8, #1
 800d910:	42b3      	cmp	r3, r6
 800d912:	db0b      	blt.n	800d92c <__lshift+0x38>
 800d914:	4638      	mov	r0, r7
 800d916:	f7ff fe29 	bl	800d56c <_Balloc>
 800d91a:	4605      	mov	r5, r0
 800d91c:	b948      	cbnz	r0, 800d932 <__lshift+0x3e>
 800d91e:	4602      	mov	r2, r0
 800d920:	4b28      	ldr	r3, [pc, #160]	; (800d9c4 <__lshift+0xd0>)
 800d922:	4829      	ldr	r0, [pc, #164]	; (800d9c8 <__lshift+0xd4>)
 800d924:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d928:	f001 f8ee 	bl	800eb08 <__assert_func>
 800d92c:	3101      	adds	r1, #1
 800d92e:	005b      	lsls	r3, r3, #1
 800d930:	e7ee      	b.n	800d910 <__lshift+0x1c>
 800d932:	2300      	movs	r3, #0
 800d934:	f100 0114 	add.w	r1, r0, #20
 800d938:	f100 0210 	add.w	r2, r0, #16
 800d93c:	4618      	mov	r0, r3
 800d93e:	4553      	cmp	r3, sl
 800d940:	db33      	blt.n	800d9aa <__lshift+0xb6>
 800d942:	6920      	ldr	r0, [r4, #16]
 800d944:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d948:	f104 0314 	add.w	r3, r4, #20
 800d94c:	f019 091f 	ands.w	r9, r9, #31
 800d950:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d954:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d958:	d02b      	beq.n	800d9b2 <__lshift+0xbe>
 800d95a:	f1c9 0e20 	rsb	lr, r9, #32
 800d95e:	468a      	mov	sl, r1
 800d960:	2200      	movs	r2, #0
 800d962:	6818      	ldr	r0, [r3, #0]
 800d964:	fa00 f009 	lsl.w	r0, r0, r9
 800d968:	4302      	orrs	r2, r0
 800d96a:	f84a 2b04 	str.w	r2, [sl], #4
 800d96e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d972:	459c      	cmp	ip, r3
 800d974:	fa22 f20e 	lsr.w	r2, r2, lr
 800d978:	d8f3      	bhi.n	800d962 <__lshift+0x6e>
 800d97a:	ebac 0304 	sub.w	r3, ip, r4
 800d97e:	3b15      	subs	r3, #21
 800d980:	f023 0303 	bic.w	r3, r3, #3
 800d984:	3304      	adds	r3, #4
 800d986:	f104 0015 	add.w	r0, r4, #21
 800d98a:	4584      	cmp	ip, r0
 800d98c:	bf38      	it	cc
 800d98e:	2304      	movcc	r3, #4
 800d990:	50ca      	str	r2, [r1, r3]
 800d992:	b10a      	cbz	r2, 800d998 <__lshift+0xa4>
 800d994:	f108 0602 	add.w	r6, r8, #2
 800d998:	3e01      	subs	r6, #1
 800d99a:	4638      	mov	r0, r7
 800d99c:	612e      	str	r6, [r5, #16]
 800d99e:	4621      	mov	r1, r4
 800d9a0:	f7ff fe09 	bl	800d5b6 <_Bfree>
 800d9a4:	4628      	mov	r0, r5
 800d9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	e7c5      	b.n	800d93e <__lshift+0x4a>
 800d9b2:	3904      	subs	r1, #4
 800d9b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d9bc:	459c      	cmp	ip, r3
 800d9be:	d8f9      	bhi.n	800d9b4 <__lshift+0xc0>
 800d9c0:	e7ea      	b.n	800d998 <__lshift+0xa4>
 800d9c2:	bf00      	nop
 800d9c4:	08010f19 	.word	0x08010f19
 800d9c8:	08010f89 	.word	0x08010f89

0800d9cc <__mcmp>:
 800d9cc:	b530      	push	{r4, r5, lr}
 800d9ce:	6902      	ldr	r2, [r0, #16]
 800d9d0:	690c      	ldr	r4, [r1, #16]
 800d9d2:	1b12      	subs	r2, r2, r4
 800d9d4:	d10e      	bne.n	800d9f4 <__mcmp+0x28>
 800d9d6:	f100 0314 	add.w	r3, r0, #20
 800d9da:	3114      	adds	r1, #20
 800d9dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d9e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d9e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d9e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d9ec:	42a5      	cmp	r5, r4
 800d9ee:	d003      	beq.n	800d9f8 <__mcmp+0x2c>
 800d9f0:	d305      	bcc.n	800d9fe <__mcmp+0x32>
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	4610      	mov	r0, r2
 800d9f6:	bd30      	pop	{r4, r5, pc}
 800d9f8:	4283      	cmp	r3, r0
 800d9fa:	d3f3      	bcc.n	800d9e4 <__mcmp+0x18>
 800d9fc:	e7fa      	b.n	800d9f4 <__mcmp+0x28>
 800d9fe:	f04f 32ff 	mov.w	r2, #4294967295
 800da02:	e7f7      	b.n	800d9f4 <__mcmp+0x28>

0800da04 <__mdiff>:
 800da04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da08:	460c      	mov	r4, r1
 800da0a:	4606      	mov	r6, r0
 800da0c:	4611      	mov	r1, r2
 800da0e:	4620      	mov	r0, r4
 800da10:	4617      	mov	r7, r2
 800da12:	f7ff ffdb 	bl	800d9cc <__mcmp>
 800da16:	1e05      	subs	r5, r0, #0
 800da18:	d110      	bne.n	800da3c <__mdiff+0x38>
 800da1a:	4629      	mov	r1, r5
 800da1c:	4630      	mov	r0, r6
 800da1e:	f7ff fda5 	bl	800d56c <_Balloc>
 800da22:	b930      	cbnz	r0, 800da32 <__mdiff+0x2e>
 800da24:	4b39      	ldr	r3, [pc, #228]	; (800db0c <__mdiff+0x108>)
 800da26:	4602      	mov	r2, r0
 800da28:	f240 2132 	movw	r1, #562	; 0x232
 800da2c:	4838      	ldr	r0, [pc, #224]	; (800db10 <__mdiff+0x10c>)
 800da2e:	f001 f86b 	bl	800eb08 <__assert_func>
 800da32:	2301      	movs	r3, #1
 800da34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800da38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da3c:	bfa4      	itt	ge
 800da3e:	463b      	movge	r3, r7
 800da40:	4627      	movge	r7, r4
 800da42:	4630      	mov	r0, r6
 800da44:	6879      	ldr	r1, [r7, #4]
 800da46:	bfa6      	itte	ge
 800da48:	461c      	movge	r4, r3
 800da4a:	2500      	movge	r5, #0
 800da4c:	2501      	movlt	r5, #1
 800da4e:	f7ff fd8d 	bl	800d56c <_Balloc>
 800da52:	b920      	cbnz	r0, 800da5e <__mdiff+0x5a>
 800da54:	4b2d      	ldr	r3, [pc, #180]	; (800db0c <__mdiff+0x108>)
 800da56:	4602      	mov	r2, r0
 800da58:	f44f 7110 	mov.w	r1, #576	; 0x240
 800da5c:	e7e6      	b.n	800da2c <__mdiff+0x28>
 800da5e:	693e      	ldr	r6, [r7, #16]
 800da60:	60c5      	str	r5, [r0, #12]
 800da62:	6925      	ldr	r5, [r4, #16]
 800da64:	f107 0114 	add.w	r1, r7, #20
 800da68:	f104 0914 	add.w	r9, r4, #20
 800da6c:	f100 0e14 	add.w	lr, r0, #20
 800da70:	f107 0210 	add.w	r2, r7, #16
 800da74:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800da78:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800da7c:	46f2      	mov	sl, lr
 800da7e:	2700      	movs	r7, #0
 800da80:	f859 3b04 	ldr.w	r3, [r9], #4
 800da84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800da88:	fa1f f883 	uxth.w	r8, r3
 800da8c:	fa17 f78b 	uxtah	r7, r7, fp
 800da90:	0c1b      	lsrs	r3, r3, #16
 800da92:	eba7 0808 	sub.w	r8, r7, r8
 800da96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800da9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800da9e:	fa1f f888 	uxth.w	r8, r8
 800daa2:	141f      	asrs	r7, r3, #16
 800daa4:	454d      	cmp	r5, r9
 800daa6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800daaa:	f84a 3b04 	str.w	r3, [sl], #4
 800daae:	d8e7      	bhi.n	800da80 <__mdiff+0x7c>
 800dab0:	1b2b      	subs	r3, r5, r4
 800dab2:	3b15      	subs	r3, #21
 800dab4:	f023 0303 	bic.w	r3, r3, #3
 800dab8:	3304      	adds	r3, #4
 800daba:	3415      	adds	r4, #21
 800dabc:	42a5      	cmp	r5, r4
 800dabe:	bf38      	it	cc
 800dac0:	2304      	movcc	r3, #4
 800dac2:	4419      	add	r1, r3
 800dac4:	4473      	add	r3, lr
 800dac6:	469e      	mov	lr, r3
 800dac8:	460d      	mov	r5, r1
 800daca:	4565      	cmp	r5, ip
 800dacc:	d30e      	bcc.n	800daec <__mdiff+0xe8>
 800dace:	f10c 0203 	add.w	r2, ip, #3
 800dad2:	1a52      	subs	r2, r2, r1
 800dad4:	f022 0203 	bic.w	r2, r2, #3
 800dad8:	3903      	subs	r1, #3
 800dada:	458c      	cmp	ip, r1
 800dadc:	bf38      	it	cc
 800dade:	2200      	movcc	r2, #0
 800dae0:	441a      	add	r2, r3
 800dae2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dae6:	b17b      	cbz	r3, 800db08 <__mdiff+0x104>
 800dae8:	6106      	str	r6, [r0, #16]
 800daea:	e7a5      	b.n	800da38 <__mdiff+0x34>
 800daec:	f855 8b04 	ldr.w	r8, [r5], #4
 800daf0:	fa17 f488 	uxtah	r4, r7, r8
 800daf4:	1422      	asrs	r2, r4, #16
 800daf6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800dafa:	b2a4      	uxth	r4, r4
 800dafc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800db00:	f84e 4b04 	str.w	r4, [lr], #4
 800db04:	1417      	asrs	r7, r2, #16
 800db06:	e7e0      	b.n	800daca <__mdiff+0xc6>
 800db08:	3e01      	subs	r6, #1
 800db0a:	e7ea      	b.n	800dae2 <__mdiff+0xde>
 800db0c:	08010f19 	.word	0x08010f19
 800db10:	08010f89 	.word	0x08010f89

0800db14 <__d2b>:
 800db14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800db18:	4689      	mov	r9, r1
 800db1a:	2101      	movs	r1, #1
 800db1c:	ec57 6b10 	vmov	r6, r7, d0
 800db20:	4690      	mov	r8, r2
 800db22:	f7ff fd23 	bl	800d56c <_Balloc>
 800db26:	4604      	mov	r4, r0
 800db28:	b930      	cbnz	r0, 800db38 <__d2b+0x24>
 800db2a:	4602      	mov	r2, r0
 800db2c:	4b25      	ldr	r3, [pc, #148]	; (800dbc4 <__d2b+0xb0>)
 800db2e:	4826      	ldr	r0, [pc, #152]	; (800dbc8 <__d2b+0xb4>)
 800db30:	f240 310a 	movw	r1, #778	; 0x30a
 800db34:	f000 ffe8 	bl	800eb08 <__assert_func>
 800db38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800db3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800db40:	bb35      	cbnz	r5, 800db90 <__d2b+0x7c>
 800db42:	2e00      	cmp	r6, #0
 800db44:	9301      	str	r3, [sp, #4]
 800db46:	d028      	beq.n	800db9a <__d2b+0x86>
 800db48:	4668      	mov	r0, sp
 800db4a:	9600      	str	r6, [sp, #0]
 800db4c:	f7ff fda6 	bl	800d69c <__lo0bits>
 800db50:	9900      	ldr	r1, [sp, #0]
 800db52:	b300      	cbz	r0, 800db96 <__d2b+0x82>
 800db54:	9a01      	ldr	r2, [sp, #4]
 800db56:	f1c0 0320 	rsb	r3, r0, #32
 800db5a:	fa02 f303 	lsl.w	r3, r2, r3
 800db5e:	430b      	orrs	r3, r1
 800db60:	40c2      	lsrs	r2, r0
 800db62:	6163      	str	r3, [r4, #20]
 800db64:	9201      	str	r2, [sp, #4]
 800db66:	9b01      	ldr	r3, [sp, #4]
 800db68:	61a3      	str	r3, [r4, #24]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	bf14      	ite	ne
 800db6e:	2202      	movne	r2, #2
 800db70:	2201      	moveq	r2, #1
 800db72:	6122      	str	r2, [r4, #16]
 800db74:	b1d5      	cbz	r5, 800dbac <__d2b+0x98>
 800db76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800db7a:	4405      	add	r5, r0
 800db7c:	f8c9 5000 	str.w	r5, [r9]
 800db80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800db84:	f8c8 0000 	str.w	r0, [r8]
 800db88:	4620      	mov	r0, r4
 800db8a:	b003      	add	sp, #12
 800db8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db94:	e7d5      	b.n	800db42 <__d2b+0x2e>
 800db96:	6161      	str	r1, [r4, #20]
 800db98:	e7e5      	b.n	800db66 <__d2b+0x52>
 800db9a:	a801      	add	r0, sp, #4
 800db9c:	f7ff fd7e 	bl	800d69c <__lo0bits>
 800dba0:	9b01      	ldr	r3, [sp, #4]
 800dba2:	6163      	str	r3, [r4, #20]
 800dba4:	2201      	movs	r2, #1
 800dba6:	6122      	str	r2, [r4, #16]
 800dba8:	3020      	adds	r0, #32
 800dbaa:	e7e3      	b.n	800db74 <__d2b+0x60>
 800dbac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dbb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dbb4:	f8c9 0000 	str.w	r0, [r9]
 800dbb8:	6918      	ldr	r0, [r3, #16]
 800dbba:	f7ff fd4f 	bl	800d65c <__hi0bits>
 800dbbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dbc2:	e7df      	b.n	800db84 <__d2b+0x70>
 800dbc4:	08010f19 	.word	0x08010f19
 800dbc8:	08010f89 	.word	0x08010f89

0800dbcc <_realloc_r>:
 800dbcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd0:	4681      	mov	r9, r0
 800dbd2:	460c      	mov	r4, r1
 800dbd4:	b929      	cbnz	r1, 800dbe2 <_realloc_r+0x16>
 800dbd6:	4611      	mov	r1, r2
 800dbd8:	b003      	add	sp, #12
 800dbda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbde:	f7ff ba4f 	b.w	800d080 <_malloc_r>
 800dbe2:	9201      	str	r2, [sp, #4]
 800dbe4:	f7ff fcb6 	bl	800d554 <__malloc_lock>
 800dbe8:	9a01      	ldr	r2, [sp, #4]
 800dbea:	f102 080b 	add.w	r8, r2, #11
 800dbee:	f1b8 0f16 	cmp.w	r8, #22
 800dbf2:	d90b      	bls.n	800dc0c <_realloc_r+0x40>
 800dbf4:	f038 0807 	bics.w	r8, r8, #7
 800dbf8:	d50a      	bpl.n	800dc10 <_realloc_r+0x44>
 800dbfa:	230c      	movs	r3, #12
 800dbfc:	f8c9 3000 	str.w	r3, [r9]
 800dc00:	f04f 0b00 	mov.w	fp, #0
 800dc04:	4658      	mov	r0, fp
 800dc06:	b003      	add	sp, #12
 800dc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc0c:	f04f 0810 	mov.w	r8, #16
 800dc10:	4590      	cmp	r8, r2
 800dc12:	d3f2      	bcc.n	800dbfa <_realloc_r+0x2e>
 800dc14:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800dc18:	f025 0603 	bic.w	r6, r5, #3
 800dc1c:	45b0      	cmp	r8, r6
 800dc1e:	f1a4 0a08 	sub.w	sl, r4, #8
 800dc22:	f340 8170 	ble.w	800df06 <_realloc_r+0x33a>
 800dc26:	48a9      	ldr	r0, [pc, #676]	; (800decc <_realloc_r+0x300>)
 800dc28:	9001      	str	r0, [sp, #4]
 800dc2a:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800dc2e:	eb0a 0306 	add.w	r3, sl, r6
 800dc32:	459c      	cmp	ip, r3
 800dc34:	6859      	ldr	r1, [r3, #4]
 800dc36:	d005      	beq.n	800dc44 <_realloc_r+0x78>
 800dc38:	f021 0001 	bic.w	r0, r1, #1
 800dc3c:	4418      	add	r0, r3
 800dc3e:	6840      	ldr	r0, [r0, #4]
 800dc40:	07c7      	lsls	r7, r0, #31
 800dc42:	d427      	bmi.n	800dc94 <_realloc_r+0xc8>
 800dc44:	f021 0103 	bic.w	r1, r1, #3
 800dc48:	459c      	cmp	ip, r3
 800dc4a:	eb06 0701 	add.w	r7, r6, r1
 800dc4e:	d119      	bne.n	800dc84 <_realloc_r+0xb8>
 800dc50:	f108 0010 	add.w	r0, r8, #16
 800dc54:	42b8      	cmp	r0, r7
 800dc56:	dc1f      	bgt.n	800dc98 <_realloc_r+0xcc>
 800dc58:	eb0a 0308 	add.w	r3, sl, r8
 800dc5c:	9a01      	ldr	r2, [sp, #4]
 800dc5e:	eba7 0708 	sub.w	r7, r7, r8
 800dc62:	f047 0701 	orr.w	r7, r7, #1
 800dc66:	6093      	str	r3, [r2, #8]
 800dc68:	605f      	str	r7, [r3, #4]
 800dc6a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800dc6e:	f003 0301 	and.w	r3, r3, #1
 800dc72:	ea43 0308 	orr.w	r3, r3, r8
 800dc76:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc7a:	4648      	mov	r0, r9
 800dc7c:	f7ff fc70 	bl	800d560 <__malloc_unlock>
 800dc80:	46a3      	mov	fp, r4
 800dc82:	e7bf      	b.n	800dc04 <_realloc_r+0x38>
 800dc84:	45b8      	cmp	r8, r7
 800dc86:	dc07      	bgt.n	800dc98 <_realloc_r+0xcc>
 800dc88:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800dc8c:	60da      	str	r2, [r3, #12]
 800dc8e:	6093      	str	r3, [r2, #8]
 800dc90:	4655      	mov	r5, sl
 800dc92:	e07f      	b.n	800dd94 <_realloc_r+0x1c8>
 800dc94:	2100      	movs	r1, #0
 800dc96:	460b      	mov	r3, r1
 800dc98:	07e8      	lsls	r0, r5, #31
 800dc9a:	f100 80e5 	bmi.w	800de68 <_realloc_r+0x29c>
 800dc9e:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800dca2:	ebaa 0505 	sub.w	r5, sl, r5
 800dca6:	6868      	ldr	r0, [r5, #4]
 800dca8:	f020 0003 	bic.w	r0, r0, #3
 800dcac:	eb00 0b06 	add.w	fp, r0, r6
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	f000 80a5 	beq.w	800de00 <_realloc_r+0x234>
 800dcb6:	459c      	cmp	ip, r3
 800dcb8:	eb01 070b 	add.w	r7, r1, fp
 800dcbc:	d14a      	bne.n	800dd54 <_realloc_r+0x188>
 800dcbe:	f108 0310 	add.w	r3, r8, #16
 800dcc2:	42bb      	cmp	r3, r7
 800dcc4:	f300 809c 	bgt.w	800de00 <_realloc_r+0x234>
 800dcc8:	46ab      	mov	fp, r5
 800dcca:	68eb      	ldr	r3, [r5, #12]
 800dccc:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800dcd0:	60d3      	str	r3, [r2, #12]
 800dcd2:	609a      	str	r2, [r3, #8]
 800dcd4:	1f32      	subs	r2, r6, #4
 800dcd6:	2a24      	cmp	r2, #36	; 0x24
 800dcd8:	d837      	bhi.n	800dd4a <_realloc_r+0x17e>
 800dcda:	2a13      	cmp	r2, #19
 800dcdc:	d933      	bls.n	800dd46 <_realloc_r+0x17a>
 800dcde:	6823      	ldr	r3, [r4, #0]
 800dce0:	60ab      	str	r3, [r5, #8]
 800dce2:	6863      	ldr	r3, [r4, #4]
 800dce4:	60eb      	str	r3, [r5, #12]
 800dce6:	2a1b      	cmp	r2, #27
 800dce8:	d81b      	bhi.n	800dd22 <_realloc_r+0x156>
 800dcea:	3408      	adds	r4, #8
 800dcec:	f105 0310 	add.w	r3, r5, #16
 800dcf0:	6822      	ldr	r2, [r4, #0]
 800dcf2:	601a      	str	r2, [r3, #0]
 800dcf4:	6862      	ldr	r2, [r4, #4]
 800dcf6:	605a      	str	r2, [r3, #4]
 800dcf8:	68a2      	ldr	r2, [r4, #8]
 800dcfa:	609a      	str	r2, [r3, #8]
 800dcfc:	eb05 0308 	add.w	r3, r5, r8
 800dd00:	9a01      	ldr	r2, [sp, #4]
 800dd02:	eba7 0708 	sub.w	r7, r7, r8
 800dd06:	f047 0701 	orr.w	r7, r7, #1
 800dd0a:	6093      	str	r3, [r2, #8]
 800dd0c:	605f      	str	r7, [r3, #4]
 800dd0e:	686b      	ldr	r3, [r5, #4]
 800dd10:	f003 0301 	and.w	r3, r3, #1
 800dd14:	ea43 0308 	orr.w	r3, r3, r8
 800dd18:	606b      	str	r3, [r5, #4]
 800dd1a:	4648      	mov	r0, r9
 800dd1c:	f7ff fc20 	bl	800d560 <__malloc_unlock>
 800dd20:	e770      	b.n	800dc04 <_realloc_r+0x38>
 800dd22:	68a3      	ldr	r3, [r4, #8]
 800dd24:	612b      	str	r3, [r5, #16]
 800dd26:	68e3      	ldr	r3, [r4, #12]
 800dd28:	616b      	str	r3, [r5, #20]
 800dd2a:	2a24      	cmp	r2, #36	; 0x24
 800dd2c:	bf01      	itttt	eq
 800dd2e:	6923      	ldreq	r3, [r4, #16]
 800dd30:	61ab      	streq	r3, [r5, #24]
 800dd32:	6962      	ldreq	r2, [r4, #20]
 800dd34:	61ea      	streq	r2, [r5, #28]
 800dd36:	bf19      	ittee	ne
 800dd38:	3410      	addne	r4, #16
 800dd3a:	f105 0318 	addne.w	r3, r5, #24
 800dd3e:	f105 0320 	addeq.w	r3, r5, #32
 800dd42:	3418      	addeq	r4, #24
 800dd44:	e7d4      	b.n	800dcf0 <_realloc_r+0x124>
 800dd46:	465b      	mov	r3, fp
 800dd48:	e7d2      	b.n	800dcf0 <_realloc_r+0x124>
 800dd4a:	4621      	mov	r1, r4
 800dd4c:	4658      	mov	r0, fp
 800dd4e:	f7ff fbe7 	bl	800d520 <memmove>
 800dd52:	e7d3      	b.n	800dcfc <_realloc_r+0x130>
 800dd54:	45b8      	cmp	r8, r7
 800dd56:	dc53      	bgt.n	800de00 <_realloc_r+0x234>
 800dd58:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800dd5c:	4628      	mov	r0, r5
 800dd5e:	60da      	str	r2, [r3, #12]
 800dd60:	6093      	str	r3, [r2, #8]
 800dd62:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800dd66:	68eb      	ldr	r3, [r5, #12]
 800dd68:	60d3      	str	r3, [r2, #12]
 800dd6a:	609a      	str	r2, [r3, #8]
 800dd6c:	1f32      	subs	r2, r6, #4
 800dd6e:	2a24      	cmp	r2, #36	; 0x24
 800dd70:	d842      	bhi.n	800ddf8 <_realloc_r+0x22c>
 800dd72:	2a13      	cmp	r2, #19
 800dd74:	d908      	bls.n	800dd88 <_realloc_r+0x1bc>
 800dd76:	6823      	ldr	r3, [r4, #0]
 800dd78:	60ab      	str	r3, [r5, #8]
 800dd7a:	6863      	ldr	r3, [r4, #4]
 800dd7c:	60eb      	str	r3, [r5, #12]
 800dd7e:	2a1b      	cmp	r2, #27
 800dd80:	d828      	bhi.n	800ddd4 <_realloc_r+0x208>
 800dd82:	3408      	adds	r4, #8
 800dd84:	f105 0010 	add.w	r0, r5, #16
 800dd88:	6823      	ldr	r3, [r4, #0]
 800dd8a:	6003      	str	r3, [r0, #0]
 800dd8c:	6863      	ldr	r3, [r4, #4]
 800dd8e:	6043      	str	r3, [r0, #4]
 800dd90:	68a3      	ldr	r3, [r4, #8]
 800dd92:	6083      	str	r3, [r0, #8]
 800dd94:	686a      	ldr	r2, [r5, #4]
 800dd96:	eba7 0008 	sub.w	r0, r7, r8
 800dd9a:	280f      	cmp	r0, #15
 800dd9c:	f002 0201 	and.w	r2, r2, #1
 800dda0:	eb05 0307 	add.w	r3, r5, r7
 800dda4:	f240 80b1 	bls.w	800df0a <_realloc_r+0x33e>
 800dda8:	eb05 0108 	add.w	r1, r5, r8
 800ddac:	ea48 0202 	orr.w	r2, r8, r2
 800ddb0:	f040 0001 	orr.w	r0, r0, #1
 800ddb4:	606a      	str	r2, [r5, #4]
 800ddb6:	6048      	str	r0, [r1, #4]
 800ddb8:	685a      	ldr	r2, [r3, #4]
 800ddba:	f042 0201 	orr.w	r2, r2, #1
 800ddbe:	605a      	str	r2, [r3, #4]
 800ddc0:	3108      	adds	r1, #8
 800ddc2:	4648      	mov	r0, r9
 800ddc4:	f7fe febe 	bl	800cb44 <_free_r>
 800ddc8:	4648      	mov	r0, r9
 800ddca:	f7ff fbc9 	bl	800d560 <__malloc_unlock>
 800ddce:	f105 0b08 	add.w	fp, r5, #8
 800ddd2:	e717      	b.n	800dc04 <_realloc_r+0x38>
 800ddd4:	68a3      	ldr	r3, [r4, #8]
 800ddd6:	612b      	str	r3, [r5, #16]
 800ddd8:	68e3      	ldr	r3, [r4, #12]
 800ddda:	616b      	str	r3, [r5, #20]
 800dddc:	2a24      	cmp	r2, #36	; 0x24
 800ddde:	bf01      	itttt	eq
 800dde0:	6923      	ldreq	r3, [r4, #16]
 800dde2:	61ab      	streq	r3, [r5, #24]
 800dde4:	6963      	ldreq	r3, [r4, #20]
 800dde6:	61eb      	streq	r3, [r5, #28]
 800dde8:	bf19      	ittee	ne
 800ddea:	3410      	addne	r4, #16
 800ddec:	f105 0018 	addne.w	r0, r5, #24
 800ddf0:	f105 0020 	addeq.w	r0, r5, #32
 800ddf4:	3418      	addeq	r4, #24
 800ddf6:	e7c7      	b.n	800dd88 <_realloc_r+0x1bc>
 800ddf8:	4621      	mov	r1, r4
 800ddfa:	f7ff fb91 	bl	800d520 <memmove>
 800ddfe:	e7c9      	b.n	800dd94 <_realloc_r+0x1c8>
 800de00:	45d8      	cmp	r8, fp
 800de02:	dc31      	bgt.n	800de68 <_realloc_r+0x29c>
 800de04:	4628      	mov	r0, r5
 800de06:	68eb      	ldr	r3, [r5, #12]
 800de08:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800de0c:	60d3      	str	r3, [r2, #12]
 800de0e:	609a      	str	r2, [r3, #8]
 800de10:	1f32      	subs	r2, r6, #4
 800de12:	2a24      	cmp	r2, #36	; 0x24
 800de14:	d824      	bhi.n	800de60 <_realloc_r+0x294>
 800de16:	2a13      	cmp	r2, #19
 800de18:	d908      	bls.n	800de2c <_realloc_r+0x260>
 800de1a:	6823      	ldr	r3, [r4, #0]
 800de1c:	60ab      	str	r3, [r5, #8]
 800de1e:	6863      	ldr	r3, [r4, #4]
 800de20:	60eb      	str	r3, [r5, #12]
 800de22:	2a1b      	cmp	r2, #27
 800de24:	d80a      	bhi.n	800de3c <_realloc_r+0x270>
 800de26:	3408      	adds	r4, #8
 800de28:	f105 0010 	add.w	r0, r5, #16
 800de2c:	6823      	ldr	r3, [r4, #0]
 800de2e:	6003      	str	r3, [r0, #0]
 800de30:	6863      	ldr	r3, [r4, #4]
 800de32:	6043      	str	r3, [r0, #4]
 800de34:	68a3      	ldr	r3, [r4, #8]
 800de36:	6083      	str	r3, [r0, #8]
 800de38:	465f      	mov	r7, fp
 800de3a:	e7ab      	b.n	800dd94 <_realloc_r+0x1c8>
 800de3c:	68a3      	ldr	r3, [r4, #8]
 800de3e:	612b      	str	r3, [r5, #16]
 800de40:	68e3      	ldr	r3, [r4, #12]
 800de42:	616b      	str	r3, [r5, #20]
 800de44:	2a24      	cmp	r2, #36	; 0x24
 800de46:	bf01      	itttt	eq
 800de48:	6923      	ldreq	r3, [r4, #16]
 800de4a:	61ab      	streq	r3, [r5, #24]
 800de4c:	6963      	ldreq	r3, [r4, #20]
 800de4e:	61eb      	streq	r3, [r5, #28]
 800de50:	bf19      	ittee	ne
 800de52:	3410      	addne	r4, #16
 800de54:	f105 0018 	addne.w	r0, r5, #24
 800de58:	f105 0020 	addeq.w	r0, r5, #32
 800de5c:	3418      	addeq	r4, #24
 800de5e:	e7e5      	b.n	800de2c <_realloc_r+0x260>
 800de60:	4621      	mov	r1, r4
 800de62:	f7ff fb5d 	bl	800d520 <memmove>
 800de66:	e7e7      	b.n	800de38 <_realloc_r+0x26c>
 800de68:	4611      	mov	r1, r2
 800de6a:	4648      	mov	r0, r9
 800de6c:	f7ff f908 	bl	800d080 <_malloc_r>
 800de70:	4683      	mov	fp, r0
 800de72:	2800      	cmp	r0, #0
 800de74:	f43f af51 	beq.w	800dd1a <_realloc_r+0x14e>
 800de78:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800de7c:	f023 0301 	bic.w	r3, r3, #1
 800de80:	4453      	add	r3, sl
 800de82:	f1a0 0208 	sub.w	r2, r0, #8
 800de86:	4293      	cmp	r3, r2
 800de88:	d105      	bne.n	800de96 <_realloc_r+0x2ca>
 800de8a:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800de8e:	f027 0703 	bic.w	r7, r7, #3
 800de92:	4437      	add	r7, r6
 800de94:	e6fc      	b.n	800dc90 <_realloc_r+0xc4>
 800de96:	1f32      	subs	r2, r6, #4
 800de98:	2a24      	cmp	r2, #36	; 0x24
 800de9a:	d830      	bhi.n	800defe <_realloc_r+0x332>
 800de9c:	2a13      	cmp	r2, #19
 800de9e:	d92b      	bls.n	800def8 <_realloc_r+0x32c>
 800dea0:	6823      	ldr	r3, [r4, #0]
 800dea2:	6003      	str	r3, [r0, #0]
 800dea4:	6863      	ldr	r3, [r4, #4]
 800dea6:	6043      	str	r3, [r0, #4]
 800dea8:	2a1b      	cmp	r2, #27
 800deaa:	d811      	bhi.n	800ded0 <_realloc_r+0x304>
 800deac:	f104 0208 	add.w	r2, r4, #8
 800deb0:	f100 0308 	add.w	r3, r0, #8
 800deb4:	6811      	ldr	r1, [r2, #0]
 800deb6:	6019      	str	r1, [r3, #0]
 800deb8:	6851      	ldr	r1, [r2, #4]
 800deba:	6059      	str	r1, [r3, #4]
 800debc:	6892      	ldr	r2, [r2, #8]
 800debe:	609a      	str	r2, [r3, #8]
 800dec0:	4621      	mov	r1, r4
 800dec2:	4648      	mov	r0, r9
 800dec4:	f7fe fe3e 	bl	800cb44 <_free_r>
 800dec8:	e727      	b.n	800dd1a <_realloc_r+0x14e>
 800deca:	bf00      	nop
 800decc:	2000047c 	.word	0x2000047c
 800ded0:	68a3      	ldr	r3, [r4, #8]
 800ded2:	6083      	str	r3, [r0, #8]
 800ded4:	68e3      	ldr	r3, [r4, #12]
 800ded6:	60c3      	str	r3, [r0, #12]
 800ded8:	2a24      	cmp	r2, #36	; 0x24
 800deda:	bf01      	itttt	eq
 800dedc:	6923      	ldreq	r3, [r4, #16]
 800dede:	6103      	streq	r3, [r0, #16]
 800dee0:	6961      	ldreq	r1, [r4, #20]
 800dee2:	6141      	streq	r1, [r0, #20]
 800dee4:	bf19      	ittee	ne
 800dee6:	f104 0210 	addne.w	r2, r4, #16
 800deea:	f100 0310 	addne.w	r3, r0, #16
 800deee:	f104 0218 	addeq.w	r2, r4, #24
 800def2:	f100 0318 	addeq.w	r3, r0, #24
 800def6:	e7dd      	b.n	800deb4 <_realloc_r+0x2e8>
 800def8:	4603      	mov	r3, r0
 800defa:	4622      	mov	r2, r4
 800defc:	e7da      	b.n	800deb4 <_realloc_r+0x2e8>
 800defe:	4621      	mov	r1, r4
 800df00:	f7ff fb0e 	bl	800d520 <memmove>
 800df04:	e7dc      	b.n	800dec0 <_realloc_r+0x2f4>
 800df06:	4637      	mov	r7, r6
 800df08:	e6c2      	b.n	800dc90 <_realloc_r+0xc4>
 800df0a:	4317      	orrs	r7, r2
 800df0c:	606f      	str	r7, [r5, #4]
 800df0e:	685a      	ldr	r2, [r3, #4]
 800df10:	f042 0201 	orr.w	r2, r2, #1
 800df14:	605a      	str	r2, [r3, #4]
 800df16:	e757      	b.n	800ddc8 <_realloc_r+0x1fc>

0800df18 <frexp>:
 800df18:	b570      	push	{r4, r5, r6, lr}
 800df1a:	2100      	movs	r1, #0
 800df1c:	ec55 4b10 	vmov	r4, r5, d0
 800df20:	6001      	str	r1, [r0, #0]
 800df22:	4916      	ldr	r1, [pc, #88]	; (800df7c <frexp+0x64>)
 800df24:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800df28:	428a      	cmp	r2, r1
 800df2a:	4606      	mov	r6, r0
 800df2c:	462b      	mov	r3, r5
 800df2e:	dc22      	bgt.n	800df76 <frexp+0x5e>
 800df30:	ee10 1a10 	vmov	r1, s0
 800df34:	4311      	orrs	r1, r2
 800df36:	d01e      	beq.n	800df76 <frexp+0x5e>
 800df38:	4911      	ldr	r1, [pc, #68]	; (800df80 <frexp+0x68>)
 800df3a:	4029      	ands	r1, r5
 800df3c:	b969      	cbnz	r1, 800df5a <frexp+0x42>
 800df3e:	4b11      	ldr	r3, [pc, #68]	; (800df84 <frexp+0x6c>)
 800df40:	2200      	movs	r2, #0
 800df42:	ee10 0a10 	vmov	r0, s0
 800df46:	4629      	mov	r1, r5
 800df48:	f7f2 fb7e 	bl	8000648 <__aeabi_dmul>
 800df4c:	460b      	mov	r3, r1
 800df4e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800df52:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800df56:	4604      	mov	r4, r0
 800df58:	6031      	str	r1, [r6, #0]
 800df5a:	6831      	ldr	r1, [r6, #0]
 800df5c:	1512      	asrs	r2, r2, #20
 800df5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800df62:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800df66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800df6a:	440a      	add	r2, r1
 800df6c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800df70:	6032      	str	r2, [r6, #0]
 800df72:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800df76:	ec45 4b10 	vmov	d0, r4, r5
 800df7a:	bd70      	pop	{r4, r5, r6, pc}
 800df7c:	7fefffff 	.word	0x7fefffff
 800df80:	7ff00000 	.word	0x7ff00000
 800df84:	43500000 	.word	0x43500000

0800df88 <_sbrk_r>:
 800df88:	b538      	push	{r3, r4, r5, lr}
 800df8a:	4d06      	ldr	r5, [pc, #24]	; (800dfa4 <_sbrk_r+0x1c>)
 800df8c:	2300      	movs	r3, #0
 800df8e:	4604      	mov	r4, r0
 800df90:	4608      	mov	r0, r1
 800df92:	602b      	str	r3, [r5, #0]
 800df94:	f7f5 ff70 	bl	8003e78 <_sbrk>
 800df98:	1c43      	adds	r3, r0, #1
 800df9a:	d102      	bne.n	800dfa2 <_sbrk_r+0x1a>
 800df9c:	682b      	ldr	r3, [r5, #0]
 800df9e:	b103      	cbz	r3, 800dfa2 <_sbrk_r+0x1a>
 800dfa0:	6023      	str	r3, [r4, #0]
 800dfa2:	bd38      	pop	{r3, r4, r5, pc}
 800dfa4:	20001bbc 	.word	0x20001bbc

0800dfa8 <__sread>:
 800dfa8:	b510      	push	{r4, lr}
 800dfaa:	460c      	mov	r4, r1
 800dfac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfb0:	f000 ff28 	bl	800ee04 <_read_r>
 800dfb4:	2800      	cmp	r0, #0
 800dfb6:	bfab      	itete	ge
 800dfb8:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800dfba:	89a3      	ldrhlt	r3, [r4, #12]
 800dfbc:	181b      	addge	r3, r3, r0
 800dfbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dfc2:	bfac      	ite	ge
 800dfc4:	6523      	strge	r3, [r4, #80]	; 0x50
 800dfc6:	81a3      	strhlt	r3, [r4, #12]
 800dfc8:	bd10      	pop	{r4, pc}

0800dfca <__swrite>:
 800dfca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfce:	461f      	mov	r7, r3
 800dfd0:	898b      	ldrh	r3, [r1, #12]
 800dfd2:	05db      	lsls	r3, r3, #23
 800dfd4:	4605      	mov	r5, r0
 800dfd6:	460c      	mov	r4, r1
 800dfd8:	4616      	mov	r6, r2
 800dfda:	d505      	bpl.n	800dfe8 <__swrite+0x1e>
 800dfdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfe0:	2302      	movs	r3, #2
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	f000 feea 	bl	800edbc <_lseek_r>
 800dfe8:	89a3      	ldrh	r3, [r4, #12]
 800dfea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dff2:	81a3      	strh	r3, [r4, #12]
 800dff4:	4632      	mov	r2, r6
 800dff6:	463b      	mov	r3, r7
 800dff8:	4628      	mov	r0, r5
 800dffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dffe:	f000 bd31 	b.w	800ea64 <_write_r>

0800e002 <__sseek>:
 800e002:	b510      	push	{r4, lr}
 800e004:	460c      	mov	r4, r1
 800e006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e00a:	f000 fed7 	bl	800edbc <_lseek_r>
 800e00e:	1c43      	adds	r3, r0, #1
 800e010:	89a3      	ldrh	r3, [r4, #12]
 800e012:	bf15      	itete	ne
 800e014:	6520      	strne	r0, [r4, #80]	; 0x50
 800e016:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e01a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e01e:	81a3      	strheq	r3, [r4, #12]
 800e020:	bf18      	it	ne
 800e022:	81a3      	strhne	r3, [r4, #12]
 800e024:	bd10      	pop	{r4, pc}

0800e026 <__sclose>:
 800e026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e02a:	f000 bdb9 	b.w	800eba0 <_close_r>

0800e02e <strncpy>:
 800e02e:	b510      	push	{r4, lr}
 800e030:	3901      	subs	r1, #1
 800e032:	4603      	mov	r3, r0
 800e034:	b132      	cbz	r2, 800e044 <strncpy+0x16>
 800e036:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e03a:	f803 4b01 	strb.w	r4, [r3], #1
 800e03e:	3a01      	subs	r2, #1
 800e040:	2c00      	cmp	r4, #0
 800e042:	d1f7      	bne.n	800e034 <strncpy+0x6>
 800e044:	441a      	add	r2, r3
 800e046:	2100      	movs	r1, #0
 800e048:	4293      	cmp	r3, r2
 800e04a:	d100      	bne.n	800e04e <strncpy+0x20>
 800e04c:	bd10      	pop	{r4, pc}
 800e04e:	f803 1b01 	strb.w	r1, [r3], #1
 800e052:	e7f9      	b.n	800e048 <strncpy+0x1a>

0800e054 <sysconf>:
 800e054:	2808      	cmp	r0, #8
 800e056:	b508      	push	{r3, lr}
 800e058:	d006      	beq.n	800e068 <sysconf+0x14>
 800e05a:	f7fc fa15 	bl	800a488 <__errno>
 800e05e:	2316      	movs	r3, #22
 800e060:	6003      	str	r3, [r0, #0]
 800e062:	f04f 30ff 	mov.w	r0, #4294967295
 800e066:	bd08      	pop	{r3, pc}
 800e068:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e06c:	e7fb      	b.n	800e066 <sysconf+0x12>

0800e06e <__sprint_r>:
 800e06e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e072:	6893      	ldr	r3, [r2, #8]
 800e074:	4680      	mov	r8, r0
 800e076:	460f      	mov	r7, r1
 800e078:	4614      	mov	r4, r2
 800e07a:	b91b      	cbnz	r3, 800e084 <__sprint_r+0x16>
 800e07c:	6053      	str	r3, [r2, #4]
 800e07e:	4618      	mov	r0, r3
 800e080:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e084:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800e086:	049d      	lsls	r5, r3, #18
 800e088:	d520      	bpl.n	800e0cc <__sprint_r+0x5e>
 800e08a:	6815      	ldr	r5, [r2, #0]
 800e08c:	3508      	adds	r5, #8
 800e08e:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800e092:	f04f 0900 	mov.w	r9, #0
 800e096:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800e09a:	45ca      	cmp	sl, r9
 800e09c:	dc0b      	bgt.n	800e0b6 <__sprint_r+0x48>
 800e09e:	68a3      	ldr	r3, [r4, #8]
 800e0a0:	f026 0003 	bic.w	r0, r6, #3
 800e0a4:	1a18      	subs	r0, r3, r0
 800e0a6:	60a0      	str	r0, [r4, #8]
 800e0a8:	3508      	adds	r5, #8
 800e0aa:	2800      	cmp	r0, #0
 800e0ac:	d1ef      	bne.n	800e08e <__sprint_r+0x20>
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800e0b4:	e7e4      	b.n	800e080 <__sprint_r+0x12>
 800e0b6:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800e0ba:	463a      	mov	r2, r7
 800e0bc:	4640      	mov	r0, r8
 800e0be:	f000 fe2a 	bl	800ed16 <_fputwc_r>
 800e0c2:	1c43      	adds	r3, r0, #1
 800e0c4:	d0f3      	beq.n	800e0ae <__sprint_r+0x40>
 800e0c6:	f109 0901 	add.w	r9, r9, #1
 800e0ca:	e7e6      	b.n	800e09a <__sprint_r+0x2c>
 800e0cc:	f7fe fdfa 	bl	800ccc4 <__sfvwrite_r>
 800e0d0:	e7ed      	b.n	800e0ae <__sprint_r+0x40>
	...

0800e0d4 <_vfiprintf_r>:
 800e0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0d8:	ed2d 8b02 	vpush	{d8}
 800e0dc:	b0b9      	sub	sp, #228	; 0xe4
 800e0de:	460f      	mov	r7, r1
 800e0e0:	9201      	str	r2, [sp, #4]
 800e0e2:	461d      	mov	r5, r3
 800e0e4:	461c      	mov	r4, r3
 800e0e6:	4681      	mov	r9, r0
 800e0e8:	b118      	cbz	r0, 800e0f2 <_vfiprintf_r+0x1e>
 800e0ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e0ec:	b90b      	cbnz	r3, 800e0f2 <_vfiprintf_r+0x1e>
 800e0ee:	f7fe fc99 	bl	800ca24 <__sinit>
 800e0f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e0f4:	07d8      	lsls	r0, r3, #31
 800e0f6:	d405      	bmi.n	800e104 <_vfiprintf_r+0x30>
 800e0f8:	89bb      	ldrh	r3, [r7, #12]
 800e0fa:	0599      	lsls	r1, r3, #22
 800e0fc:	d402      	bmi.n	800e104 <_vfiprintf_r+0x30>
 800e0fe:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e100:	f7fe ff50 	bl	800cfa4 <__retarget_lock_acquire_recursive>
 800e104:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e108:	049a      	lsls	r2, r3, #18
 800e10a:	d406      	bmi.n	800e11a <_vfiprintf_r+0x46>
 800e10c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e110:	81bb      	strh	r3, [r7, #12]
 800e112:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e114:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e118:	667b      	str	r3, [r7, #100]	; 0x64
 800e11a:	89bb      	ldrh	r3, [r7, #12]
 800e11c:	071e      	lsls	r6, r3, #28
 800e11e:	d501      	bpl.n	800e124 <_vfiprintf_r+0x50>
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	b9bb      	cbnz	r3, 800e154 <_vfiprintf_r+0x80>
 800e124:	4639      	mov	r1, r7
 800e126:	4648      	mov	r0, r9
 800e128:	f7fd fcb8 	bl	800ba9c <__swsetup_r>
 800e12c:	b190      	cbz	r0, 800e154 <_vfiprintf_r+0x80>
 800e12e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e130:	07d8      	lsls	r0, r3, #31
 800e132:	d508      	bpl.n	800e146 <_vfiprintf_r+0x72>
 800e134:	f04f 33ff 	mov.w	r3, #4294967295
 800e138:	9302      	str	r3, [sp, #8]
 800e13a:	9802      	ldr	r0, [sp, #8]
 800e13c:	b039      	add	sp, #228	; 0xe4
 800e13e:	ecbd 8b02 	vpop	{d8}
 800e142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e146:	89bb      	ldrh	r3, [r7, #12]
 800e148:	0599      	lsls	r1, r3, #22
 800e14a:	d4f3      	bmi.n	800e134 <_vfiprintf_r+0x60>
 800e14c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e14e:	f7fe ff2a 	bl	800cfa6 <__retarget_lock_release_recursive>
 800e152:	e7ef      	b.n	800e134 <_vfiprintf_r+0x60>
 800e154:	89bb      	ldrh	r3, [r7, #12]
 800e156:	f003 021a 	and.w	r2, r3, #26
 800e15a:	2a0a      	cmp	r2, #10
 800e15c:	d113      	bne.n	800e186 <_vfiprintf_r+0xb2>
 800e15e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e162:	2a00      	cmp	r2, #0
 800e164:	db0f      	blt.n	800e186 <_vfiprintf_r+0xb2>
 800e166:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e168:	07d2      	lsls	r2, r2, #31
 800e16a:	d404      	bmi.n	800e176 <_vfiprintf_r+0xa2>
 800e16c:	059e      	lsls	r6, r3, #22
 800e16e:	d402      	bmi.n	800e176 <_vfiprintf_r+0xa2>
 800e170:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e172:	f7fe ff18 	bl	800cfa6 <__retarget_lock_release_recursive>
 800e176:	9a01      	ldr	r2, [sp, #4]
 800e178:	462b      	mov	r3, r5
 800e17a:	4639      	mov	r1, r7
 800e17c:	4648      	mov	r0, r9
 800e17e:	f000 fc31 	bl	800e9e4 <__sbprintf>
 800e182:	9002      	str	r0, [sp, #8]
 800e184:	e7d9      	b.n	800e13a <_vfiprintf_r+0x66>
 800e186:	2300      	movs	r3, #0
 800e188:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800e18c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800e190:	ae0f      	add	r6, sp, #60	; 0x3c
 800e192:	ee08 3a10 	vmov	s16, r3
 800e196:	960c      	str	r6, [sp, #48]	; 0x30
 800e198:	9307      	str	r3, [sp, #28]
 800e19a:	9302      	str	r3, [sp, #8]
 800e19c:	9b01      	ldr	r3, [sp, #4]
 800e19e:	461d      	mov	r5, r3
 800e1a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1a4:	b10a      	cbz	r2, 800e1aa <_vfiprintf_r+0xd6>
 800e1a6:	2a25      	cmp	r2, #37	; 0x25
 800e1a8:	d1f9      	bne.n	800e19e <_vfiprintf_r+0xca>
 800e1aa:	9b01      	ldr	r3, [sp, #4]
 800e1ac:	ebb5 0803 	subs.w	r8, r5, r3
 800e1b0:	d00d      	beq.n	800e1ce <_vfiprintf_r+0xfa>
 800e1b2:	e9c6 3800 	strd	r3, r8, [r6]
 800e1b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e1b8:	4443      	add	r3, r8
 800e1ba:	930e      	str	r3, [sp, #56]	; 0x38
 800e1bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e1be:	3301      	adds	r3, #1
 800e1c0:	2b07      	cmp	r3, #7
 800e1c2:	930d      	str	r3, [sp, #52]	; 0x34
 800e1c4:	dc75      	bgt.n	800e2b2 <_vfiprintf_r+0x1de>
 800e1c6:	3608      	adds	r6, #8
 800e1c8:	9b02      	ldr	r3, [sp, #8]
 800e1ca:	4443      	add	r3, r8
 800e1cc:	9302      	str	r3, [sp, #8]
 800e1ce:	782b      	ldrb	r3, [r5, #0]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	f000 83c8 	beq.w	800e966 <_vfiprintf_r+0x892>
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	f04f 31ff 	mov.w	r1, #4294967295
 800e1dc:	1c6a      	adds	r2, r5, #1
 800e1de:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800e1e2:	9100      	str	r1, [sp, #0]
 800e1e4:	9303      	str	r3, [sp, #12]
 800e1e6:	469a      	mov	sl, r3
 800e1e8:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e1ec:	9201      	str	r2, [sp, #4]
 800e1ee:	f1a3 0220 	sub.w	r2, r3, #32
 800e1f2:	2a5a      	cmp	r2, #90	; 0x5a
 800e1f4:	f200 8310 	bhi.w	800e818 <_vfiprintf_r+0x744>
 800e1f8:	e8df f012 	tbh	[pc, r2, lsl #1]
 800e1fc:	030e0099 	.word	0x030e0099
 800e200:	00a1030e 	.word	0x00a1030e
 800e204:	030e030e 	.word	0x030e030e
 800e208:	0080030e 	.word	0x0080030e
 800e20c:	030e030e 	.word	0x030e030e
 800e210:	00ae00a4 	.word	0x00ae00a4
 800e214:	00ab030e 	.word	0x00ab030e
 800e218:	030e00b0 	.word	0x030e00b0
 800e21c:	00ce00cb 	.word	0x00ce00cb
 800e220:	00ce00ce 	.word	0x00ce00ce
 800e224:	00ce00ce 	.word	0x00ce00ce
 800e228:	00ce00ce 	.word	0x00ce00ce
 800e22c:	00ce00ce 	.word	0x00ce00ce
 800e230:	030e030e 	.word	0x030e030e
 800e234:	030e030e 	.word	0x030e030e
 800e238:	030e030e 	.word	0x030e030e
 800e23c:	030e030e 	.word	0x030e030e
 800e240:	00f8030e 	.word	0x00f8030e
 800e244:	030e0106 	.word	0x030e0106
 800e248:	030e030e 	.word	0x030e030e
 800e24c:	030e030e 	.word	0x030e030e
 800e250:	030e030e 	.word	0x030e030e
 800e254:	030e030e 	.word	0x030e030e
 800e258:	014d030e 	.word	0x014d030e
 800e25c:	030e030e 	.word	0x030e030e
 800e260:	0192030e 	.word	0x0192030e
 800e264:	0270030e 	.word	0x0270030e
 800e268:	030e030e 	.word	0x030e030e
 800e26c:	030e028e 	.word	0x030e028e
 800e270:	030e030e 	.word	0x030e030e
 800e274:	030e030e 	.word	0x030e030e
 800e278:	030e030e 	.word	0x030e030e
 800e27c:	030e030e 	.word	0x030e030e
 800e280:	00f8030e 	.word	0x00f8030e
 800e284:	030e0108 	.word	0x030e0108
 800e288:	030e030e 	.word	0x030e030e
 800e28c:	010800de 	.word	0x010800de
 800e290:	030e00f2 	.word	0x030e00f2
 800e294:	030e00eb 	.word	0x030e00eb
 800e298:	014f0130 	.word	0x014f0130
 800e29c:	00f20182 	.word	0x00f20182
 800e2a0:	0192030e 	.word	0x0192030e
 800e2a4:	02720097 	.word	0x02720097
 800e2a8:	030e030e 	.word	0x030e030e
 800e2ac:	030e0065 	.word	0x030e0065
 800e2b0:	0097      	.short	0x0097
 800e2b2:	aa0c      	add	r2, sp, #48	; 0x30
 800e2b4:	4639      	mov	r1, r7
 800e2b6:	4648      	mov	r0, r9
 800e2b8:	f7ff fed9 	bl	800e06e <__sprint_r>
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	f040 8331 	bne.w	800e924 <_vfiprintf_r+0x850>
 800e2c2:	ae0f      	add	r6, sp, #60	; 0x3c
 800e2c4:	e780      	b.n	800e1c8 <_vfiprintf_r+0xf4>
 800e2c6:	4a95      	ldr	r2, [pc, #596]	; (800e51c <_vfiprintf_r+0x448>)
 800e2c8:	9205      	str	r2, [sp, #20]
 800e2ca:	f01a 0f20 	tst.w	sl, #32
 800e2ce:	f000 8225 	beq.w	800e71c <_vfiprintf_r+0x648>
 800e2d2:	3407      	adds	r4, #7
 800e2d4:	f024 0b07 	bic.w	fp, r4, #7
 800e2d8:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800e2dc:	f01a 0f01 	tst.w	sl, #1
 800e2e0:	d009      	beq.n	800e2f6 <_vfiprintf_r+0x222>
 800e2e2:	ea54 0205 	orrs.w	r2, r4, r5
 800e2e6:	bf1f      	itttt	ne
 800e2e8:	2230      	movne	r2, #48	; 0x30
 800e2ea:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800e2ee:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 800e2f2:	f04a 0a02 	orrne.w	sl, sl, #2
 800e2f6:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800e2fa:	e10d      	b.n	800e518 <_vfiprintf_r+0x444>
 800e2fc:	4648      	mov	r0, r9
 800e2fe:	f7fe fe4b 	bl	800cf98 <_localeconv_r>
 800e302:	6843      	ldr	r3, [r0, #4]
 800e304:	4618      	mov	r0, r3
 800e306:	ee08 3a10 	vmov	s16, r3
 800e30a:	f7f1 ff89 	bl	8000220 <strlen>
 800e30e:	9007      	str	r0, [sp, #28]
 800e310:	4648      	mov	r0, r9
 800e312:	f7fe fe41 	bl	800cf98 <_localeconv_r>
 800e316:	6883      	ldr	r3, [r0, #8]
 800e318:	9306      	str	r3, [sp, #24]
 800e31a:	9b07      	ldr	r3, [sp, #28]
 800e31c:	b12b      	cbz	r3, 800e32a <_vfiprintf_r+0x256>
 800e31e:	9b06      	ldr	r3, [sp, #24]
 800e320:	b11b      	cbz	r3, 800e32a <_vfiprintf_r+0x256>
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	b10b      	cbz	r3, 800e32a <_vfiprintf_r+0x256>
 800e326:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800e32a:	9a01      	ldr	r2, [sp, #4]
 800e32c:	e75c      	b.n	800e1e8 <_vfiprintf_r+0x114>
 800e32e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800e332:	2b00      	cmp	r3, #0
 800e334:	d1f9      	bne.n	800e32a <_vfiprintf_r+0x256>
 800e336:	2320      	movs	r3, #32
 800e338:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800e33c:	e7f5      	b.n	800e32a <_vfiprintf_r+0x256>
 800e33e:	f04a 0a01 	orr.w	sl, sl, #1
 800e342:	e7f2      	b.n	800e32a <_vfiprintf_r+0x256>
 800e344:	f854 3b04 	ldr.w	r3, [r4], #4
 800e348:	9303      	str	r3, [sp, #12]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	daed      	bge.n	800e32a <_vfiprintf_r+0x256>
 800e34e:	425b      	negs	r3, r3
 800e350:	9303      	str	r3, [sp, #12]
 800e352:	f04a 0a04 	orr.w	sl, sl, #4
 800e356:	e7e8      	b.n	800e32a <_vfiprintf_r+0x256>
 800e358:	232b      	movs	r3, #43	; 0x2b
 800e35a:	e7ed      	b.n	800e338 <_vfiprintf_r+0x264>
 800e35c:	9a01      	ldr	r2, [sp, #4]
 800e35e:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e362:	2b2a      	cmp	r3, #42	; 0x2a
 800e364:	d112      	bne.n	800e38c <_vfiprintf_r+0x2b8>
 800e366:	f854 0b04 	ldr.w	r0, [r4], #4
 800e36a:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800e36e:	e9cd 3200 	strd	r3, r2, [sp]
 800e372:	e7da      	b.n	800e32a <_vfiprintf_r+0x256>
 800e374:	9b00      	ldr	r3, [sp, #0]
 800e376:	200a      	movs	r0, #10
 800e378:	fb00 1303 	mla	r3, r0, r3, r1
 800e37c:	9300      	str	r3, [sp, #0]
 800e37e:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e382:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e386:	2909      	cmp	r1, #9
 800e388:	d9f4      	bls.n	800e374 <_vfiprintf_r+0x2a0>
 800e38a:	e72f      	b.n	800e1ec <_vfiprintf_r+0x118>
 800e38c:	2100      	movs	r1, #0
 800e38e:	9100      	str	r1, [sp, #0]
 800e390:	e7f7      	b.n	800e382 <_vfiprintf_r+0x2ae>
 800e392:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800e396:	e7c8      	b.n	800e32a <_vfiprintf_r+0x256>
 800e398:	2100      	movs	r1, #0
 800e39a:	9a01      	ldr	r2, [sp, #4]
 800e39c:	9103      	str	r1, [sp, #12]
 800e39e:	9903      	ldr	r1, [sp, #12]
 800e3a0:	3b30      	subs	r3, #48	; 0x30
 800e3a2:	200a      	movs	r0, #10
 800e3a4:	fb00 3301 	mla	r3, r0, r1, r3
 800e3a8:	9303      	str	r3, [sp, #12]
 800e3aa:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e3ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e3b2:	2909      	cmp	r1, #9
 800e3b4:	d9f3      	bls.n	800e39e <_vfiprintf_r+0x2ca>
 800e3b6:	e719      	b.n	800e1ec <_vfiprintf_r+0x118>
 800e3b8:	9b01      	ldr	r3, [sp, #4]
 800e3ba:	781b      	ldrb	r3, [r3, #0]
 800e3bc:	2b68      	cmp	r3, #104	; 0x68
 800e3be:	bf01      	itttt	eq
 800e3c0:	9b01      	ldreq	r3, [sp, #4]
 800e3c2:	3301      	addeq	r3, #1
 800e3c4:	9301      	streq	r3, [sp, #4]
 800e3c6:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800e3ca:	bf18      	it	ne
 800e3cc:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800e3d0:	e7ab      	b.n	800e32a <_vfiprintf_r+0x256>
 800e3d2:	9b01      	ldr	r3, [sp, #4]
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	2b6c      	cmp	r3, #108	; 0x6c
 800e3d8:	d105      	bne.n	800e3e6 <_vfiprintf_r+0x312>
 800e3da:	9b01      	ldr	r3, [sp, #4]
 800e3dc:	3301      	adds	r3, #1
 800e3de:	9301      	str	r3, [sp, #4]
 800e3e0:	f04a 0a20 	orr.w	sl, sl, #32
 800e3e4:	e7a1      	b.n	800e32a <_vfiprintf_r+0x256>
 800e3e6:	f04a 0a10 	orr.w	sl, sl, #16
 800e3ea:	e79e      	b.n	800e32a <_vfiprintf_r+0x256>
 800e3ec:	46a3      	mov	fp, r4
 800e3ee:	2100      	movs	r1, #0
 800e3f0:	f85b 3b04 	ldr.w	r3, [fp], #4
 800e3f4:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800e3f8:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	9300      	str	r3, [sp, #0]
 800e400:	460d      	mov	r5, r1
 800e402:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 800e406:	e0a0      	b.n	800e54a <_vfiprintf_r+0x476>
 800e408:	f04a 0a10 	orr.w	sl, sl, #16
 800e40c:	f01a 0f20 	tst.w	sl, #32
 800e410:	d011      	beq.n	800e436 <_vfiprintf_r+0x362>
 800e412:	3407      	adds	r4, #7
 800e414:	f024 0b07 	bic.w	fp, r4, #7
 800e418:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800e41c:	2c00      	cmp	r4, #0
 800e41e:	f175 0300 	sbcs.w	r3, r5, #0
 800e422:	da06      	bge.n	800e432 <_vfiprintf_r+0x35e>
 800e424:	4264      	negs	r4, r4
 800e426:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800e42a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800e42e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800e432:	2301      	movs	r3, #1
 800e434:	e03f      	b.n	800e4b6 <_vfiprintf_r+0x3e2>
 800e436:	f01a 0f10 	tst.w	sl, #16
 800e43a:	f104 0b04 	add.w	fp, r4, #4
 800e43e:	d002      	beq.n	800e446 <_vfiprintf_r+0x372>
 800e440:	6824      	ldr	r4, [r4, #0]
 800e442:	17e5      	asrs	r5, r4, #31
 800e444:	e7ea      	b.n	800e41c <_vfiprintf_r+0x348>
 800e446:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800e44a:	6824      	ldr	r4, [r4, #0]
 800e44c:	d001      	beq.n	800e452 <_vfiprintf_r+0x37e>
 800e44e:	b224      	sxth	r4, r4
 800e450:	e7f7      	b.n	800e442 <_vfiprintf_r+0x36e>
 800e452:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800e456:	bf18      	it	ne
 800e458:	b264      	sxtbne	r4, r4
 800e45a:	e7f2      	b.n	800e442 <_vfiprintf_r+0x36e>
 800e45c:	f01a 0f20 	tst.w	sl, #32
 800e460:	f854 3b04 	ldr.w	r3, [r4], #4
 800e464:	d005      	beq.n	800e472 <_vfiprintf_r+0x39e>
 800e466:	9a02      	ldr	r2, [sp, #8]
 800e468:	4610      	mov	r0, r2
 800e46a:	17d1      	asrs	r1, r2, #31
 800e46c:	e9c3 0100 	strd	r0, r1, [r3]
 800e470:	e694      	b.n	800e19c <_vfiprintf_r+0xc8>
 800e472:	f01a 0f10 	tst.w	sl, #16
 800e476:	d002      	beq.n	800e47e <_vfiprintf_r+0x3aa>
 800e478:	9a02      	ldr	r2, [sp, #8]
 800e47a:	601a      	str	r2, [r3, #0]
 800e47c:	e68e      	b.n	800e19c <_vfiprintf_r+0xc8>
 800e47e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800e482:	d002      	beq.n	800e48a <_vfiprintf_r+0x3b6>
 800e484:	9a02      	ldr	r2, [sp, #8]
 800e486:	801a      	strh	r2, [r3, #0]
 800e488:	e688      	b.n	800e19c <_vfiprintf_r+0xc8>
 800e48a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800e48e:	d0f3      	beq.n	800e478 <_vfiprintf_r+0x3a4>
 800e490:	9a02      	ldr	r2, [sp, #8]
 800e492:	701a      	strb	r2, [r3, #0]
 800e494:	e682      	b.n	800e19c <_vfiprintf_r+0xc8>
 800e496:	f04a 0a10 	orr.w	sl, sl, #16
 800e49a:	f01a 0f20 	tst.w	sl, #32
 800e49e:	d01d      	beq.n	800e4dc <_vfiprintf_r+0x408>
 800e4a0:	3407      	adds	r4, #7
 800e4a2:	f024 0b07 	bic.w	fp, r4, #7
 800e4a6:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800e4aa:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 800e4b6:	9a00      	ldr	r2, [sp, #0]
 800e4b8:	3201      	adds	r2, #1
 800e4ba:	f000 8261 	beq.w	800e980 <_vfiprintf_r+0x8ac>
 800e4be:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800e4c2:	9204      	str	r2, [sp, #16]
 800e4c4:	ea54 0205 	orrs.w	r2, r4, r5
 800e4c8:	f040 8260 	bne.w	800e98c <_vfiprintf_r+0x8b8>
 800e4cc:	9a00      	ldr	r2, [sp, #0]
 800e4ce:	2a00      	cmp	r2, #0
 800e4d0:	f000 8197 	beq.w	800e802 <_vfiprintf_r+0x72e>
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	f040 825c 	bne.w	800e992 <_vfiprintf_r+0x8be>
 800e4da:	e135      	b.n	800e748 <_vfiprintf_r+0x674>
 800e4dc:	f01a 0f10 	tst.w	sl, #16
 800e4e0:	f104 0b04 	add.w	fp, r4, #4
 800e4e4:	d001      	beq.n	800e4ea <_vfiprintf_r+0x416>
 800e4e6:	6824      	ldr	r4, [r4, #0]
 800e4e8:	e003      	b.n	800e4f2 <_vfiprintf_r+0x41e>
 800e4ea:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800e4ee:	d002      	beq.n	800e4f6 <_vfiprintf_r+0x422>
 800e4f0:	8824      	ldrh	r4, [r4, #0]
 800e4f2:	2500      	movs	r5, #0
 800e4f4:	e7d9      	b.n	800e4aa <_vfiprintf_r+0x3d6>
 800e4f6:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800e4fa:	d0f4      	beq.n	800e4e6 <_vfiprintf_r+0x412>
 800e4fc:	7824      	ldrb	r4, [r4, #0]
 800e4fe:	e7f8      	b.n	800e4f2 <_vfiprintf_r+0x41e>
 800e500:	46a3      	mov	fp, r4
 800e502:	f647 0330 	movw	r3, #30768	; 0x7830
 800e506:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 800e50a:	f85b 4b04 	ldr.w	r4, [fp], #4
 800e50e:	4b03      	ldr	r3, [pc, #12]	; (800e51c <_vfiprintf_r+0x448>)
 800e510:	9305      	str	r3, [sp, #20]
 800e512:	2500      	movs	r5, #0
 800e514:	f04a 0a02 	orr.w	sl, sl, #2
 800e518:	2302      	movs	r3, #2
 800e51a:	e7c9      	b.n	800e4b0 <_vfiprintf_r+0x3dc>
 800e51c:	08010ec8 	.word	0x08010ec8
 800e520:	9b00      	ldr	r3, [sp, #0]
 800e522:	46a3      	mov	fp, r4
 800e524:	2500      	movs	r5, #0
 800e526:	1c5c      	adds	r4, r3, #1
 800e528:	f85b 8b04 	ldr.w	r8, [fp], #4
 800e52c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800e530:	f000 80cf 	beq.w	800e6d2 <_vfiprintf_r+0x5fe>
 800e534:	461a      	mov	r2, r3
 800e536:	4629      	mov	r1, r5
 800e538:	4640      	mov	r0, r8
 800e53a:	f7f1 fe79 	bl	8000230 <memchr>
 800e53e:	2800      	cmp	r0, #0
 800e540:	f000 8174 	beq.w	800e82c <_vfiprintf_r+0x758>
 800e544:	eba0 0308 	sub.w	r3, r0, r8
 800e548:	9300      	str	r3, [sp, #0]
 800e54a:	9b00      	ldr	r3, [sp, #0]
 800e54c:	42ab      	cmp	r3, r5
 800e54e:	bfb8      	it	lt
 800e550:	462b      	movlt	r3, r5
 800e552:	9304      	str	r3, [sp, #16]
 800e554:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800e558:	b113      	cbz	r3, 800e560 <_vfiprintf_r+0x48c>
 800e55a:	9b04      	ldr	r3, [sp, #16]
 800e55c:	3301      	adds	r3, #1
 800e55e:	9304      	str	r3, [sp, #16]
 800e560:	f01a 0302 	ands.w	r3, sl, #2
 800e564:	9308      	str	r3, [sp, #32]
 800e566:	bf1e      	ittt	ne
 800e568:	9b04      	ldrne	r3, [sp, #16]
 800e56a:	3302      	addne	r3, #2
 800e56c:	9304      	strne	r3, [sp, #16]
 800e56e:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800e572:	9309      	str	r3, [sp, #36]	; 0x24
 800e574:	d11f      	bne.n	800e5b6 <_vfiprintf_r+0x4e2>
 800e576:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800e57a:	1a9c      	subs	r4, r3, r2
 800e57c:	2c00      	cmp	r4, #0
 800e57e:	dd1a      	ble.n	800e5b6 <_vfiprintf_r+0x4e2>
 800e580:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800e584:	48b9      	ldr	r0, [pc, #740]	; (800e86c <_vfiprintf_r+0x798>)
 800e586:	6030      	str	r0, [r6, #0]
 800e588:	2c10      	cmp	r4, #16
 800e58a:	f103 0301 	add.w	r3, r3, #1
 800e58e:	f106 0108 	add.w	r1, r6, #8
 800e592:	f300 814d 	bgt.w	800e830 <_vfiprintf_r+0x75c>
 800e596:	6074      	str	r4, [r6, #4]
 800e598:	2b07      	cmp	r3, #7
 800e59a:	4414      	add	r4, r2
 800e59c:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800e5a0:	f340 8158 	ble.w	800e854 <_vfiprintf_r+0x780>
 800e5a4:	aa0c      	add	r2, sp, #48	; 0x30
 800e5a6:	4639      	mov	r1, r7
 800e5a8:	4648      	mov	r0, r9
 800e5aa:	f7ff fd60 	bl	800e06e <__sprint_r>
 800e5ae:	2800      	cmp	r0, #0
 800e5b0:	f040 81b8 	bne.w	800e924 <_vfiprintf_r+0x850>
 800e5b4:	ae0f      	add	r6, sp, #60	; 0x3c
 800e5b6:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800e5ba:	b173      	cbz	r3, 800e5da <_vfiprintf_r+0x506>
 800e5bc:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 800e5c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e5c2:	6032      	str	r2, [r6, #0]
 800e5c4:	2201      	movs	r2, #1
 800e5c6:	6072      	str	r2, [r6, #4]
 800e5c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e5ca:	3301      	adds	r3, #1
 800e5cc:	3201      	adds	r2, #1
 800e5ce:	2b07      	cmp	r3, #7
 800e5d0:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800e5d4:	f300 8140 	bgt.w	800e858 <_vfiprintf_r+0x784>
 800e5d8:	3608      	adds	r6, #8
 800e5da:	9b08      	ldr	r3, [sp, #32]
 800e5dc:	b16b      	cbz	r3, 800e5fa <_vfiprintf_r+0x526>
 800e5de:	aa0b      	add	r2, sp, #44	; 0x2c
 800e5e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e5e2:	6032      	str	r2, [r6, #0]
 800e5e4:	2202      	movs	r2, #2
 800e5e6:	6072      	str	r2, [r6, #4]
 800e5e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	3202      	adds	r2, #2
 800e5ee:	2b07      	cmp	r3, #7
 800e5f0:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800e5f4:	f300 8140 	bgt.w	800e878 <_vfiprintf_r+0x7a4>
 800e5f8:	3608      	adds	r6, #8
 800e5fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5fc:	2b80      	cmp	r3, #128	; 0x80
 800e5fe:	d11f      	bne.n	800e640 <_vfiprintf_r+0x56c>
 800e600:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800e604:	1a9c      	subs	r4, r3, r2
 800e606:	2c00      	cmp	r4, #0
 800e608:	dd1a      	ble.n	800e640 <_vfiprintf_r+0x56c>
 800e60a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800e60e:	4898      	ldr	r0, [pc, #608]	; (800e870 <_vfiprintf_r+0x79c>)
 800e610:	6030      	str	r0, [r6, #0]
 800e612:	2c10      	cmp	r4, #16
 800e614:	f103 0301 	add.w	r3, r3, #1
 800e618:	f106 0108 	add.w	r1, r6, #8
 800e61c:	f300 8135 	bgt.w	800e88a <_vfiprintf_r+0x7b6>
 800e620:	6074      	str	r4, [r6, #4]
 800e622:	2b07      	cmp	r3, #7
 800e624:	4414      	add	r4, r2
 800e626:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800e62a:	f340 8140 	ble.w	800e8ae <_vfiprintf_r+0x7da>
 800e62e:	aa0c      	add	r2, sp, #48	; 0x30
 800e630:	4639      	mov	r1, r7
 800e632:	4648      	mov	r0, r9
 800e634:	f7ff fd1b 	bl	800e06e <__sprint_r>
 800e638:	2800      	cmp	r0, #0
 800e63a:	f040 8173 	bne.w	800e924 <_vfiprintf_r+0x850>
 800e63e:	ae0f      	add	r6, sp, #60	; 0x3c
 800e640:	9b00      	ldr	r3, [sp, #0]
 800e642:	1aec      	subs	r4, r5, r3
 800e644:	2c00      	cmp	r4, #0
 800e646:	dd1a      	ble.n	800e67e <_vfiprintf_r+0x5aa>
 800e648:	4d89      	ldr	r5, [pc, #548]	; (800e870 <_vfiprintf_r+0x79c>)
 800e64a:	6035      	str	r5, [r6, #0]
 800e64c:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 800e650:	2c10      	cmp	r4, #16
 800e652:	f103 0301 	add.w	r3, r3, #1
 800e656:	f106 0208 	add.w	r2, r6, #8
 800e65a:	f300 812a 	bgt.w	800e8b2 <_vfiprintf_r+0x7de>
 800e65e:	6074      	str	r4, [r6, #4]
 800e660:	2b07      	cmp	r3, #7
 800e662:	440c      	add	r4, r1
 800e664:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800e668:	f340 8134 	ble.w	800e8d4 <_vfiprintf_r+0x800>
 800e66c:	aa0c      	add	r2, sp, #48	; 0x30
 800e66e:	4639      	mov	r1, r7
 800e670:	4648      	mov	r0, r9
 800e672:	f7ff fcfc 	bl	800e06e <__sprint_r>
 800e676:	2800      	cmp	r0, #0
 800e678:	f040 8154 	bne.w	800e924 <_vfiprintf_r+0x850>
 800e67c:	ae0f      	add	r6, sp, #60	; 0x3c
 800e67e:	9b00      	ldr	r3, [sp, #0]
 800e680:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e682:	6073      	str	r3, [r6, #4]
 800e684:	4418      	add	r0, r3
 800e686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e688:	f8c6 8000 	str.w	r8, [r6]
 800e68c:	3301      	adds	r3, #1
 800e68e:	2b07      	cmp	r3, #7
 800e690:	900e      	str	r0, [sp, #56]	; 0x38
 800e692:	930d      	str	r3, [sp, #52]	; 0x34
 800e694:	f300 8120 	bgt.w	800e8d8 <_vfiprintf_r+0x804>
 800e698:	f106 0308 	add.w	r3, r6, #8
 800e69c:	f01a 0f04 	tst.w	sl, #4
 800e6a0:	f040 8122 	bne.w	800e8e8 <_vfiprintf_r+0x814>
 800e6a4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e6a8:	9904      	ldr	r1, [sp, #16]
 800e6aa:	428a      	cmp	r2, r1
 800e6ac:	bfac      	ite	ge
 800e6ae:	189b      	addge	r3, r3, r2
 800e6b0:	185b      	addlt	r3, r3, r1
 800e6b2:	9302      	str	r3, [sp, #8]
 800e6b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e6b6:	b13b      	cbz	r3, 800e6c8 <_vfiprintf_r+0x5f4>
 800e6b8:	aa0c      	add	r2, sp, #48	; 0x30
 800e6ba:	4639      	mov	r1, r7
 800e6bc:	4648      	mov	r0, r9
 800e6be:	f7ff fcd6 	bl	800e06e <__sprint_r>
 800e6c2:	2800      	cmp	r0, #0
 800e6c4:	f040 812e 	bne.w	800e924 <_vfiprintf_r+0x850>
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	930d      	str	r3, [sp, #52]	; 0x34
 800e6cc:	465c      	mov	r4, fp
 800e6ce:	ae0f      	add	r6, sp, #60	; 0x3c
 800e6d0:	e564      	b.n	800e19c <_vfiprintf_r+0xc8>
 800e6d2:	4640      	mov	r0, r8
 800e6d4:	f7f1 fda4 	bl	8000220 <strlen>
 800e6d8:	9000      	str	r0, [sp, #0]
 800e6da:	e736      	b.n	800e54a <_vfiprintf_r+0x476>
 800e6dc:	f04a 0a10 	orr.w	sl, sl, #16
 800e6e0:	f01a 0f20 	tst.w	sl, #32
 800e6e4:	d006      	beq.n	800e6f4 <_vfiprintf_r+0x620>
 800e6e6:	3407      	adds	r4, #7
 800e6e8:	f024 0b07 	bic.w	fp, r4, #7
 800e6ec:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	e6dd      	b.n	800e4b0 <_vfiprintf_r+0x3dc>
 800e6f4:	f01a 0f10 	tst.w	sl, #16
 800e6f8:	f104 0b04 	add.w	fp, r4, #4
 800e6fc:	d001      	beq.n	800e702 <_vfiprintf_r+0x62e>
 800e6fe:	6824      	ldr	r4, [r4, #0]
 800e700:	e003      	b.n	800e70a <_vfiprintf_r+0x636>
 800e702:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800e706:	d002      	beq.n	800e70e <_vfiprintf_r+0x63a>
 800e708:	8824      	ldrh	r4, [r4, #0]
 800e70a:	2500      	movs	r5, #0
 800e70c:	e7f0      	b.n	800e6f0 <_vfiprintf_r+0x61c>
 800e70e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800e712:	d0f4      	beq.n	800e6fe <_vfiprintf_r+0x62a>
 800e714:	7824      	ldrb	r4, [r4, #0]
 800e716:	e7f8      	b.n	800e70a <_vfiprintf_r+0x636>
 800e718:	4a56      	ldr	r2, [pc, #344]	; (800e874 <_vfiprintf_r+0x7a0>)
 800e71a:	e5d5      	b.n	800e2c8 <_vfiprintf_r+0x1f4>
 800e71c:	f01a 0f10 	tst.w	sl, #16
 800e720:	f104 0b04 	add.w	fp, r4, #4
 800e724:	d001      	beq.n	800e72a <_vfiprintf_r+0x656>
 800e726:	6824      	ldr	r4, [r4, #0]
 800e728:	e003      	b.n	800e732 <_vfiprintf_r+0x65e>
 800e72a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800e72e:	d002      	beq.n	800e736 <_vfiprintf_r+0x662>
 800e730:	8824      	ldrh	r4, [r4, #0]
 800e732:	2500      	movs	r5, #0
 800e734:	e5d2      	b.n	800e2dc <_vfiprintf_r+0x208>
 800e736:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800e73a:	d0f4      	beq.n	800e726 <_vfiprintf_r+0x652>
 800e73c:	7824      	ldrb	r4, [r4, #0]
 800e73e:	e7f8      	b.n	800e732 <_vfiprintf_r+0x65e>
 800e740:	2d00      	cmp	r5, #0
 800e742:	bf08      	it	eq
 800e744:	2c0a      	cmpeq	r4, #10
 800e746:	d205      	bcs.n	800e754 <_vfiprintf_r+0x680>
 800e748:	3430      	adds	r4, #48	; 0x30
 800e74a:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 800e74e:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 800e752:	e13c      	b.n	800e9ce <_vfiprintf_r+0x8fa>
 800e754:	ab38      	add	r3, sp, #224	; 0xe0
 800e756:	9308      	str	r3, [sp, #32]
 800e758:	9b04      	ldr	r3, [sp, #16]
 800e75a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e75e:	f04f 0a00 	mov.w	sl, #0
 800e762:	9309      	str	r3, [sp, #36]	; 0x24
 800e764:	9b08      	ldr	r3, [sp, #32]
 800e766:	220a      	movs	r2, #10
 800e768:	f103 38ff 	add.w	r8, r3, #4294967295
 800e76c:	4620      	mov	r0, r4
 800e76e:	2300      	movs	r3, #0
 800e770:	4629      	mov	r1, r5
 800e772:	f7f2 fa91 	bl	8000c98 <__aeabi_uldivmod>
 800e776:	9b08      	ldr	r3, [sp, #32]
 800e778:	3230      	adds	r2, #48	; 0x30
 800e77a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800e77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e780:	f10a 0a01 	add.w	sl, sl, #1
 800e784:	b1db      	cbz	r3, 800e7be <_vfiprintf_r+0x6ea>
 800e786:	9b06      	ldr	r3, [sp, #24]
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	4553      	cmp	r3, sl
 800e78c:	d117      	bne.n	800e7be <_vfiprintf_r+0x6ea>
 800e78e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800e792:	d014      	beq.n	800e7be <_vfiprintf_r+0x6ea>
 800e794:	2d00      	cmp	r5, #0
 800e796:	bf08      	it	eq
 800e798:	2c0a      	cmpeq	r4, #10
 800e79a:	d310      	bcc.n	800e7be <_vfiprintf_r+0x6ea>
 800e79c:	9b07      	ldr	r3, [sp, #28]
 800e79e:	eba8 0803 	sub.w	r8, r8, r3
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	ee18 1a10 	vmov	r1, s16
 800e7a8:	4640      	mov	r0, r8
 800e7aa:	f7ff fc40 	bl	800e02e <strncpy>
 800e7ae:	9b06      	ldr	r3, [sp, #24]
 800e7b0:	785b      	ldrb	r3, [r3, #1]
 800e7b2:	b1a3      	cbz	r3, 800e7de <_vfiprintf_r+0x70a>
 800e7b4:	9b06      	ldr	r3, [sp, #24]
 800e7b6:	3301      	adds	r3, #1
 800e7b8:	9306      	str	r3, [sp, #24]
 800e7ba:	f04f 0a00 	mov.w	sl, #0
 800e7be:	220a      	movs	r2, #10
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	4620      	mov	r0, r4
 800e7c4:	4629      	mov	r1, r5
 800e7c6:	f7f2 fa67 	bl	8000c98 <__aeabi_uldivmod>
 800e7ca:	2d00      	cmp	r5, #0
 800e7cc:	bf08      	it	eq
 800e7ce:	2c0a      	cmpeq	r4, #10
 800e7d0:	f0c0 80fd 	bcc.w	800e9ce <_vfiprintf_r+0x8fa>
 800e7d4:	4604      	mov	r4, r0
 800e7d6:	460d      	mov	r5, r1
 800e7d8:	f8cd 8020 	str.w	r8, [sp, #32]
 800e7dc:	e7c2      	b.n	800e764 <_vfiprintf_r+0x690>
 800e7de:	469a      	mov	sl, r3
 800e7e0:	e7ed      	b.n	800e7be <_vfiprintf_r+0x6ea>
 800e7e2:	9a05      	ldr	r2, [sp, #20]
 800e7e4:	f004 030f 	and.w	r3, r4, #15
 800e7e8:	5cd3      	ldrb	r3, [r2, r3]
 800e7ea:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800e7ee:	0923      	lsrs	r3, r4, #4
 800e7f0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800e7f4:	092a      	lsrs	r2, r5, #4
 800e7f6:	461c      	mov	r4, r3
 800e7f8:	4615      	mov	r5, r2
 800e7fa:	ea54 0305 	orrs.w	r3, r4, r5
 800e7fe:	d1f0      	bne.n	800e7e2 <_vfiprintf_r+0x70e>
 800e800:	e0e5      	b.n	800e9ce <_vfiprintf_r+0x8fa>
 800e802:	b933      	cbnz	r3, 800e812 <_vfiprintf_r+0x73e>
 800e804:	f01a 0f01 	tst.w	sl, #1
 800e808:	d003      	beq.n	800e812 <_vfiprintf_r+0x73e>
 800e80a:	2330      	movs	r3, #48	; 0x30
 800e80c:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 800e810:	e79d      	b.n	800e74e <_vfiprintf_r+0x67a>
 800e812:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800e816:	e0da      	b.n	800e9ce <_vfiprintf_r+0x8fa>
 800e818:	2b00      	cmp	r3, #0
 800e81a:	f000 80a4 	beq.w	800e966 <_vfiprintf_r+0x892>
 800e81e:	2100      	movs	r1, #0
 800e820:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800e824:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800e828:	46a3      	mov	fp, r4
 800e82a:	e5e7      	b.n	800e3fc <_vfiprintf_r+0x328>
 800e82c:	4605      	mov	r5, r0
 800e82e:	e68c      	b.n	800e54a <_vfiprintf_r+0x476>
 800e830:	2010      	movs	r0, #16
 800e832:	4402      	add	r2, r0
 800e834:	2b07      	cmp	r3, #7
 800e836:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800e83a:	6070      	str	r0, [r6, #4]
 800e83c:	dd07      	ble.n	800e84e <_vfiprintf_r+0x77a>
 800e83e:	aa0c      	add	r2, sp, #48	; 0x30
 800e840:	4639      	mov	r1, r7
 800e842:	4648      	mov	r0, r9
 800e844:	f7ff fc13 	bl	800e06e <__sprint_r>
 800e848:	2800      	cmp	r0, #0
 800e84a:	d16b      	bne.n	800e924 <_vfiprintf_r+0x850>
 800e84c:	a90f      	add	r1, sp, #60	; 0x3c
 800e84e:	3c10      	subs	r4, #16
 800e850:	460e      	mov	r6, r1
 800e852:	e695      	b.n	800e580 <_vfiprintf_r+0x4ac>
 800e854:	460e      	mov	r6, r1
 800e856:	e6ae      	b.n	800e5b6 <_vfiprintf_r+0x4e2>
 800e858:	aa0c      	add	r2, sp, #48	; 0x30
 800e85a:	4639      	mov	r1, r7
 800e85c:	4648      	mov	r0, r9
 800e85e:	f7ff fc06 	bl	800e06e <__sprint_r>
 800e862:	2800      	cmp	r0, #0
 800e864:	d15e      	bne.n	800e924 <_vfiprintf_r+0x850>
 800e866:	ae0f      	add	r6, sp, #60	; 0x3c
 800e868:	e6b7      	b.n	800e5da <_vfiprintf_r+0x506>
 800e86a:	bf00      	nop
 800e86c:	080110ec 	.word	0x080110ec
 800e870:	080110fc 	.word	0x080110fc
 800e874:	08010ed9 	.word	0x08010ed9
 800e878:	aa0c      	add	r2, sp, #48	; 0x30
 800e87a:	4639      	mov	r1, r7
 800e87c:	4648      	mov	r0, r9
 800e87e:	f7ff fbf6 	bl	800e06e <__sprint_r>
 800e882:	2800      	cmp	r0, #0
 800e884:	d14e      	bne.n	800e924 <_vfiprintf_r+0x850>
 800e886:	ae0f      	add	r6, sp, #60	; 0x3c
 800e888:	e6b7      	b.n	800e5fa <_vfiprintf_r+0x526>
 800e88a:	2010      	movs	r0, #16
 800e88c:	4402      	add	r2, r0
 800e88e:	2b07      	cmp	r3, #7
 800e890:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800e894:	6070      	str	r0, [r6, #4]
 800e896:	dd07      	ble.n	800e8a8 <_vfiprintf_r+0x7d4>
 800e898:	aa0c      	add	r2, sp, #48	; 0x30
 800e89a:	4639      	mov	r1, r7
 800e89c:	4648      	mov	r0, r9
 800e89e:	f7ff fbe6 	bl	800e06e <__sprint_r>
 800e8a2:	2800      	cmp	r0, #0
 800e8a4:	d13e      	bne.n	800e924 <_vfiprintf_r+0x850>
 800e8a6:	a90f      	add	r1, sp, #60	; 0x3c
 800e8a8:	3c10      	subs	r4, #16
 800e8aa:	460e      	mov	r6, r1
 800e8ac:	e6ad      	b.n	800e60a <_vfiprintf_r+0x536>
 800e8ae:	460e      	mov	r6, r1
 800e8b0:	e6c6      	b.n	800e640 <_vfiprintf_r+0x56c>
 800e8b2:	2010      	movs	r0, #16
 800e8b4:	4401      	add	r1, r0
 800e8b6:	2b07      	cmp	r3, #7
 800e8b8:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800e8bc:	6070      	str	r0, [r6, #4]
 800e8be:	dd06      	ble.n	800e8ce <_vfiprintf_r+0x7fa>
 800e8c0:	aa0c      	add	r2, sp, #48	; 0x30
 800e8c2:	4639      	mov	r1, r7
 800e8c4:	4648      	mov	r0, r9
 800e8c6:	f7ff fbd2 	bl	800e06e <__sprint_r>
 800e8ca:	bb58      	cbnz	r0, 800e924 <_vfiprintf_r+0x850>
 800e8cc:	aa0f      	add	r2, sp, #60	; 0x3c
 800e8ce:	3c10      	subs	r4, #16
 800e8d0:	4616      	mov	r6, r2
 800e8d2:	e6ba      	b.n	800e64a <_vfiprintf_r+0x576>
 800e8d4:	4616      	mov	r6, r2
 800e8d6:	e6d2      	b.n	800e67e <_vfiprintf_r+0x5aa>
 800e8d8:	aa0c      	add	r2, sp, #48	; 0x30
 800e8da:	4639      	mov	r1, r7
 800e8dc:	4648      	mov	r0, r9
 800e8de:	f7ff fbc6 	bl	800e06e <__sprint_r>
 800e8e2:	b9f8      	cbnz	r0, 800e924 <_vfiprintf_r+0x850>
 800e8e4:	ab0f      	add	r3, sp, #60	; 0x3c
 800e8e6:	e6d9      	b.n	800e69c <_vfiprintf_r+0x5c8>
 800e8e8:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800e8ec:	1a54      	subs	r4, r2, r1
 800e8ee:	2c00      	cmp	r4, #0
 800e8f0:	f77f aed8 	ble.w	800e6a4 <_vfiprintf_r+0x5d0>
 800e8f4:	4d3a      	ldr	r5, [pc, #232]	; (800e9e0 <_vfiprintf_r+0x90c>)
 800e8f6:	2610      	movs	r6, #16
 800e8f8:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800e8fc:	2c10      	cmp	r4, #16
 800e8fe:	f102 0201 	add.w	r2, r2, #1
 800e902:	601d      	str	r5, [r3, #0]
 800e904:	dc1d      	bgt.n	800e942 <_vfiprintf_r+0x86e>
 800e906:	605c      	str	r4, [r3, #4]
 800e908:	2a07      	cmp	r2, #7
 800e90a:	440c      	add	r4, r1
 800e90c:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 800e910:	f77f aec8 	ble.w	800e6a4 <_vfiprintf_r+0x5d0>
 800e914:	aa0c      	add	r2, sp, #48	; 0x30
 800e916:	4639      	mov	r1, r7
 800e918:	4648      	mov	r0, r9
 800e91a:	f7ff fba8 	bl	800e06e <__sprint_r>
 800e91e:	2800      	cmp	r0, #0
 800e920:	f43f aec0 	beq.w	800e6a4 <_vfiprintf_r+0x5d0>
 800e924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e926:	07d9      	lsls	r1, r3, #31
 800e928:	d405      	bmi.n	800e936 <_vfiprintf_r+0x862>
 800e92a:	89bb      	ldrh	r3, [r7, #12]
 800e92c:	059a      	lsls	r2, r3, #22
 800e92e:	d402      	bmi.n	800e936 <_vfiprintf_r+0x862>
 800e930:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e932:	f7fe fb38 	bl	800cfa6 <__retarget_lock_release_recursive>
 800e936:	89bb      	ldrh	r3, [r7, #12]
 800e938:	065b      	lsls	r3, r3, #25
 800e93a:	f57f abfe 	bpl.w	800e13a <_vfiprintf_r+0x66>
 800e93e:	f7ff bbf9 	b.w	800e134 <_vfiprintf_r+0x60>
 800e942:	3110      	adds	r1, #16
 800e944:	2a07      	cmp	r2, #7
 800e946:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 800e94a:	605e      	str	r6, [r3, #4]
 800e94c:	dc02      	bgt.n	800e954 <_vfiprintf_r+0x880>
 800e94e:	3308      	adds	r3, #8
 800e950:	3c10      	subs	r4, #16
 800e952:	e7d1      	b.n	800e8f8 <_vfiprintf_r+0x824>
 800e954:	aa0c      	add	r2, sp, #48	; 0x30
 800e956:	4639      	mov	r1, r7
 800e958:	4648      	mov	r0, r9
 800e95a:	f7ff fb88 	bl	800e06e <__sprint_r>
 800e95e:	2800      	cmp	r0, #0
 800e960:	d1e0      	bne.n	800e924 <_vfiprintf_r+0x850>
 800e962:	ab0f      	add	r3, sp, #60	; 0x3c
 800e964:	e7f4      	b.n	800e950 <_vfiprintf_r+0x87c>
 800e966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e968:	b913      	cbnz	r3, 800e970 <_vfiprintf_r+0x89c>
 800e96a:	2300      	movs	r3, #0
 800e96c:	930d      	str	r3, [sp, #52]	; 0x34
 800e96e:	e7d9      	b.n	800e924 <_vfiprintf_r+0x850>
 800e970:	aa0c      	add	r2, sp, #48	; 0x30
 800e972:	4639      	mov	r1, r7
 800e974:	4648      	mov	r0, r9
 800e976:	f7ff fb7a 	bl	800e06e <__sprint_r>
 800e97a:	2800      	cmp	r0, #0
 800e97c:	d0f5      	beq.n	800e96a <_vfiprintf_r+0x896>
 800e97e:	e7d1      	b.n	800e924 <_vfiprintf_r+0x850>
 800e980:	ea54 0205 	orrs.w	r2, r4, r5
 800e984:	f8cd a010 	str.w	sl, [sp, #16]
 800e988:	f43f ada4 	beq.w	800e4d4 <_vfiprintf_r+0x400>
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	f43f aed7 	beq.w	800e740 <_vfiprintf_r+0x66c>
 800e992:	2b02      	cmp	r3, #2
 800e994:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800e998:	f43f af23 	beq.w	800e7e2 <_vfiprintf_r+0x70e>
 800e99c:	08e2      	lsrs	r2, r4, #3
 800e99e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800e9a2:	08e8      	lsrs	r0, r5, #3
 800e9a4:	f004 0307 	and.w	r3, r4, #7
 800e9a8:	4605      	mov	r5, r0
 800e9aa:	4614      	mov	r4, r2
 800e9ac:	3330      	adds	r3, #48	; 0x30
 800e9ae:	ea54 0205 	orrs.w	r2, r4, r5
 800e9b2:	4641      	mov	r1, r8
 800e9b4:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800e9b8:	d1f0      	bne.n	800e99c <_vfiprintf_r+0x8c8>
 800e9ba:	9a04      	ldr	r2, [sp, #16]
 800e9bc:	07d0      	lsls	r0, r2, #31
 800e9be:	d506      	bpl.n	800e9ce <_vfiprintf_r+0x8fa>
 800e9c0:	2b30      	cmp	r3, #48	; 0x30
 800e9c2:	d004      	beq.n	800e9ce <_vfiprintf_r+0x8fa>
 800e9c4:	2330      	movs	r3, #48	; 0x30
 800e9c6:	f808 3c01 	strb.w	r3, [r8, #-1]
 800e9ca:	f1a1 0802 	sub.w	r8, r1, #2
 800e9ce:	ab38      	add	r3, sp, #224	; 0xe0
 800e9d0:	eba3 0308 	sub.w	r3, r3, r8
 800e9d4:	9d00      	ldr	r5, [sp, #0]
 800e9d6:	f8dd a010 	ldr.w	sl, [sp, #16]
 800e9da:	9300      	str	r3, [sp, #0]
 800e9dc:	e5b5      	b.n	800e54a <_vfiprintf_r+0x476>
 800e9de:	bf00      	nop
 800e9e0:	080110ec 	.word	0x080110ec

0800e9e4 <__sbprintf>:
 800e9e4:	b570      	push	{r4, r5, r6, lr}
 800e9e6:	460c      	mov	r4, r1
 800e9e8:	8989      	ldrh	r1, [r1, #12]
 800e9ea:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800e9ee:	f021 0102 	bic.w	r1, r1, #2
 800e9f2:	f8ad 1014 	strh.w	r1, [sp, #20]
 800e9f6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800e9f8:	911b      	str	r1, [sp, #108]	; 0x6c
 800e9fa:	89e1      	ldrh	r1, [r4, #14]
 800e9fc:	f8ad 1016 	strh.w	r1, [sp, #22]
 800ea00:	69e1      	ldr	r1, [r4, #28]
 800ea02:	9109      	str	r1, [sp, #36]	; 0x24
 800ea04:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ea06:	910b      	str	r1, [sp, #44]	; 0x2c
 800ea08:	a91c      	add	r1, sp, #112	; 0x70
 800ea0a:	9102      	str	r1, [sp, #8]
 800ea0c:	9106      	str	r1, [sp, #24]
 800ea0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ea12:	4606      	mov	r6, r0
 800ea14:	9104      	str	r1, [sp, #16]
 800ea16:	9107      	str	r1, [sp, #28]
 800ea18:	a818      	add	r0, sp, #96	; 0x60
 800ea1a:	2100      	movs	r1, #0
 800ea1c:	e9cd 3200 	strd	r3, r2, [sp]
 800ea20:	9108      	str	r1, [sp, #32]
 800ea22:	f7fe fabd 	bl	800cfa0 <__retarget_lock_init_recursive>
 800ea26:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ea2a:	a902      	add	r1, sp, #8
 800ea2c:	4630      	mov	r0, r6
 800ea2e:	f7ff fb51 	bl	800e0d4 <_vfiprintf_r>
 800ea32:	1e05      	subs	r5, r0, #0
 800ea34:	db07      	blt.n	800ea46 <__sbprintf+0x62>
 800ea36:	a902      	add	r1, sp, #8
 800ea38:	4630      	mov	r0, r6
 800ea3a:	f7fd ff87 	bl	800c94c <_fflush_r>
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	bf18      	it	ne
 800ea42:	f04f 35ff 	movne.w	r5, #4294967295
 800ea46:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800ea4a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ea4c:	065b      	lsls	r3, r3, #25
 800ea4e:	bf42      	ittt	mi
 800ea50:	89a3      	ldrhmi	r3, [r4, #12]
 800ea52:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800ea56:	81a3      	strhmi	r3, [r4, #12]
 800ea58:	f7fe faa3 	bl	800cfa2 <__retarget_lock_close_recursive>
 800ea5c:	4628      	mov	r0, r5
 800ea5e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800ea62:	bd70      	pop	{r4, r5, r6, pc}

0800ea64 <_write_r>:
 800ea64:	b538      	push	{r3, r4, r5, lr}
 800ea66:	4d07      	ldr	r5, [pc, #28]	; (800ea84 <_write_r+0x20>)
 800ea68:	4604      	mov	r4, r0
 800ea6a:	4608      	mov	r0, r1
 800ea6c:	4611      	mov	r1, r2
 800ea6e:	2200      	movs	r2, #0
 800ea70:	602a      	str	r2, [r5, #0]
 800ea72:	461a      	mov	r2, r3
 800ea74:	f7f5 f9af 	bl	8003dd6 <_write>
 800ea78:	1c43      	adds	r3, r0, #1
 800ea7a:	d102      	bne.n	800ea82 <_write_r+0x1e>
 800ea7c:	682b      	ldr	r3, [r5, #0]
 800ea7e:	b103      	cbz	r3, 800ea82 <_write_r+0x1e>
 800ea80:	6023      	str	r3, [r4, #0]
 800ea82:	bd38      	pop	{r3, r4, r5, pc}
 800ea84:	20001bbc 	.word	0x20001bbc

0800ea88 <__register_exitproc>:
 800ea88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea8c:	4d1c      	ldr	r5, [pc, #112]	; (800eb00 <__register_exitproc+0x78>)
 800ea8e:	4606      	mov	r6, r0
 800ea90:	6828      	ldr	r0, [r5, #0]
 800ea92:	4698      	mov	r8, r3
 800ea94:	460f      	mov	r7, r1
 800ea96:	4691      	mov	r9, r2
 800ea98:	f7fe fa84 	bl	800cfa4 <__retarget_lock_acquire_recursive>
 800ea9c:	4b19      	ldr	r3, [pc, #100]	; (800eb04 <__register_exitproc+0x7c>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800eaa4:	4628      	mov	r0, r5
 800eaa6:	b91c      	cbnz	r4, 800eab0 <__register_exitproc+0x28>
 800eaa8:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800eaac:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800eab0:	6865      	ldr	r5, [r4, #4]
 800eab2:	6800      	ldr	r0, [r0, #0]
 800eab4:	2d1f      	cmp	r5, #31
 800eab6:	dd05      	ble.n	800eac4 <__register_exitproc+0x3c>
 800eab8:	f7fe fa75 	bl	800cfa6 <__retarget_lock_release_recursive>
 800eabc:	f04f 30ff 	mov.w	r0, #4294967295
 800eac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eac4:	b19e      	cbz	r6, 800eaee <__register_exitproc+0x66>
 800eac6:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800eaca:	2201      	movs	r2, #1
 800eacc:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800ead0:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800ead4:	40aa      	lsls	r2, r5
 800ead6:	4313      	orrs	r3, r2
 800ead8:	2e02      	cmp	r6, #2
 800eada:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800eade:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800eae2:	bf02      	ittt	eq
 800eae4:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800eae8:	431a      	orreq	r2, r3
 800eaea:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 800eaee:	1c6b      	adds	r3, r5, #1
 800eaf0:	3502      	adds	r5, #2
 800eaf2:	6063      	str	r3, [r4, #4]
 800eaf4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800eaf8:	f7fe fa55 	bl	800cfa6 <__retarget_lock_release_recursive>
 800eafc:	2000      	movs	r0, #0
 800eafe:	e7df      	b.n	800eac0 <__register_exitproc+0x38>
 800eb00:	20000478 	.word	0x20000478
 800eb04:	08010eb4 	.word	0x08010eb4

0800eb08 <__assert_func>:
 800eb08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb0a:	4614      	mov	r4, r2
 800eb0c:	461a      	mov	r2, r3
 800eb0e:	4b09      	ldr	r3, [pc, #36]	; (800eb34 <__assert_func+0x2c>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	4605      	mov	r5, r0
 800eb14:	68d8      	ldr	r0, [r3, #12]
 800eb16:	b14c      	cbz	r4, 800eb2c <__assert_func+0x24>
 800eb18:	4b07      	ldr	r3, [pc, #28]	; (800eb38 <__assert_func+0x30>)
 800eb1a:	9100      	str	r1, [sp, #0]
 800eb1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eb20:	4906      	ldr	r1, [pc, #24]	; (800eb3c <__assert_func+0x34>)
 800eb22:	462b      	mov	r3, r5
 800eb24:	f000 f8a4 	bl	800ec70 <fiprintf>
 800eb28:	f000 f9eb 	bl	800ef02 <abort>
 800eb2c:	4b04      	ldr	r3, [pc, #16]	; (800eb40 <__assert_func+0x38>)
 800eb2e:	461c      	mov	r4, r3
 800eb30:	e7f3      	b.n	800eb1a <__assert_func+0x12>
 800eb32:	bf00      	nop
 800eb34:	2000004c 	.word	0x2000004c
 800eb38:	0801110c 	.word	0x0801110c
 800eb3c:	08011119 	.word	0x08011119
 800eb40:	08011147 	.word	0x08011147

0800eb44 <_calloc_r>:
 800eb44:	b510      	push	{r4, lr}
 800eb46:	4351      	muls	r1, r2
 800eb48:	f7fe fa9a 	bl	800d080 <_malloc_r>
 800eb4c:	4604      	mov	r4, r0
 800eb4e:	b198      	cbz	r0, 800eb78 <_calloc_r+0x34>
 800eb50:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800eb54:	f022 0203 	bic.w	r2, r2, #3
 800eb58:	3a04      	subs	r2, #4
 800eb5a:	2a24      	cmp	r2, #36	; 0x24
 800eb5c:	d81b      	bhi.n	800eb96 <_calloc_r+0x52>
 800eb5e:	2a13      	cmp	r2, #19
 800eb60:	d917      	bls.n	800eb92 <_calloc_r+0x4e>
 800eb62:	2100      	movs	r1, #0
 800eb64:	2a1b      	cmp	r2, #27
 800eb66:	e9c0 1100 	strd	r1, r1, [r0]
 800eb6a:	d807      	bhi.n	800eb7c <_calloc_r+0x38>
 800eb6c:	f100 0308 	add.w	r3, r0, #8
 800eb70:	2200      	movs	r2, #0
 800eb72:	e9c3 2200 	strd	r2, r2, [r3]
 800eb76:	609a      	str	r2, [r3, #8]
 800eb78:	4620      	mov	r0, r4
 800eb7a:	bd10      	pop	{r4, pc}
 800eb7c:	2a24      	cmp	r2, #36	; 0x24
 800eb7e:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800eb82:	bf11      	iteee	ne
 800eb84:	f100 0310 	addne.w	r3, r0, #16
 800eb88:	6101      	streq	r1, [r0, #16]
 800eb8a:	f100 0318 	addeq.w	r3, r0, #24
 800eb8e:	6141      	streq	r1, [r0, #20]
 800eb90:	e7ee      	b.n	800eb70 <_calloc_r+0x2c>
 800eb92:	4603      	mov	r3, r0
 800eb94:	e7ec      	b.n	800eb70 <_calloc_r+0x2c>
 800eb96:	2100      	movs	r1, #0
 800eb98:	f7fb fca0 	bl	800a4dc <memset>
 800eb9c:	e7ec      	b.n	800eb78 <_calloc_r+0x34>
	...

0800eba0 <_close_r>:
 800eba0:	b538      	push	{r3, r4, r5, lr}
 800eba2:	4d06      	ldr	r5, [pc, #24]	; (800ebbc <_close_r+0x1c>)
 800eba4:	2300      	movs	r3, #0
 800eba6:	4604      	mov	r4, r0
 800eba8:	4608      	mov	r0, r1
 800ebaa:	602b      	str	r3, [r5, #0]
 800ebac:	f7f5 f92f 	bl	8003e0e <_close>
 800ebb0:	1c43      	adds	r3, r0, #1
 800ebb2:	d102      	bne.n	800ebba <_close_r+0x1a>
 800ebb4:	682b      	ldr	r3, [r5, #0]
 800ebb6:	b103      	cbz	r3, 800ebba <_close_r+0x1a>
 800ebb8:	6023      	str	r3, [r4, #0]
 800ebba:	bd38      	pop	{r3, r4, r5, pc}
 800ebbc:	20001bbc 	.word	0x20001bbc

0800ebc0 <_fclose_r>:
 800ebc0:	b570      	push	{r4, r5, r6, lr}
 800ebc2:	4606      	mov	r6, r0
 800ebc4:	460c      	mov	r4, r1
 800ebc6:	b911      	cbnz	r1, 800ebce <_fclose_r+0xe>
 800ebc8:	2500      	movs	r5, #0
 800ebca:	4628      	mov	r0, r5
 800ebcc:	bd70      	pop	{r4, r5, r6, pc}
 800ebce:	b118      	cbz	r0, 800ebd8 <_fclose_r+0x18>
 800ebd0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ebd2:	b90b      	cbnz	r3, 800ebd8 <_fclose_r+0x18>
 800ebd4:	f7fd ff26 	bl	800ca24 <__sinit>
 800ebd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ebda:	07d8      	lsls	r0, r3, #31
 800ebdc:	d405      	bmi.n	800ebea <_fclose_r+0x2a>
 800ebde:	89a3      	ldrh	r3, [r4, #12]
 800ebe0:	0599      	lsls	r1, r3, #22
 800ebe2:	d402      	bmi.n	800ebea <_fclose_r+0x2a>
 800ebe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebe6:	f7fe f9dd 	bl	800cfa4 <__retarget_lock_acquire_recursive>
 800ebea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebee:	b93b      	cbnz	r3, 800ec00 <_fclose_r+0x40>
 800ebf0:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800ebf2:	f015 0501 	ands.w	r5, r5, #1
 800ebf6:	d1e7      	bne.n	800ebc8 <_fclose_r+0x8>
 800ebf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebfa:	f7fe f9d4 	bl	800cfa6 <__retarget_lock_release_recursive>
 800ebfe:	e7e4      	b.n	800ebca <_fclose_r+0xa>
 800ec00:	4621      	mov	r1, r4
 800ec02:	4630      	mov	r0, r6
 800ec04:	f7fd fe14 	bl	800c830 <__sflush_r>
 800ec08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ec0a:	4605      	mov	r5, r0
 800ec0c:	b133      	cbz	r3, 800ec1c <_fclose_r+0x5c>
 800ec0e:	69e1      	ldr	r1, [r4, #28]
 800ec10:	4630      	mov	r0, r6
 800ec12:	4798      	blx	r3
 800ec14:	2800      	cmp	r0, #0
 800ec16:	bfb8      	it	lt
 800ec18:	f04f 35ff 	movlt.w	r5, #4294967295
 800ec1c:	89a3      	ldrh	r3, [r4, #12]
 800ec1e:	061a      	lsls	r2, r3, #24
 800ec20:	d503      	bpl.n	800ec2a <_fclose_r+0x6a>
 800ec22:	6921      	ldr	r1, [r4, #16]
 800ec24:	4630      	mov	r0, r6
 800ec26:	f7fd ff8d 	bl	800cb44 <_free_r>
 800ec2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ec2c:	b141      	cbz	r1, 800ec40 <_fclose_r+0x80>
 800ec2e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800ec32:	4299      	cmp	r1, r3
 800ec34:	d002      	beq.n	800ec3c <_fclose_r+0x7c>
 800ec36:	4630      	mov	r0, r6
 800ec38:	f7fd ff84 	bl	800cb44 <_free_r>
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	6323      	str	r3, [r4, #48]	; 0x30
 800ec40:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ec42:	b121      	cbz	r1, 800ec4e <_fclose_r+0x8e>
 800ec44:	4630      	mov	r0, r6
 800ec46:	f7fd ff7d 	bl	800cb44 <_free_r>
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	6463      	str	r3, [r4, #68]	; 0x44
 800ec4e:	f7fd fed1 	bl	800c9f4 <__sfp_lock_acquire>
 800ec52:	2300      	movs	r3, #0
 800ec54:	81a3      	strh	r3, [r4, #12]
 800ec56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec58:	07db      	lsls	r3, r3, #31
 800ec5a:	d402      	bmi.n	800ec62 <_fclose_r+0xa2>
 800ec5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec5e:	f7fe f9a2 	bl	800cfa6 <__retarget_lock_release_recursive>
 800ec62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec64:	f7fe f99d 	bl	800cfa2 <__retarget_lock_close_recursive>
 800ec68:	f7fd feca 	bl	800ca00 <__sfp_lock_release>
 800ec6c:	e7ad      	b.n	800ebca <_fclose_r+0xa>
	...

0800ec70 <fiprintf>:
 800ec70:	b40e      	push	{r1, r2, r3}
 800ec72:	b503      	push	{r0, r1, lr}
 800ec74:	4601      	mov	r1, r0
 800ec76:	ab03      	add	r3, sp, #12
 800ec78:	4805      	ldr	r0, [pc, #20]	; (800ec90 <fiprintf+0x20>)
 800ec7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec7e:	6800      	ldr	r0, [r0, #0]
 800ec80:	9301      	str	r3, [sp, #4]
 800ec82:	f7ff fa27 	bl	800e0d4 <_vfiprintf_r>
 800ec86:	b002      	add	sp, #8
 800ec88:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec8c:	b003      	add	sp, #12
 800ec8e:	4770      	bx	lr
 800ec90:	2000004c 	.word	0x2000004c

0800ec94 <__fputwc>:
 800ec94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ec98:	4680      	mov	r8, r0
 800ec9a:	460e      	mov	r6, r1
 800ec9c:	4615      	mov	r5, r2
 800ec9e:	f000 f887 	bl	800edb0 <__locale_mb_cur_max>
 800eca2:	2801      	cmp	r0, #1
 800eca4:	d11c      	bne.n	800ece0 <__fputwc+0x4c>
 800eca6:	1e73      	subs	r3, r6, #1
 800eca8:	2bfe      	cmp	r3, #254	; 0xfe
 800ecaa:	d819      	bhi.n	800ece0 <__fputwc+0x4c>
 800ecac:	f88d 6004 	strb.w	r6, [sp, #4]
 800ecb0:	4604      	mov	r4, r0
 800ecb2:	2700      	movs	r7, #0
 800ecb4:	f10d 0904 	add.w	r9, sp, #4
 800ecb8:	42a7      	cmp	r7, r4
 800ecba:	d020      	beq.n	800ecfe <__fputwc+0x6a>
 800ecbc:	68ab      	ldr	r3, [r5, #8]
 800ecbe:	f817 1009 	ldrb.w	r1, [r7, r9]
 800ecc2:	3b01      	subs	r3, #1
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	60ab      	str	r3, [r5, #8]
 800ecc8:	da04      	bge.n	800ecd4 <__fputwc+0x40>
 800ecca:	69aa      	ldr	r2, [r5, #24]
 800eccc:	4293      	cmp	r3, r2
 800ecce:	db1a      	blt.n	800ed06 <__fputwc+0x72>
 800ecd0:	290a      	cmp	r1, #10
 800ecd2:	d018      	beq.n	800ed06 <__fputwc+0x72>
 800ecd4:	682b      	ldr	r3, [r5, #0]
 800ecd6:	1c5a      	adds	r2, r3, #1
 800ecd8:	602a      	str	r2, [r5, #0]
 800ecda:	7019      	strb	r1, [r3, #0]
 800ecdc:	3701      	adds	r7, #1
 800ecde:	e7eb      	b.n	800ecb8 <__fputwc+0x24>
 800ece0:	4632      	mov	r2, r6
 800ece2:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800ece6:	a901      	add	r1, sp, #4
 800ece8:	4640      	mov	r0, r8
 800ecea:	f000 f8e7 	bl	800eebc <_wcrtomb_r>
 800ecee:	1c42      	adds	r2, r0, #1
 800ecf0:	4604      	mov	r4, r0
 800ecf2:	d1de      	bne.n	800ecb2 <__fputwc+0x1e>
 800ecf4:	89ab      	ldrh	r3, [r5, #12]
 800ecf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecfa:	81ab      	strh	r3, [r5, #12]
 800ecfc:	4606      	mov	r6, r0
 800ecfe:	4630      	mov	r0, r6
 800ed00:	b003      	add	sp, #12
 800ed02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed06:	462a      	mov	r2, r5
 800ed08:	4640      	mov	r0, r8
 800ed0a:	f000 f88d 	bl	800ee28 <__swbuf_r>
 800ed0e:	1c43      	adds	r3, r0, #1
 800ed10:	d1e4      	bne.n	800ecdc <__fputwc+0x48>
 800ed12:	4606      	mov	r6, r0
 800ed14:	e7f3      	b.n	800ecfe <__fputwc+0x6a>

0800ed16 <_fputwc_r>:
 800ed16:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800ed18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed1a:	4614      	mov	r4, r2
 800ed1c:	07da      	lsls	r2, r3, #31
 800ed1e:	4605      	mov	r5, r0
 800ed20:	d407      	bmi.n	800ed32 <_fputwc_r+0x1c>
 800ed22:	89a3      	ldrh	r3, [r4, #12]
 800ed24:	059b      	lsls	r3, r3, #22
 800ed26:	d404      	bmi.n	800ed32 <_fputwc_r+0x1c>
 800ed28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed2a:	9101      	str	r1, [sp, #4]
 800ed2c:	f7fe f93a 	bl	800cfa4 <__retarget_lock_acquire_recursive>
 800ed30:	9901      	ldr	r1, [sp, #4]
 800ed32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed36:	0498      	lsls	r0, r3, #18
 800ed38:	d406      	bmi.n	800ed48 <_fputwc_r+0x32>
 800ed3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ed3e:	81a3      	strh	r3, [r4, #12]
 800ed40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ed46:	6663      	str	r3, [r4, #100]	; 0x64
 800ed48:	4622      	mov	r2, r4
 800ed4a:	4628      	mov	r0, r5
 800ed4c:	f7ff ffa2 	bl	800ec94 <__fputwc>
 800ed50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed52:	07da      	lsls	r2, r3, #31
 800ed54:	4605      	mov	r5, r0
 800ed56:	d405      	bmi.n	800ed64 <_fputwc_r+0x4e>
 800ed58:	89a3      	ldrh	r3, [r4, #12]
 800ed5a:	059b      	lsls	r3, r3, #22
 800ed5c:	d402      	bmi.n	800ed64 <_fputwc_r+0x4e>
 800ed5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed60:	f7fe f921 	bl	800cfa6 <__retarget_lock_release_recursive>
 800ed64:	4628      	mov	r0, r5
 800ed66:	b003      	add	sp, #12
 800ed68:	bd30      	pop	{r4, r5, pc}
	...

0800ed6c <_fstat_r>:
 800ed6c:	b538      	push	{r3, r4, r5, lr}
 800ed6e:	4d07      	ldr	r5, [pc, #28]	; (800ed8c <_fstat_r+0x20>)
 800ed70:	2300      	movs	r3, #0
 800ed72:	4604      	mov	r4, r0
 800ed74:	4608      	mov	r0, r1
 800ed76:	4611      	mov	r1, r2
 800ed78:	602b      	str	r3, [r5, #0]
 800ed7a:	f7f5 f854 	bl	8003e26 <_fstat>
 800ed7e:	1c43      	adds	r3, r0, #1
 800ed80:	d102      	bne.n	800ed88 <_fstat_r+0x1c>
 800ed82:	682b      	ldr	r3, [r5, #0]
 800ed84:	b103      	cbz	r3, 800ed88 <_fstat_r+0x1c>
 800ed86:	6023      	str	r3, [r4, #0]
 800ed88:	bd38      	pop	{r3, r4, r5, pc}
 800ed8a:	bf00      	nop
 800ed8c:	20001bbc 	.word	0x20001bbc

0800ed90 <_isatty_r>:
 800ed90:	b538      	push	{r3, r4, r5, lr}
 800ed92:	4d06      	ldr	r5, [pc, #24]	; (800edac <_isatty_r+0x1c>)
 800ed94:	2300      	movs	r3, #0
 800ed96:	4604      	mov	r4, r0
 800ed98:	4608      	mov	r0, r1
 800ed9a:	602b      	str	r3, [r5, #0]
 800ed9c:	f7f5 f853 	bl	8003e46 <_isatty>
 800eda0:	1c43      	adds	r3, r0, #1
 800eda2:	d102      	bne.n	800edaa <_isatty_r+0x1a>
 800eda4:	682b      	ldr	r3, [r5, #0]
 800eda6:	b103      	cbz	r3, 800edaa <_isatty_r+0x1a>
 800eda8:	6023      	str	r3, [r4, #0]
 800edaa:	bd38      	pop	{r3, r4, r5, pc}
 800edac:	20001bbc 	.word	0x20001bbc

0800edb0 <__locale_mb_cur_max>:
 800edb0:	4b01      	ldr	r3, [pc, #4]	; (800edb8 <__locale_mb_cur_max+0x8>)
 800edb2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800edb6:	4770      	bx	lr
 800edb8:	2000088c 	.word	0x2000088c

0800edbc <_lseek_r>:
 800edbc:	b538      	push	{r3, r4, r5, lr}
 800edbe:	4d07      	ldr	r5, [pc, #28]	; (800eddc <_lseek_r+0x20>)
 800edc0:	4604      	mov	r4, r0
 800edc2:	4608      	mov	r0, r1
 800edc4:	4611      	mov	r1, r2
 800edc6:	2200      	movs	r2, #0
 800edc8:	602a      	str	r2, [r5, #0]
 800edca:	461a      	mov	r2, r3
 800edcc:	f7f5 f846 	bl	8003e5c <_lseek>
 800edd0:	1c43      	adds	r3, r0, #1
 800edd2:	d102      	bne.n	800edda <_lseek_r+0x1e>
 800edd4:	682b      	ldr	r3, [r5, #0]
 800edd6:	b103      	cbz	r3, 800edda <_lseek_r+0x1e>
 800edd8:	6023      	str	r3, [r4, #0]
 800edda:	bd38      	pop	{r3, r4, r5, pc}
 800eddc:	20001bbc 	.word	0x20001bbc

0800ede0 <__ascii_mbtowc>:
 800ede0:	b082      	sub	sp, #8
 800ede2:	b901      	cbnz	r1, 800ede6 <__ascii_mbtowc+0x6>
 800ede4:	a901      	add	r1, sp, #4
 800ede6:	b142      	cbz	r2, 800edfa <__ascii_mbtowc+0x1a>
 800ede8:	b14b      	cbz	r3, 800edfe <__ascii_mbtowc+0x1e>
 800edea:	7813      	ldrb	r3, [r2, #0]
 800edec:	600b      	str	r3, [r1, #0]
 800edee:	7812      	ldrb	r2, [r2, #0]
 800edf0:	1e10      	subs	r0, r2, #0
 800edf2:	bf18      	it	ne
 800edf4:	2001      	movne	r0, #1
 800edf6:	b002      	add	sp, #8
 800edf8:	4770      	bx	lr
 800edfa:	4610      	mov	r0, r2
 800edfc:	e7fb      	b.n	800edf6 <__ascii_mbtowc+0x16>
 800edfe:	f06f 0001 	mvn.w	r0, #1
 800ee02:	e7f8      	b.n	800edf6 <__ascii_mbtowc+0x16>

0800ee04 <_read_r>:
 800ee04:	b538      	push	{r3, r4, r5, lr}
 800ee06:	4d07      	ldr	r5, [pc, #28]	; (800ee24 <_read_r+0x20>)
 800ee08:	4604      	mov	r4, r0
 800ee0a:	4608      	mov	r0, r1
 800ee0c:	4611      	mov	r1, r2
 800ee0e:	2200      	movs	r2, #0
 800ee10:	602a      	str	r2, [r5, #0]
 800ee12:	461a      	mov	r2, r3
 800ee14:	f7f4 ffc2 	bl	8003d9c <_read>
 800ee18:	1c43      	adds	r3, r0, #1
 800ee1a:	d102      	bne.n	800ee22 <_read_r+0x1e>
 800ee1c:	682b      	ldr	r3, [r5, #0]
 800ee1e:	b103      	cbz	r3, 800ee22 <_read_r+0x1e>
 800ee20:	6023      	str	r3, [r4, #0]
 800ee22:	bd38      	pop	{r3, r4, r5, pc}
 800ee24:	20001bbc 	.word	0x20001bbc

0800ee28 <__swbuf_r>:
 800ee28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee2a:	460e      	mov	r6, r1
 800ee2c:	4614      	mov	r4, r2
 800ee2e:	4605      	mov	r5, r0
 800ee30:	b118      	cbz	r0, 800ee3a <__swbuf_r+0x12>
 800ee32:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ee34:	b90b      	cbnz	r3, 800ee3a <__swbuf_r+0x12>
 800ee36:	f7fd fdf5 	bl	800ca24 <__sinit>
 800ee3a:	69a3      	ldr	r3, [r4, #24]
 800ee3c:	60a3      	str	r3, [r4, #8]
 800ee3e:	89a3      	ldrh	r3, [r4, #12]
 800ee40:	0719      	lsls	r1, r3, #28
 800ee42:	d529      	bpl.n	800ee98 <__swbuf_r+0x70>
 800ee44:	6923      	ldr	r3, [r4, #16]
 800ee46:	b33b      	cbz	r3, 800ee98 <__swbuf_r+0x70>
 800ee48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee4c:	b2f6      	uxtb	r6, r6
 800ee4e:	049a      	lsls	r2, r3, #18
 800ee50:	4637      	mov	r7, r6
 800ee52:	d52a      	bpl.n	800eeaa <__swbuf_r+0x82>
 800ee54:	6823      	ldr	r3, [r4, #0]
 800ee56:	6920      	ldr	r0, [r4, #16]
 800ee58:	1a18      	subs	r0, r3, r0
 800ee5a:	6963      	ldr	r3, [r4, #20]
 800ee5c:	4283      	cmp	r3, r0
 800ee5e:	dc04      	bgt.n	800ee6a <__swbuf_r+0x42>
 800ee60:	4621      	mov	r1, r4
 800ee62:	4628      	mov	r0, r5
 800ee64:	f7fd fd72 	bl	800c94c <_fflush_r>
 800ee68:	b9e0      	cbnz	r0, 800eea4 <__swbuf_r+0x7c>
 800ee6a:	68a3      	ldr	r3, [r4, #8]
 800ee6c:	3b01      	subs	r3, #1
 800ee6e:	60a3      	str	r3, [r4, #8]
 800ee70:	6823      	ldr	r3, [r4, #0]
 800ee72:	1c5a      	adds	r2, r3, #1
 800ee74:	6022      	str	r2, [r4, #0]
 800ee76:	701e      	strb	r6, [r3, #0]
 800ee78:	6962      	ldr	r2, [r4, #20]
 800ee7a:	1c43      	adds	r3, r0, #1
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d004      	beq.n	800ee8a <__swbuf_r+0x62>
 800ee80:	89a3      	ldrh	r3, [r4, #12]
 800ee82:	07db      	lsls	r3, r3, #31
 800ee84:	d506      	bpl.n	800ee94 <__swbuf_r+0x6c>
 800ee86:	2e0a      	cmp	r6, #10
 800ee88:	d104      	bne.n	800ee94 <__swbuf_r+0x6c>
 800ee8a:	4621      	mov	r1, r4
 800ee8c:	4628      	mov	r0, r5
 800ee8e:	f7fd fd5d 	bl	800c94c <_fflush_r>
 800ee92:	b938      	cbnz	r0, 800eea4 <__swbuf_r+0x7c>
 800ee94:	4638      	mov	r0, r7
 800ee96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee98:	4621      	mov	r1, r4
 800ee9a:	4628      	mov	r0, r5
 800ee9c:	f7fc fdfe 	bl	800ba9c <__swsetup_r>
 800eea0:	2800      	cmp	r0, #0
 800eea2:	d0d1      	beq.n	800ee48 <__swbuf_r+0x20>
 800eea4:	f04f 37ff 	mov.w	r7, #4294967295
 800eea8:	e7f4      	b.n	800ee94 <__swbuf_r+0x6c>
 800eeaa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800eeae:	81a3      	strh	r3, [r4, #12]
 800eeb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eeb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eeb6:	6663      	str	r3, [r4, #100]	; 0x64
 800eeb8:	e7cc      	b.n	800ee54 <__swbuf_r+0x2c>
	...

0800eebc <_wcrtomb_r>:
 800eebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eebe:	4c09      	ldr	r4, [pc, #36]	; (800eee4 <_wcrtomb_r+0x28>)
 800eec0:	b085      	sub	sp, #20
 800eec2:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800eec6:	4605      	mov	r5, r0
 800eec8:	461e      	mov	r6, r3
 800eeca:	b909      	cbnz	r1, 800eed0 <_wcrtomb_r+0x14>
 800eecc:	460a      	mov	r2, r1
 800eece:	a901      	add	r1, sp, #4
 800eed0:	47b8      	blx	r7
 800eed2:	1c43      	adds	r3, r0, #1
 800eed4:	bf01      	itttt	eq
 800eed6:	2300      	moveq	r3, #0
 800eed8:	6033      	streq	r3, [r6, #0]
 800eeda:	238a      	moveq	r3, #138	; 0x8a
 800eedc:	602b      	streq	r3, [r5, #0]
 800eede:	b005      	add	sp, #20
 800eee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eee2:	bf00      	nop
 800eee4:	2000088c 	.word	0x2000088c

0800eee8 <__ascii_wctomb>:
 800eee8:	b149      	cbz	r1, 800eefe <__ascii_wctomb+0x16>
 800eeea:	2aff      	cmp	r2, #255	; 0xff
 800eeec:	bf85      	ittet	hi
 800eeee:	238a      	movhi	r3, #138	; 0x8a
 800eef0:	6003      	strhi	r3, [r0, #0]
 800eef2:	700a      	strbls	r2, [r1, #0]
 800eef4:	f04f 30ff 	movhi.w	r0, #4294967295
 800eef8:	bf98      	it	ls
 800eefa:	2001      	movls	r0, #1
 800eefc:	4770      	bx	lr
 800eefe:	4608      	mov	r0, r1
 800ef00:	4770      	bx	lr

0800ef02 <abort>:
 800ef02:	b508      	push	{r3, lr}
 800ef04:	2006      	movs	r0, #6
 800ef06:	f000 f82d 	bl	800ef64 <raise>
 800ef0a:	2001      	movs	r0, #1
 800ef0c:	f7f4 ff3c 	bl	8003d88 <_exit>

0800ef10 <_raise_r>:
 800ef10:	291f      	cmp	r1, #31
 800ef12:	b538      	push	{r3, r4, r5, lr}
 800ef14:	4604      	mov	r4, r0
 800ef16:	460d      	mov	r5, r1
 800ef18:	d904      	bls.n	800ef24 <_raise_r+0x14>
 800ef1a:	2316      	movs	r3, #22
 800ef1c:	6003      	str	r3, [r0, #0]
 800ef1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ef22:	bd38      	pop	{r3, r4, r5, pc}
 800ef24:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800ef28:	b112      	cbz	r2, 800ef30 <_raise_r+0x20>
 800ef2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef2e:	b94b      	cbnz	r3, 800ef44 <_raise_r+0x34>
 800ef30:	4620      	mov	r0, r4
 800ef32:	f000 f831 	bl	800ef98 <_getpid_r>
 800ef36:	462a      	mov	r2, r5
 800ef38:	4601      	mov	r1, r0
 800ef3a:	4620      	mov	r0, r4
 800ef3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef40:	f000 b818 	b.w	800ef74 <_kill_r>
 800ef44:	2b01      	cmp	r3, #1
 800ef46:	d00a      	beq.n	800ef5e <_raise_r+0x4e>
 800ef48:	1c59      	adds	r1, r3, #1
 800ef4a:	d103      	bne.n	800ef54 <_raise_r+0x44>
 800ef4c:	2316      	movs	r3, #22
 800ef4e:	6003      	str	r3, [r0, #0]
 800ef50:	2001      	movs	r0, #1
 800ef52:	e7e6      	b.n	800ef22 <_raise_r+0x12>
 800ef54:	2400      	movs	r4, #0
 800ef56:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef5a:	4628      	mov	r0, r5
 800ef5c:	4798      	blx	r3
 800ef5e:	2000      	movs	r0, #0
 800ef60:	e7df      	b.n	800ef22 <_raise_r+0x12>
	...

0800ef64 <raise>:
 800ef64:	4b02      	ldr	r3, [pc, #8]	; (800ef70 <raise+0xc>)
 800ef66:	4601      	mov	r1, r0
 800ef68:	6818      	ldr	r0, [r3, #0]
 800ef6a:	f7ff bfd1 	b.w	800ef10 <_raise_r>
 800ef6e:	bf00      	nop
 800ef70:	2000004c 	.word	0x2000004c

0800ef74 <_kill_r>:
 800ef74:	b538      	push	{r3, r4, r5, lr}
 800ef76:	4d07      	ldr	r5, [pc, #28]	; (800ef94 <_kill_r+0x20>)
 800ef78:	2300      	movs	r3, #0
 800ef7a:	4604      	mov	r4, r0
 800ef7c:	4608      	mov	r0, r1
 800ef7e:	4611      	mov	r1, r2
 800ef80:	602b      	str	r3, [r5, #0]
 800ef82:	f7f4 fef1 	bl	8003d68 <_kill>
 800ef86:	1c43      	adds	r3, r0, #1
 800ef88:	d102      	bne.n	800ef90 <_kill_r+0x1c>
 800ef8a:	682b      	ldr	r3, [r5, #0]
 800ef8c:	b103      	cbz	r3, 800ef90 <_kill_r+0x1c>
 800ef8e:	6023      	str	r3, [r4, #0]
 800ef90:	bd38      	pop	{r3, r4, r5, pc}
 800ef92:	bf00      	nop
 800ef94:	20001bbc 	.word	0x20001bbc

0800ef98 <_getpid_r>:
 800ef98:	f7f4 bede 	b.w	8003d58 <_getpid>
 800ef9c:	0000      	movs	r0, r0
	...

0800efa0 <cos>:
 800efa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800efa2:	ec53 2b10 	vmov	r2, r3, d0
 800efa6:	4824      	ldr	r0, [pc, #144]	; (800f038 <cos+0x98>)
 800efa8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800efac:	4281      	cmp	r1, r0
 800efae:	dc06      	bgt.n	800efbe <cos+0x1e>
 800efb0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800f030 <cos+0x90>
 800efb4:	f000 ffb8 	bl	800ff28 <__kernel_cos>
 800efb8:	ec51 0b10 	vmov	r0, r1, d0
 800efbc:	e007      	b.n	800efce <cos+0x2e>
 800efbe:	481f      	ldr	r0, [pc, #124]	; (800f03c <cos+0x9c>)
 800efc0:	4281      	cmp	r1, r0
 800efc2:	dd09      	ble.n	800efd8 <cos+0x38>
 800efc4:	ee10 0a10 	vmov	r0, s0
 800efc8:	4619      	mov	r1, r3
 800efca:	f7f1 f985 	bl	80002d8 <__aeabi_dsub>
 800efce:	ec41 0b10 	vmov	d0, r0, r1
 800efd2:	b005      	add	sp, #20
 800efd4:	f85d fb04 	ldr.w	pc, [sp], #4
 800efd8:	4668      	mov	r0, sp
 800efda:	f000 f951 	bl	800f280 <__ieee754_rem_pio2>
 800efde:	f000 0003 	and.w	r0, r0, #3
 800efe2:	2801      	cmp	r0, #1
 800efe4:	d007      	beq.n	800eff6 <cos+0x56>
 800efe6:	2802      	cmp	r0, #2
 800efe8:	d012      	beq.n	800f010 <cos+0x70>
 800efea:	b9c0      	cbnz	r0, 800f01e <cos+0x7e>
 800efec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eff0:	ed9d 0b00 	vldr	d0, [sp]
 800eff4:	e7de      	b.n	800efb4 <cos+0x14>
 800eff6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800effa:	ed9d 0b00 	vldr	d0, [sp]
 800effe:	f001 fb9b 	bl	8010738 <__kernel_sin>
 800f002:	ec53 2b10 	vmov	r2, r3, d0
 800f006:	ee10 0a10 	vmov	r0, s0
 800f00a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f00e:	e7de      	b.n	800efce <cos+0x2e>
 800f010:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f014:	ed9d 0b00 	vldr	d0, [sp]
 800f018:	f000 ff86 	bl	800ff28 <__kernel_cos>
 800f01c:	e7f1      	b.n	800f002 <cos+0x62>
 800f01e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f022:	ed9d 0b00 	vldr	d0, [sp]
 800f026:	2001      	movs	r0, #1
 800f028:	f001 fb86 	bl	8010738 <__kernel_sin>
 800f02c:	e7c4      	b.n	800efb8 <cos+0x18>
 800f02e:	bf00      	nop
	...
 800f038:	3fe921fb 	.word	0x3fe921fb
 800f03c:	7fefffff 	.word	0x7fefffff

0800f040 <sin>:
 800f040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f042:	ec53 2b10 	vmov	r2, r3, d0
 800f046:	4826      	ldr	r0, [pc, #152]	; (800f0e0 <sin+0xa0>)
 800f048:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f04c:	4281      	cmp	r1, r0
 800f04e:	dc07      	bgt.n	800f060 <sin+0x20>
 800f050:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800f0d8 <sin+0x98>
 800f054:	2000      	movs	r0, #0
 800f056:	f001 fb6f 	bl	8010738 <__kernel_sin>
 800f05a:	ec51 0b10 	vmov	r0, r1, d0
 800f05e:	e007      	b.n	800f070 <sin+0x30>
 800f060:	4820      	ldr	r0, [pc, #128]	; (800f0e4 <sin+0xa4>)
 800f062:	4281      	cmp	r1, r0
 800f064:	dd09      	ble.n	800f07a <sin+0x3a>
 800f066:	ee10 0a10 	vmov	r0, s0
 800f06a:	4619      	mov	r1, r3
 800f06c:	f7f1 f934 	bl	80002d8 <__aeabi_dsub>
 800f070:	ec41 0b10 	vmov	d0, r0, r1
 800f074:	b005      	add	sp, #20
 800f076:	f85d fb04 	ldr.w	pc, [sp], #4
 800f07a:	4668      	mov	r0, sp
 800f07c:	f000 f900 	bl	800f280 <__ieee754_rem_pio2>
 800f080:	f000 0003 	and.w	r0, r0, #3
 800f084:	2801      	cmp	r0, #1
 800f086:	d008      	beq.n	800f09a <sin+0x5a>
 800f088:	2802      	cmp	r0, #2
 800f08a:	d00d      	beq.n	800f0a8 <sin+0x68>
 800f08c:	b9d0      	cbnz	r0, 800f0c4 <sin+0x84>
 800f08e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f092:	ed9d 0b00 	vldr	d0, [sp]
 800f096:	2001      	movs	r0, #1
 800f098:	e7dd      	b.n	800f056 <sin+0x16>
 800f09a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f09e:	ed9d 0b00 	vldr	d0, [sp]
 800f0a2:	f000 ff41 	bl	800ff28 <__kernel_cos>
 800f0a6:	e7d8      	b.n	800f05a <sin+0x1a>
 800f0a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f0ac:	ed9d 0b00 	vldr	d0, [sp]
 800f0b0:	2001      	movs	r0, #1
 800f0b2:	f001 fb41 	bl	8010738 <__kernel_sin>
 800f0b6:	ec53 2b10 	vmov	r2, r3, d0
 800f0ba:	ee10 0a10 	vmov	r0, s0
 800f0be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f0c2:	e7d5      	b.n	800f070 <sin+0x30>
 800f0c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f0c8:	ed9d 0b00 	vldr	d0, [sp]
 800f0cc:	f000 ff2c 	bl	800ff28 <__kernel_cos>
 800f0d0:	e7f1      	b.n	800f0b6 <sin+0x76>
 800f0d2:	bf00      	nop
 800f0d4:	f3af 8000 	nop.w
	...
 800f0e0:	3fe921fb 	.word	0x3fe921fb
 800f0e4:	7fefffff 	.word	0x7fefffff

0800f0e8 <asinf>:
 800f0e8:	b508      	push	{r3, lr}
 800f0ea:	ed2d 8b02 	vpush	{d8}
 800f0ee:	eeb0 8a40 	vmov.f32	s16, s0
 800f0f2:	f000 facf 	bl	800f694 <__ieee754_asinf>
 800f0f6:	4b13      	ldr	r3, [pc, #76]	; (800f144 <asinf+0x5c>)
 800f0f8:	f993 3000 	ldrsb.w	r3, [r3]
 800f0fc:	3301      	adds	r3, #1
 800f0fe:	eef0 8a40 	vmov.f32	s17, s0
 800f102:	d01a      	beq.n	800f13a <asinf+0x52>
 800f104:	eeb4 8a48 	vcmp.f32	s16, s16
 800f108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f10c:	d615      	bvs.n	800f13a <asinf+0x52>
 800f10e:	eeb0 0a48 	vmov.f32	s0, s16
 800f112:	f001 fdb3 	bl	8010c7c <fabsf>
 800f116:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f11a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f11e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f122:	dd0a      	ble.n	800f13a <asinf+0x52>
 800f124:	f7fb f9b0 	bl	800a488 <__errno>
 800f128:	ecbd 8b02 	vpop	{d8}
 800f12c:	2321      	movs	r3, #33	; 0x21
 800f12e:	6003      	str	r3, [r0, #0]
 800f130:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f134:	4804      	ldr	r0, [pc, #16]	; (800f148 <asinf+0x60>)
 800f136:	f001 bdb5 	b.w	8010ca4 <nanf>
 800f13a:	eeb0 0a68 	vmov.f32	s0, s17
 800f13e:	ecbd 8b02 	vpop	{d8}
 800f142:	bd08      	pop	{r3, pc}
 800f144:	200009f8 	.word	0x200009f8
 800f148:	08011147 	.word	0x08011147

0800f14c <atan2f>:
 800f14c:	f000 bb88 	b.w	800f860 <__ieee754_atan2f>

0800f150 <powf>:
 800f150:	b508      	push	{r3, lr}
 800f152:	ed2d 8b04 	vpush	{d8-d9}
 800f156:	eeb0 9a40 	vmov.f32	s18, s0
 800f15a:	eef0 8a60 	vmov.f32	s17, s1
 800f15e:	f000 fc1f 	bl	800f9a0 <__ieee754_powf>
 800f162:	4b43      	ldr	r3, [pc, #268]	; (800f270 <powf+0x120>)
 800f164:	f993 3000 	ldrsb.w	r3, [r3]
 800f168:	3301      	adds	r3, #1
 800f16a:	eeb0 8a40 	vmov.f32	s16, s0
 800f16e:	d012      	beq.n	800f196 <powf+0x46>
 800f170:	eef4 8a68 	vcmp.f32	s17, s17
 800f174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f178:	d60d      	bvs.n	800f196 <powf+0x46>
 800f17a:	eeb4 9a49 	vcmp.f32	s18, s18
 800f17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f182:	d70d      	bvc.n	800f1a0 <powf+0x50>
 800f184:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f18c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f190:	bf08      	it	eq
 800f192:	eeb0 8a67 	vmoveq.f32	s16, s15
 800f196:	eeb0 0a48 	vmov.f32	s0, s16
 800f19a:	ecbd 8b04 	vpop	{d8-d9}
 800f19e:	bd08      	pop	{r3, pc}
 800f1a0:	eddf 9a34 	vldr	s19, [pc, #208]	; 800f274 <powf+0x124>
 800f1a4:	eeb4 9a69 	vcmp.f32	s18, s19
 800f1a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ac:	d116      	bne.n	800f1dc <powf+0x8c>
 800f1ae:	eef4 8a69 	vcmp.f32	s17, s19
 800f1b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1b6:	d057      	beq.n	800f268 <powf+0x118>
 800f1b8:	eeb0 0a68 	vmov.f32	s0, s17
 800f1bc:	f001 fd65 	bl	8010c8a <finitef>
 800f1c0:	2800      	cmp	r0, #0
 800f1c2:	d0e8      	beq.n	800f196 <powf+0x46>
 800f1c4:	eef4 8ae9 	vcmpe.f32	s17, s19
 800f1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1cc:	d5e3      	bpl.n	800f196 <powf+0x46>
 800f1ce:	f7fb f95b 	bl	800a488 <__errno>
 800f1d2:	2321      	movs	r3, #33	; 0x21
 800f1d4:	6003      	str	r3, [r0, #0]
 800f1d6:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800f278 <powf+0x128>
 800f1da:	e7dc      	b.n	800f196 <powf+0x46>
 800f1dc:	f001 fd55 	bl	8010c8a <finitef>
 800f1e0:	bb50      	cbnz	r0, 800f238 <powf+0xe8>
 800f1e2:	eeb0 0a49 	vmov.f32	s0, s18
 800f1e6:	f001 fd50 	bl	8010c8a <finitef>
 800f1ea:	b328      	cbz	r0, 800f238 <powf+0xe8>
 800f1ec:	eeb0 0a68 	vmov.f32	s0, s17
 800f1f0:	f001 fd4b 	bl	8010c8a <finitef>
 800f1f4:	b300      	cbz	r0, 800f238 <powf+0xe8>
 800f1f6:	eeb4 8a48 	vcmp.f32	s16, s16
 800f1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1fe:	d706      	bvc.n	800f20e <powf+0xbe>
 800f200:	f7fb f942 	bl	800a488 <__errno>
 800f204:	2321      	movs	r3, #33	; 0x21
 800f206:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800f20a:	6003      	str	r3, [r0, #0]
 800f20c:	e7c3      	b.n	800f196 <powf+0x46>
 800f20e:	f7fb f93b 	bl	800a488 <__errno>
 800f212:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800f216:	2322      	movs	r3, #34	; 0x22
 800f218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f21c:	6003      	str	r3, [r0, #0]
 800f21e:	d508      	bpl.n	800f232 <powf+0xe2>
 800f220:	eeb0 0a68 	vmov.f32	s0, s17
 800f224:	f001 fd44 	bl	8010cb0 <rintf>
 800f228:	eeb4 0a68 	vcmp.f32	s0, s17
 800f22c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f230:	d1d1      	bne.n	800f1d6 <powf+0x86>
 800f232:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800f27c <powf+0x12c>
 800f236:	e7ae      	b.n	800f196 <powf+0x46>
 800f238:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f23c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f240:	d1a9      	bne.n	800f196 <powf+0x46>
 800f242:	eeb0 0a49 	vmov.f32	s0, s18
 800f246:	f001 fd20 	bl	8010c8a <finitef>
 800f24a:	2800      	cmp	r0, #0
 800f24c:	d0a3      	beq.n	800f196 <powf+0x46>
 800f24e:	eeb0 0a68 	vmov.f32	s0, s17
 800f252:	f001 fd1a 	bl	8010c8a <finitef>
 800f256:	2800      	cmp	r0, #0
 800f258:	d09d      	beq.n	800f196 <powf+0x46>
 800f25a:	f7fb f915 	bl	800a488 <__errno>
 800f25e:	2322      	movs	r3, #34	; 0x22
 800f260:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800f274 <powf+0x124>
 800f264:	6003      	str	r3, [r0, #0]
 800f266:	e796      	b.n	800f196 <powf+0x46>
 800f268:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f26c:	e793      	b.n	800f196 <powf+0x46>
 800f26e:	bf00      	nop
 800f270:	200009f8 	.word	0x200009f8
 800f274:	00000000 	.word	0x00000000
 800f278:	ff800000 	.word	0xff800000
 800f27c:	7f800000 	.word	0x7f800000

0800f280 <__ieee754_rem_pio2>:
 800f280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f284:	ed2d 8b02 	vpush	{d8}
 800f288:	ec55 4b10 	vmov	r4, r5, d0
 800f28c:	4bca      	ldr	r3, [pc, #808]	; (800f5b8 <__ieee754_rem_pio2+0x338>)
 800f28e:	b08b      	sub	sp, #44	; 0x2c
 800f290:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f294:	4598      	cmp	r8, r3
 800f296:	4682      	mov	sl, r0
 800f298:	9502      	str	r5, [sp, #8]
 800f29a:	dc08      	bgt.n	800f2ae <__ieee754_rem_pio2+0x2e>
 800f29c:	2200      	movs	r2, #0
 800f29e:	2300      	movs	r3, #0
 800f2a0:	ed80 0b00 	vstr	d0, [r0]
 800f2a4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f2a8:	f04f 0b00 	mov.w	fp, #0
 800f2ac:	e028      	b.n	800f300 <__ieee754_rem_pio2+0x80>
 800f2ae:	4bc3      	ldr	r3, [pc, #780]	; (800f5bc <__ieee754_rem_pio2+0x33c>)
 800f2b0:	4598      	cmp	r8, r3
 800f2b2:	dc78      	bgt.n	800f3a6 <__ieee754_rem_pio2+0x126>
 800f2b4:	9b02      	ldr	r3, [sp, #8]
 800f2b6:	4ec2      	ldr	r6, [pc, #776]	; (800f5c0 <__ieee754_rem_pio2+0x340>)
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	ee10 0a10 	vmov	r0, s0
 800f2be:	a3b0      	add	r3, pc, #704	; (adr r3, 800f580 <__ieee754_rem_pio2+0x300>)
 800f2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c4:	4629      	mov	r1, r5
 800f2c6:	dd39      	ble.n	800f33c <__ieee754_rem_pio2+0xbc>
 800f2c8:	f7f1 f806 	bl	80002d8 <__aeabi_dsub>
 800f2cc:	45b0      	cmp	r8, r6
 800f2ce:	4604      	mov	r4, r0
 800f2d0:	460d      	mov	r5, r1
 800f2d2:	d01b      	beq.n	800f30c <__ieee754_rem_pio2+0x8c>
 800f2d4:	a3ac      	add	r3, pc, #688	; (adr r3, 800f588 <__ieee754_rem_pio2+0x308>)
 800f2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2da:	f7f0 fffd 	bl	80002d8 <__aeabi_dsub>
 800f2de:	4602      	mov	r2, r0
 800f2e0:	460b      	mov	r3, r1
 800f2e2:	e9ca 2300 	strd	r2, r3, [sl]
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	4629      	mov	r1, r5
 800f2ea:	f7f0 fff5 	bl	80002d8 <__aeabi_dsub>
 800f2ee:	a3a6      	add	r3, pc, #664	; (adr r3, 800f588 <__ieee754_rem_pio2+0x308>)
 800f2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f4:	f7f0 fff0 	bl	80002d8 <__aeabi_dsub>
 800f2f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f2fc:	f04f 0b01 	mov.w	fp, #1
 800f300:	4658      	mov	r0, fp
 800f302:	b00b      	add	sp, #44	; 0x2c
 800f304:	ecbd 8b02 	vpop	{d8}
 800f308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f30c:	a3a0      	add	r3, pc, #640	; (adr r3, 800f590 <__ieee754_rem_pio2+0x310>)
 800f30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f312:	f7f0 ffe1 	bl	80002d8 <__aeabi_dsub>
 800f316:	a3a0      	add	r3, pc, #640	; (adr r3, 800f598 <__ieee754_rem_pio2+0x318>)
 800f318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f31c:	4604      	mov	r4, r0
 800f31e:	460d      	mov	r5, r1
 800f320:	f7f0 ffda 	bl	80002d8 <__aeabi_dsub>
 800f324:	4602      	mov	r2, r0
 800f326:	460b      	mov	r3, r1
 800f328:	e9ca 2300 	strd	r2, r3, [sl]
 800f32c:	4620      	mov	r0, r4
 800f32e:	4629      	mov	r1, r5
 800f330:	f7f0 ffd2 	bl	80002d8 <__aeabi_dsub>
 800f334:	a398      	add	r3, pc, #608	; (adr r3, 800f598 <__ieee754_rem_pio2+0x318>)
 800f336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f33a:	e7db      	b.n	800f2f4 <__ieee754_rem_pio2+0x74>
 800f33c:	f7f0 ffce 	bl	80002dc <__adddf3>
 800f340:	45b0      	cmp	r8, r6
 800f342:	4604      	mov	r4, r0
 800f344:	460d      	mov	r5, r1
 800f346:	d016      	beq.n	800f376 <__ieee754_rem_pio2+0xf6>
 800f348:	a38f      	add	r3, pc, #572	; (adr r3, 800f588 <__ieee754_rem_pio2+0x308>)
 800f34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f34e:	f7f0 ffc5 	bl	80002dc <__adddf3>
 800f352:	4602      	mov	r2, r0
 800f354:	460b      	mov	r3, r1
 800f356:	e9ca 2300 	strd	r2, r3, [sl]
 800f35a:	4620      	mov	r0, r4
 800f35c:	4629      	mov	r1, r5
 800f35e:	f7f0 ffbb 	bl	80002d8 <__aeabi_dsub>
 800f362:	a389      	add	r3, pc, #548	; (adr r3, 800f588 <__ieee754_rem_pio2+0x308>)
 800f364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f368:	f7f0 ffb8 	bl	80002dc <__adddf3>
 800f36c:	f04f 3bff 	mov.w	fp, #4294967295
 800f370:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f374:	e7c4      	b.n	800f300 <__ieee754_rem_pio2+0x80>
 800f376:	a386      	add	r3, pc, #536	; (adr r3, 800f590 <__ieee754_rem_pio2+0x310>)
 800f378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f37c:	f7f0 ffae 	bl	80002dc <__adddf3>
 800f380:	a385      	add	r3, pc, #532	; (adr r3, 800f598 <__ieee754_rem_pio2+0x318>)
 800f382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f386:	4604      	mov	r4, r0
 800f388:	460d      	mov	r5, r1
 800f38a:	f7f0 ffa7 	bl	80002dc <__adddf3>
 800f38e:	4602      	mov	r2, r0
 800f390:	460b      	mov	r3, r1
 800f392:	e9ca 2300 	strd	r2, r3, [sl]
 800f396:	4620      	mov	r0, r4
 800f398:	4629      	mov	r1, r5
 800f39a:	f7f0 ff9d 	bl	80002d8 <__aeabi_dsub>
 800f39e:	a37e      	add	r3, pc, #504	; (adr r3, 800f598 <__ieee754_rem_pio2+0x318>)
 800f3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a4:	e7e0      	b.n	800f368 <__ieee754_rem_pio2+0xe8>
 800f3a6:	4b87      	ldr	r3, [pc, #540]	; (800f5c4 <__ieee754_rem_pio2+0x344>)
 800f3a8:	4598      	cmp	r8, r3
 800f3aa:	f300 80d9 	bgt.w	800f560 <__ieee754_rem_pio2+0x2e0>
 800f3ae:	f001 fa81 	bl	80108b4 <fabs>
 800f3b2:	ec55 4b10 	vmov	r4, r5, d0
 800f3b6:	ee10 0a10 	vmov	r0, s0
 800f3ba:	a379      	add	r3, pc, #484	; (adr r3, 800f5a0 <__ieee754_rem_pio2+0x320>)
 800f3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c0:	4629      	mov	r1, r5
 800f3c2:	f7f1 f941 	bl	8000648 <__aeabi_dmul>
 800f3c6:	4b80      	ldr	r3, [pc, #512]	; (800f5c8 <__ieee754_rem_pio2+0x348>)
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	f7f0 ff87 	bl	80002dc <__adddf3>
 800f3ce:	f7f1 fbeb 	bl	8000ba8 <__aeabi_d2iz>
 800f3d2:	4683      	mov	fp, r0
 800f3d4:	f7f1 f8ce 	bl	8000574 <__aeabi_i2d>
 800f3d8:	4602      	mov	r2, r0
 800f3da:	460b      	mov	r3, r1
 800f3dc:	ec43 2b18 	vmov	d8, r2, r3
 800f3e0:	a367      	add	r3, pc, #412	; (adr r3, 800f580 <__ieee754_rem_pio2+0x300>)
 800f3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e6:	f7f1 f92f 	bl	8000648 <__aeabi_dmul>
 800f3ea:	4602      	mov	r2, r0
 800f3ec:	460b      	mov	r3, r1
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	4629      	mov	r1, r5
 800f3f2:	f7f0 ff71 	bl	80002d8 <__aeabi_dsub>
 800f3f6:	a364      	add	r3, pc, #400	; (adr r3, 800f588 <__ieee754_rem_pio2+0x308>)
 800f3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3fc:	4606      	mov	r6, r0
 800f3fe:	460f      	mov	r7, r1
 800f400:	ec51 0b18 	vmov	r0, r1, d8
 800f404:	f7f1 f920 	bl	8000648 <__aeabi_dmul>
 800f408:	f1bb 0f1f 	cmp.w	fp, #31
 800f40c:	4604      	mov	r4, r0
 800f40e:	460d      	mov	r5, r1
 800f410:	dc0d      	bgt.n	800f42e <__ieee754_rem_pio2+0x1ae>
 800f412:	4b6e      	ldr	r3, [pc, #440]	; (800f5cc <__ieee754_rem_pio2+0x34c>)
 800f414:	f10b 32ff 	add.w	r2, fp, #4294967295
 800f418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f41c:	4543      	cmp	r3, r8
 800f41e:	d006      	beq.n	800f42e <__ieee754_rem_pio2+0x1ae>
 800f420:	4622      	mov	r2, r4
 800f422:	462b      	mov	r3, r5
 800f424:	4630      	mov	r0, r6
 800f426:	4639      	mov	r1, r7
 800f428:	f7f0 ff56 	bl	80002d8 <__aeabi_dsub>
 800f42c:	e00f      	b.n	800f44e <__ieee754_rem_pio2+0x1ce>
 800f42e:	462b      	mov	r3, r5
 800f430:	4622      	mov	r2, r4
 800f432:	4630      	mov	r0, r6
 800f434:	4639      	mov	r1, r7
 800f436:	f7f0 ff4f 	bl	80002d8 <__aeabi_dsub>
 800f43a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f43e:	9303      	str	r3, [sp, #12]
 800f440:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f444:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800f448:	f1b8 0f10 	cmp.w	r8, #16
 800f44c:	dc02      	bgt.n	800f454 <__ieee754_rem_pio2+0x1d4>
 800f44e:	e9ca 0100 	strd	r0, r1, [sl]
 800f452:	e039      	b.n	800f4c8 <__ieee754_rem_pio2+0x248>
 800f454:	a34e      	add	r3, pc, #312	; (adr r3, 800f590 <__ieee754_rem_pio2+0x310>)
 800f456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f45a:	ec51 0b18 	vmov	r0, r1, d8
 800f45e:	f7f1 f8f3 	bl	8000648 <__aeabi_dmul>
 800f462:	4604      	mov	r4, r0
 800f464:	460d      	mov	r5, r1
 800f466:	4602      	mov	r2, r0
 800f468:	460b      	mov	r3, r1
 800f46a:	4630      	mov	r0, r6
 800f46c:	4639      	mov	r1, r7
 800f46e:	f7f0 ff33 	bl	80002d8 <__aeabi_dsub>
 800f472:	4602      	mov	r2, r0
 800f474:	460b      	mov	r3, r1
 800f476:	4680      	mov	r8, r0
 800f478:	4689      	mov	r9, r1
 800f47a:	4630      	mov	r0, r6
 800f47c:	4639      	mov	r1, r7
 800f47e:	f7f0 ff2b 	bl	80002d8 <__aeabi_dsub>
 800f482:	4622      	mov	r2, r4
 800f484:	462b      	mov	r3, r5
 800f486:	f7f0 ff27 	bl	80002d8 <__aeabi_dsub>
 800f48a:	a343      	add	r3, pc, #268	; (adr r3, 800f598 <__ieee754_rem_pio2+0x318>)
 800f48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f490:	4604      	mov	r4, r0
 800f492:	460d      	mov	r5, r1
 800f494:	ec51 0b18 	vmov	r0, r1, d8
 800f498:	f7f1 f8d6 	bl	8000648 <__aeabi_dmul>
 800f49c:	4622      	mov	r2, r4
 800f49e:	462b      	mov	r3, r5
 800f4a0:	f7f0 ff1a 	bl	80002d8 <__aeabi_dsub>
 800f4a4:	4602      	mov	r2, r0
 800f4a6:	460b      	mov	r3, r1
 800f4a8:	4604      	mov	r4, r0
 800f4aa:	460d      	mov	r5, r1
 800f4ac:	4640      	mov	r0, r8
 800f4ae:	4649      	mov	r1, r9
 800f4b0:	f7f0 ff12 	bl	80002d8 <__aeabi_dsub>
 800f4b4:	9a03      	ldr	r2, [sp, #12]
 800f4b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f4ba:	1ad3      	subs	r3, r2, r3
 800f4bc:	2b31      	cmp	r3, #49	; 0x31
 800f4be:	dc24      	bgt.n	800f50a <__ieee754_rem_pio2+0x28a>
 800f4c0:	e9ca 0100 	strd	r0, r1, [sl]
 800f4c4:	4646      	mov	r6, r8
 800f4c6:	464f      	mov	r7, r9
 800f4c8:	e9da 8900 	ldrd	r8, r9, [sl]
 800f4cc:	4630      	mov	r0, r6
 800f4ce:	4642      	mov	r2, r8
 800f4d0:	464b      	mov	r3, r9
 800f4d2:	4639      	mov	r1, r7
 800f4d4:	f7f0 ff00 	bl	80002d8 <__aeabi_dsub>
 800f4d8:	462b      	mov	r3, r5
 800f4da:	4622      	mov	r2, r4
 800f4dc:	f7f0 fefc 	bl	80002d8 <__aeabi_dsub>
 800f4e0:	9b02      	ldr	r3, [sp, #8]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f4e8:	f6bf af0a 	bge.w	800f300 <__ieee754_rem_pio2+0x80>
 800f4ec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f4f0:	f8ca 3004 	str.w	r3, [sl, #4]
 800f4f4:	f8ca 8000 	str.w	r8, [sl]
 800f4f8:	f8ca 0008 	str.w	r0, [sl, #8]
 800f4fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f500:	f8ca 300c 	str.w	r3, [sl, #12]
 800f504:	f1cb 0b00 	rsb	fp, fp, #0
 800f508:	e6fa      	b.n	800f300 <__ieee754_rem_pio2+0x80>
 800f50a:	a327      	add	r3, pc, #156	; (adr r3, 800f5a8 <__ieee754_rem_pio2+0x328>)
 800f50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f510:	ec51 0b18 	vmov	r0, r1, d8
 800f514:	f7f1 f898 	bl	8000648 <__aeabi_dmul>
 800f518:	4604      	mov	r4, r0
 800f51a:	460d      	mov	r5, r1
 800f51c:	4602      	mov	r2, r0
 800f51e:	460b      	mov	r3, r1
 800f520:	4640      	mov	r0, r8
 800f522:	4649      	mov	r1, r9
 800f524:	f7f0 fed8 	bl	80002d8 <__aeabi_dsub>
 800f528:	4602      	mov	r2, r0
 800f52a:	460b      	mov	r3, r1
 800f52c:	4606      	mov	r6, r0
 800f52e:	460f      	mov	r7, r1
 800f530:	4640      	mov	r0, r8
 800f532:	4649      	mov	r1, r9
 800f534:	f7f0 fed0 	bl	80002d8 <__aeabi_dsub>
 800f538:	4622      	mov	r2, r4
 800f53a:	462b      	mov	r3, r5
 800f53c:	f7f0 fecc 	bl	80002d8 <__aeabi_dsub>
 800f540:	a31b      	add	r3, pc, #108	; (adr r3, 800f5b0 <__ieee754_rem_pio2+0x330>)
 800f542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f546:	4604      	mov	r4, r0
 800f548:	460d      	mov	r5, r1
 800f54a:	ec51 0b18 	vmov	r0, r1, d8
 800f54e:	f7f1 f87b 	bl	8000648 <__aeabi_dmul>
 800f552:	4622      	mov	r2, r4
 800f554:	462b      	mov	r3, r5
 800f556:	f7f0 febf 	bl	80002d8 <__aeabi_dsub>
 800f55a:	4604      	mov	r4, r0
 800f55c:	460d      	mov	r5, r1
 800f55e:	e75f      	b.n	800f420 <__ieee754_rem_pio2+0x1a0>
 800f560:	4b1b      	ldr	r3, [pc, #108]	; (800f5d0 <__ieee754_rem_pio2+0x350>)
 800f562:	4598      	cmp	r8, r3
 800f564:	dd36      	ble.n	800f5d4 <__ieee754_rem_pio2+0x354>
 800f566:	ee10 2a10 	vmov	r2, s0
 800f56a:	462b      	mov	r3, r5
 800f56c:	4620      	mov	r0, r4
 800f56e:	4629      	mov	r1, r5
 800f570:	f7f0 feb2 	bl	80002d8 <__aeabi_dsub>
 800f574:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f578:	e9ca 0100 	strd	r0, r1, [sl]
 800f57c:	e694      	b.n	800f2a8 <__ieee754_rem_pio2+0x28>
 800f57e:	bf00      	nop
 800f580:	54400000 	.word	0x54400000
 800f584:	3ff921fb 	.word	0x3ff921fb
 800f588:	1a626331 	.word	0x1a626331
 800f58c:	3dd0b461 	.word	0x3dd0b461
 800f590:	1a600000 	.word	0x1a600000
 800f594:	3dd0b461 	.word	0x3dd0b461
 800f598:	2e037073 	.word	0x2e037073
 800f59c:	3ba3198a 	.word	0x3ba3198a
 800f5a0:	6dc9c883 	.word	0x6dc9c883
 800f5a4:	3fe45f30 	.word	0x3fe45f30
 800f5a8:	2e000000 	.word	0x2e000000
 800f5ac:	3ba3198a 	.word	0x3ba3198a
 800f5b0:	252049c1 	.word	0x252049c1
 800f5b4:	397b839a 	.word	0x397b839a
 800f5b8:	3fe921fb 	.word	0x3fe921fb
 800f5bc:	4002d97b 	.word	0x4002d97b
 800f5c0:	3ff921fb 	.word	0x3ff921fb
 800f5c4:	413921fb 	.word	0x413921fb
 800f5c8:	3fe00000 	.word	0x3fe00000
 800f5cc:	08011254 	.word	0x08011254
 800f5d0:	7fefffff 	.word	0x7fefffff
 800f5d4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800f5d8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800f5dc:	ee10 0a10 	vmov	r0, s0
 800f5e0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800f5e4:	ee10 6a10 	vmov	r6, s0
 800f5e8:	460f      	mov	r7, r1
 800f5ea:	f7f1 fadd 	bl	8000ba8 <__aeabi_d2iz>
 800f5ee:	f7f0 ffc1 	bl	8000574 <__aeabi_i2d>
 800f5f2:	4602      	mov	r2, r0
 800f5f4:	460b      	mov	r3, r1
 800f5f6:	4630      	mov	r0, r6
 800f5f8:	4639      	mov	r1, r7
 800f5fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f5fe:	f7f0 fe6b 	bl	80002d8 <__aeabi_dsub>
 800f602:	4b22      	ldr	r3, [pc, #136]	; (800f68c <__ieee754_rem_pio2+0x40c>)
 800f604:	2200      	movs	r2, #0
 800f606:	f7f1 f81f 	bl	8000648 <__aeabi_dmul>
 800f60a:	460f      	mov	r7, r1
 800f60c:	4606      	mov	r6, r0
 800f60e:	f7f1 facb 	bl	8000ba8 <__aeabi_d2iz>
 800f612:	f7f0 ffaf 	bl	8000574 <__aeabi_i2d>
 800f616:	4602      	mov	r2, r0
 800f618:	460b      	mov	r3, r1
 800f61a:	4630      	mov	r0, r6
 800f61c:	4639      	mov	r1, r7
 800f61e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f622:	f7f0 fe59 	bl	80002d8 <__aeabi_dsub>
 800f626:	4b19      	ldr	r3, [pc, #100]	; (800f68c <__ieee754_rem_pio2+0x40c>)
 800f628:	2200      	movs	r2, #0
 800f62a:	f7f1 f80d 	bl	8000648 <__aeabi_dmul>
 800f62e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f632:	ad04      	add	r5, sp, #16
 800f634:	f04f 0803 	mov.w	r8, #3
 800f638:	46a9      	mov	r9, r5
 800f63a:	2600      	movs	r6, #0
 800f63c:	2700      	movs	r7, #0
 800f63e:	4632      	mov	r2, r6
 800f640:	463b      	mov	r3, r7
 800f642:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800f646:	46c3      	mov	fp, r8
 800f648:	3d08      	subs	r5, #8
 800f64a:	f108 38ff 	add.w	r8, r8, #4294967295
 800f64e:	f7f1 fa63 	bl	8000b18 <__aeabi_dcmpeq>
 800f652:	2800      	cmp	r0, #0
 800f654:	d1f3      	bne.n	800f63e <__ieee754_rem_pio2+0x3be>
 800f656:	4b0e      	ldr	r3, [pc, #56]	; (800f690 <__ieee754_rem_pio2+0x410>)
 800f658:	9301      	str	r3, [sp, #4]
 800f65a:	2302      	movs	r3, #2
 800f65c:	9300      	str	r3, [sp, #0]
 800f65e:	4622      	mov	r2, r4
 800f660:	465b      	mov	r3, fp
 800f662:	4651      	mov	r1, sl
 800f664:	4648      	mov	r0, r9
 800f666:	f000 fd27 	bl	80100b8 <__kernel_rem_pio2>
 800f66a:	9b02      	ldr	r3, [sp, #8]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	4683      	mov	fp, r0
 800f670:	f6bf ae46 	bge.w	800f300 <__ieee754_rem_pio2+0x80>
 800f674:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f678:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f67c:	f8ca 3004 	str.w	r3, [sl, #4]
 800f680:	f8da 300c 	ldr.w	r3, [sl, #12]
 800f684:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f688:	e73a      	b.n	800f500 <__ieee754_rem_pio2+0x280>
 800f68a:	bf00      	nop
 800f68c:	41700000 	.word	0x41700000
 800f690:	080112d4 	.word	0x080112d4

0800f694 <__ieee754_asinf>:
 800f694:	b538      	push	{r3, r4, r5, lr}
 800f696:	ee10 5a10 	vmov	r5, s0
 800f69a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800f69e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f6a2:	ed2d 8b04 	vpush	{d8-d9}
 800f6a6:	d10c      	bne.n	800f6c2 <__ieee754_asinf+0x2e>
 800f6a8:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800f820 <__ieee754_asinf+0x18c>
 800f6ac:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800f824 <__ieee754_asinf+0x190>
 800f6b0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f6b4:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f6b8:	eeb0 0a67 	vmov.f32	s0, s15
 800f6bc:	ecbd 8b04 	vpop	{d8-d9}
 800f6c0:	bd38      	pop	{r3, r4, r5, pc}
 800f6c2:	dd04      	ble.n	800f6ce <__ieee754_asinf+0x3a>
 800f6c4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f6c8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f6cc:	e7f6      	b.n	800f6bc <__ieee754_asinf+0x28>
 800f6ce:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800f6d2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800f6d6:	da0b      	bge.n	800f6f0 <__ieee754_asinf+0x5c>
 800f6d8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800f6dc:	da52      	bge.n	800f784 <__ieee754_asinf+0xf0>
 800f6de:	eddf 7a52 	vldr	s15, [pc, #328]	; 800f828 <__ieee754_asinf+0x194>
 800f6e2:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f6e6:	eef4 7ae8 	vcmpe.f32	s15, s17
 800f6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6ee:	dce5      	bgt.n	800f6bc <__ieee754_asinf+0x28>
 800f6f0:	f001 fac4 	bl	8010c7c <fabsf>
 800f6f4:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800f6f8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800f6fc:	ee20 8a08 	vmul.f32	s16, s0, s16
 800f700:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800f82c <__ieee754_asinf+0x198>
 800f704:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800f830 <__ieee754_asinf+0x19c>
 800f708:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800f834 <__ieee754_asinf+0x1a0>
 800f70c:	eea8 7a27 	vfma.f32	s14, s16, s15
 800f710:	eddf 7a49 	vldr	s15, [pc, #292]	; 800f838 <__ieee754_asinf+0x1a4>
 800f714:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f718:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800f83c <__ieee754_asinf+0x1a8>
 800f71c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800f720:	eddf 7a47 	vldr	s15, [pc, #284]	; 800f840 <__ieee754_asinf+0x1ac>
 800f724:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f728:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800f844 <__ieee754_asinf+0x1b0>
 800f72c:	eea7 9a88 	vfma.f32	s18, s15, s16
 800f730:	eddf 7a45 	vldr	s15, [pc, #276]	; 800f848 <__ieee754_asinf+0x1b4>
 800f734:	eee8 7a07 	vfma.f32	s15, s16, s14
 800f738:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800f84c <__ieee754_asinf+0x1b8>
 800f73c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800f740:	eddf 7a43 	vldr	s15, [pc, #268]	; 800f850 <__ieee754_asinf+0x1bc>
 800f744:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f748:	eeb0 0a48 	vmov.f32	s0, s16
 800f74c:	eee7 8a88 	vfma.f32	s17, s15, s16
 800f750:	f000 fbe6 	bl	800ff20 <__ieee754_sqrtf>
 800f754:	4b3f      	ldr	r3, [pc, #252]	; (800f854 <__ieee754_asinf+0x1c0>)
 800f756:	ee29 9a08 	vmul.f32	s18, s18, s16
 800f75a:	429c      	cmp	r4, r3
 800f75c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800f760:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f764:	dd3d      	ble.n	800f7e2 <__ieee754_asinf+0x14e>
 800f766:	eea0 0a06 	vfma.f32	s0, s0, s12
 800f76a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800f858 <__ieee754_asinf+0x1c4>
 800f76e:	eee0 7a26 	vfma.f32	s15, s0, s13
 800f772:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800f824 <__ieee754_asinf+0x190>
 800f776:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f77a:	2d00      	cmp	r5, #0
 800f77c:	bfd8      	it	le
 800f77e:	eeb1 0a40 	vnegle.f32	s0, s0
 800f782:	e79b      	b.n	800f6bc <__ieee754_asinf+0x28>
 800f784:	ee60 7a00 	vmul.f32	s15, s0, s0
 800f788:	eddf 6a28 	vldr	s13, [pc, #160]	; 800f82c <__ieee754_asinf+0x198>
 800f78c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800f830 <__ieee754_asinf+0x19c>
 800f790:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800f844 <__ieee754_asinf+0x1b0>
 800f794:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f798:	eddf 6a27 	vldr	s13, [pc, #156]	; 800f838 <__ieee754_asinf+0x1a4>
 800f79c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f7a0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800f83c <__ieee754_asinf+0x1a8>
 800f7a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f7a8:	eddf 6a25 	vldr	s13, [pc, #148]	; 800f840 <__ieee754_asinf+0x1ac>
 800f7ac:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f7b0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800f834 <__ieee754_asinf+0x1a0>
 800f7b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f7b8:	eddf 6a23 	vldr	s13, [pc, #140]	; 800f848 <__ieee754_asinf+0x1b4>
 800f7bc:	eee7 6a86 	vfma.f32	s13, s15, s12
 800f7c0:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800f84c <__ieee754_asinf+0x1b8>
 800f7c4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800f7c8:	eddf 6a21 	vldr	s13, [pc, #132]	; 800f850 <__ieee754_asinf+0x1bc>
 800f7cc:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f7d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f7d4:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800f7d8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800f7dc:	eea0 0a27 	vfma.f32	s0, s0, s15
 800f7e0:	e76c      	b.n	800f6bc <__ieee754_asinf+0x28>
 800f7e2:	ee10 3a10 	vmov	r3, s0
 800f7e6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f7ea:	f023 030f 	bic.w	r3, r3, #15
 800f7ee:	ee07 3a10 	vmov	s14, r3
 800f7f2:	eea7 8a47 	vfms.f32	s16, s14, s14
 800f7f6:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f7fa:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f7fe:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800f802:	eddf 7a07 	vldr	s15, [pc, #28]	; 800f820 <__ieee754_asinf+0x18c>
 800f806:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800f80a:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800f80e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800f85c <__ieee754_asinf+0x1c8>
 800f812:	eeb0 6a40 	vmov.f32	s12, s0
 800f816:	eea7 6a66 	vfms.f32	s12, s14, s13
 800f81a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f81e:	e7aa      	b.n	800f776 <__ieee754_asinf+0xe2>
 800f820:	b33bbd2e 	.word	0xb33bbd2e
 800f824:	3fc90fdb 	.word	0x3fc90fdb
 800f828:	7149f2ca 	.word	0x7149f2ca
 800f82c:	3811ef08 	.word	0x3811ef08
 800f830:	3a4f7f04 	.word	0x3a4f7f04
 800f834:	3e2aaaab 	.word	0x3e2aaaab
 800f838:	bd241146 	.word	0xbd241146
 800f83c:	3e4e0aa8 	.word	0x3e4e0aa8
 800f840:	bea6b090 	.word	0xbea6b090
 800f844:	3d9dc62e 	.word	0x3d9dc62e
 800f848:	bf303361 	.word	0xbf303361
 800f84c:	4001572d 	.word	0x4001572d
 800f850:	c019d139 	.word	0xc019d139
 800f854:	3f799999 	.word	0x3f799999
 800f858:	333bbd2e 	.word	0x333bbd2e
 800f85c:	3f490fdb 	.word	0x3f490fdb

0800f860 <__ieee754_atan2f>:
 800f860:	ee10 2a90 	vmov	r2, s1
 800f864:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800f868:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f86c:	b510      	push	{r4, lr}
 800f86e:	eef0 7a40 	vmov.f32	s15, s0
 800f872:	dc06      	bgt.n	800f882 <__ieee754_atan2f+0x22>
 800f874:	ee10 0a10 	vmov	r0, s0
 800f878:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f87c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f880:	dd04      	ble.n	800f88c <__ieee754_atan2f+0x2c>
 800f882:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800f886:	eeb0 0a67 	vmov.f32	s0, s15
 800f88a:	bd10      	pop	{r4, pc}
 800f88c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800f890:	d103      	bne.n	800f89a <__ieee754_atan2f+0x3a>
 800f892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f896:	f001 b91d 	b.w	8010ad4 <atanf>
 800f89a:	1794      	asrs	r4, r2, #30
 800f89c:	f004 0402 	and.w	r4, r4, #2
 800f8a0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800f8a4:	b943      	cbnz	r3, 800f8b8 <__ieee754_atan2f+0x58>
 800f8a6:	2c02      	cmp	r4, #2
 800f8a8:	d05e      	beq.n	800f968 <__ieee754_atan2f+0x108>
 800f8aa:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800f97c <__ieee754_atan2f+0x11c>
 800f8ae:	2c03      	cmp	r4, #3
 800f8b0:	bf08      	it	eq
 800f8b2:	eef0 7a47 	vmoveq.f32	s15, s14
 800f8b6:	e7e6      	b.n	800f886 <__ieee754_atan2f+0x26>
 800f8b8:	b941      	cbnz	r1, 800f8cc <__ieee754_atan2f+0x6c>
 800f8ba:	eddf 7a31 	vldr	s15, [pc, #196]	; 800f980 <__ieee754_atan2f+0x120>
 800f8be:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800f984 <__ieee754_atan2f+0x124>
 800f8c2:	2800      	cmp	r0, #0
 800f8c4:	bfb8      	it	lt
 800f8c6:	eef0 7a40 	vmovlt.f32	s15, s0
 800f8ca:	e7dc      	b.n	800f886 <__ieee754_atan2f+0x26>
 800f8cc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f8d0:	d110      	bne.n	800f8f4 <__ieee754_atan2f+0x94>
 800f8d2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f8d6:	f104 34ff 	add.w	r4, r4, #4294967295
 800f8da:	d107      	bne.n	800f8ec <__ieee754_atan2f+0x8c>
 800f8dc:	2c02      	cmp	r4, #2
 800f8de:	d846      	bhi.n	800f96e <__ieee754_atan2f+0x10e>
 800f8e0:	4b29      	ldr	r3, [pc, #164]	; (800f988 <__ieee754_atan2f+0x128>)
 800f8e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f8e6:	edd4 7a00 	vldr	s15, [r4]
 800f8ea:	e7cc      	b.n	800f886 <__ieee754_atan2f+0x26>
 800f8ec:	2c02      	cmp	r4, #2
 800f8ee:	d841      	bhi.n	800f974 <__ieee754_atan2f+0x114>
 800f8f0:	4b26      	ldr	r3, [pc, #152]	; (800f98c <__ieee754_atan2f+0x12c>)
 800f8f2:	e7f6      	b.n	800f8e2 <__ieee754_atan2f+0x82>
 800f8f4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f8f8:	d0df      	beq.n	800f8ba <__ieee754_atan2f+0x5a>
 800f8fa:	1a5b      	subs	r3, r3, r1
 800f8fc:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800f900:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800f904:	da1a      	bge.n	800f93c <__ieee754_atan2f+0xdc>
 800f906:	2a00      	cmp	r2, #0
 800f908:	da01      	bge.n	800f90e <__ieee754_atan2f+0xae>
 800f90a:	313c      	adds	r1, #60	; 0x3c
 800f90c:	db19      	blt.n	800f942 <__ieee754_atan2f+0xe2>
 800f90e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800f912:	f001 f9b3 	bl	8010c7c <fabsf>
 800f916:	f001 f8dd 	bl	8010ad4 <atanf>
 800f91a:	eef0 7a40 	vmov.f32	s15, s0
 800f91e:	2c01      	cmp	r4, #1
 800f920:	d012      	beq.n	800f948 <__ieee754_atan2f+0xe8>
 800f922:	2c02      	cmp	r4, #2
 800f924:	d017      	beq.n	800f956 <__ieee754_atan2f+0xf6>
 800f926:	2c00      	cmp	r4, #0
 800f928:	d0ad      	beq.n	800f886 <__ieee754_atan2f+0x26>
 800f92a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800f990 <__ieee754_atan2f+0x130>
 800f92e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f932:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800f994 <__ieee754_atan2f+0x134>
 800f936:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f93a:	e7a4      	b.n	800f886 <__ieee754_atan2f+0x26>
 800f93c:	eddf 7a10 	vldr	s15, [pc, #64]	; 800f980 <__ieee754_atan2f+0x120>
 800f940:	e7ed      	b.n	800f91e <__ieee754_atan2f+0xbe>
 800f942:	eddf 7a15 	vldr	s15, [pc, #84]	; 800f998 <__ieee754_atan2f+0x138>
 800f946:	e7ea      	b.n	800f91e <__ieee754_atan2f+0xbe>
 800f948:	ee17 3a90 	vmov	r3, s15
 800f94c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f950:	ee07 3a90 	vmov	s15, r3
 800f954:	e797      	b.n	800f886 <__ieee754_atan2f+0x26>
 800f956:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800f990 <__ieee754_atan2f+0x130>
 800f95a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f95e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800f994 <__ieee754_atan2f+0x134>
 800f962:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f966:	e78e      	b.n	800f886 <__ieee754_atan2f+0x26>
 800f968:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800f994 <__ieee754_atan2f+0x134>
 800f96c:	e78b      	b.n	800f886 <__ieee754_atan2f+0x26>
 800f96e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800f99c <__ieee754_atan2f+0x13c>
 800f972:	e788      	b.n	800f886 <__ieee754_atan2f+0x26>
 800f974:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f998 <__ieee754_atan2f+0x138>
 800f978:	e785      	b.n	800f886 <__ieee754_atan2f+0x26>
 800f97a:	bf00      	nop
 800f97c:	c0490fdb 	.word	0xc0490fdb
 800f980:	3fc90fdb 	.word	0x3fc90fdb
 800f984:	bfc90fdb 	.word	0xbfc90fdb
 800f988:	080113dc 	.word	0x080113dc
 800f98c:	080113e8 	.word	0x080113e8
 800f990:	33bbbd2e 	.word	0x33bbbd2e
 800f994:	40490fdb 	.word	0x40490fdb
 800f998:	00000000 	.word	0x00000000
 800f99c:	3f490fdb 	.word	0x3f490fdb

0800f9a0 <__ieee754_powf>:
 800f9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9a4:	ee10 5a90 	vmov	r5, s1
 800f9a8:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800f9ac:	ed2d 8b02 	vpush	{d8}
 800f9b0:	eeb0 8a40 	vmov.f32	s16, s0
 800f9b4:	eef0 8a60 	vmov.f32	s17, s1
 800f9b8:	f000 8291 	beq.w	800fede <__ieee754_powf+0x53e>
 800f9bc:	ee10 8a10 	vmov	r8, s0
 800f9c0:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800f9c4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f9c8:	dc06      	bgt.n	800f9d8 <__ieee754_powf+0x38>
 800f9ca:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800f9ce:	dd0a      	ble.n	800f9e6 <__ieee754_powf+0x46>
 800f9d0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f9d4:	f000 8283 	beq.w	800fede <__ieee754_powf+0x53e>
 800f9d8:	ecbd 8b02 	vpop	{d8}
 800f9dc:	48d8      	ldr	r0, [pc, #864]	; (800fd40 <__ieee754_powf+0x3a0>)
 800f9de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9e2:	f001 b95f 	b.w	8010ca4 <nanf>
 800f9e6:	f1b8 0f00 	cmp.w	r8, #0
 800f9ea:	da1f      	bge.n	800fa2c <__ieee754_powf+0x8c>
 800f9ec:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800f9f0:	da2e      	bge.n	800fa50 <__ieee754_powf+0xb0>
 800f9f2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800f9f6:	f2c0 827b 	blt.w	800fef0 <__ieee754_powf+0x550>
 800f9fa:	15fb      	asrs	r3, r7, #23
 800f9fc:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800fa00:	fa47 f603 	asr.w	r6, r7, r3
 800fa04:	fa06 f303 	lsl.w	r3, r6, r3
 800fa08:	42bb      	cmp	r3, r7
 800fa0a:	f040 8271 	bne.w	800fef0 <__ieee754_powf+0x550>
 800fa0e:	f006 0601 	and.w	r6, r6, #1
 800fa12:	f1c6 0602 	rsb	r6, r6, #2
 800fa16:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800fa1a:	d120      	bne.n	800fa5e <__ieee754_powf+0xbe>
 800fa1c:	2d00      	cmp	r5, #0
 800fa1e:	f280 8264 	bge.w	800feea <__ieee754_powf+0x54a>
 800fa22:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fa26:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800fa2a:	e00d      	b.n	800fa48 <__ieee754_powf+0xa8>
 800fa2c:	2600      	movs	r6, #0
 800fa2e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800fa32:	d1f0      	bne.n	800fa16 <__ieee754_powf+0x76>
 800fa34:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800fa38:	f000 8251 	beq.w	800fede <__ieee754_powf+0x53e>
 800fa3c:	dd0a      	ble.n	800fa54 <__ieee754_powf+0xb4>
 800fa3e:	2d00      	cmp	r5, #0
 800fa40:	f280 8250 	bge.w	800fee4 <__ieee754_powf+0x544>
 800fa44:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800fd44 <__ieee754_powf+0x3a4>
 800fa48:	ecbd 8b02 	vpop	{d8}
 800fa4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa50:	2602      	movs	r6, #2
 800fa52:	e7ec      	b.n	800fa2e <__ieee754_powf+0x8e>
 800fa54:	2d00      	cmp	r5, #0
 800fa56:	daf5      	bge.n	800fa44 <__ieee754_powf+0xa4>
 800fa58:	eeb1 0a68 	vneg.f32	s0, s17
 800fa5c:	e7f4      	b.n	800fa48 <__ieee754_powf+0xa8>
 800fa5e:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800fa62:	d102      	bne.n	800fa6a <__ieee754_powf+0xca>
 800fa64:	ee28 0a08 	vmul.f32	s0, s16, s16
 800fa68:	e7ee      	b.n	800fa48 <__ieee754_powf+0xa8>
 800fa6a:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800fa6e:	eeb0 0a48 	vmov.f32	s0, s16
 800fa72:	d108      	bne.n	800fa86 <__ieee754_powf+0xe6>
 800fa74:	f1b8 0f00 	cmp.w	r8, #0
 800fa78:	db05      	blt.n	800fa86 <__ieee754_powf+0xe6>
 800fa7a:	ecbd 8b02 	vpop	{d8}
 800fa7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa82:	f000 ba4d 	b.w	800ff20 <__ieee754_sqrtf>
 800fa86:	f001 f8f9 	bl	8010c7c <fabsf>
 800fa8a:	b124      	cbz	r4, 800fa96 <__ieee754_powf+0xf6>
 800fa8c:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800fa90:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800fa94:	d117      	bne.n	800fac6 <__ieee754_powf+0x126>
 800fa96:	2d00      	cmp	r5, #0
 800fa98:	bfbc      	itt	lt
 800fa9a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800fa9e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800faa2:	f1b8 0f00 	cmp.w	r8, #0
 800faa6:	dacf      	bge.n	800fa48 <__ieee754_powf+0xa8>
 800faa8:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800faac:	ea54 0306 	orrs.w	r3, r4, r6
 800fab0:	d104      	bne.n	800fabc <__ieee754_powf+0x11c>
 800fab2:	ee70 7a40 	vsub.f32	s15, s0, s0
 800fab6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800faba:	e7c5      	b.n	800fa48 <__ieee754_powf+0xa8>
 800fabc:	2e01      	cmp	r6, #1
 800fabe:	d1c3      	bne.n	800fa48 <__ieee754_powf+0xa8>
 800fac0:	eeb1 0a40 	vneg.f32	s0, s0
 800fac4:	e7c0      	b.n	800fa48 <__ieee754_powf+0xa8>
 800fac6:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800faca:	3801      	subs	r0, #1
 800facc:	ea56 0300 	orrs.w	r3, r6, r0
 800fad0:	d104      	bne.n	800fadc <__ieee754_powf+0x13c>
 800fad2:	ee38 8a48 	vsub.f32	s16, s16, s16
 800fad6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800fada:	e7b5      	b.n	800fa48 <__ieee754_powf+0xa8>
 800fadc:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800fae0:	dd6b      	ble.n	800fbba <__ieee754_powf+0x21a>
 800fae2:	4b99      	ldr	r3, [pc, #612]	; (800fd48 <__ieee754_powf+0x3a8>)
 800fae4:	429c      	cmp	r4, r3
 800fae6:	dc06      	bgt.n	800faf6 <__ieee754_powf+0x156>
 800fae8:	2d00      	cmp	r5, #0
 800faea:	daab      	bge.n	800fa44 <__ieee754_powf+0xa4>
 800faec:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800fd4c <__ieee754_powf+0x3ac>
 800faf0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800faf4:	e7a8      	b.n	800fa48 <__ieee754_powf+0xa8>
 800faf6:	4b96      	ldr	r3, [pc, #600]	; (800fd50 <__ieee754_powf+0x3b0>)
 800faf8:	429c      	cmp	r4, r3
 800fafa:	dd02      	ble.n	800fb02 <__ieee754_powf+0x162>
 800fafc:	2d00      	cmp	r5, #0
 800fafe:	dcf5      	bgt.n	800faec <__ieee754_powf+0x14c>
 800fb00:	e7a0      	b.n	800fa44 <__ieee754_powf+0xa4>
 800fb02:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fb06:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fb0a:	eddf 6a92 	vldr	s13, [pc, #584]	; 800fd54 <__ieee754_powf+0x3b4>
 800fb0e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800fb12:	eee0 6a67 	vfms.f32	s13, s0, s15
 800fb16:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800fb1a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800fb1e:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fb22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb26:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800fd58 <__ieee754_powf+0x3b8>
 800fb2a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800fb2e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800fd5c <__ieee754_powf+0x3bc>
 800fb32:	eee0 7a07 	vfma.f32	s15, s0, s14
 800fb36:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800fd60 <__ieee754_powf+0x3c0>
 800fb3a:	eef0 6a67 	vmov.f32	s13, s15
 800fb3e:	eee0 6a07 	vfma.f32	s13, s0, s14
 800fb42:	ee16 3a90 	vmov	r3, s13
 800fb46:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800fb4a:	f023 030f 	bic.w	r3, r3, #15
 800fb4e:	ee00 3a90 	vmov	s1, r3
 800fb52:	eee0 0a47 	vfms.f32	s1, s0, s14
 800fb56:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800fb5a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800fb5e:	f025 050f 	bic.w	r5, r5, #15
 800fb62:	ee07 5a10 	vmov	s14, r5
 800fb66:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800fb6a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800fb6e:	ee07 3a90 	vmov	s15, r3
 800fb72:	eee7 0a27 	vfma.f32	s1, s14, s15
 800fb76:	3e01      	subs	r6, #1
 800fb78:	ea56 0200 	orrs.w	r2, r6, r0
 800fb7c:	ee07 5a10 	vmov	s14, r5
 800fb80:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb84:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800fb88:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800fb8c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800fb90:	ee17 4a10 	vmov	r4, s14
 800fb94:	bf08      	it	eq
 800fb96:	eeb0 8a40 	vmoveq.f32	s16, s0
 800fb9a:	2c00      	cmp	r4, #0
 800fb9c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800fba0:	f340 8184 	ble.w	800feac <__ieee754_powf+0x50c>
 800fba4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800fba8:	f340 80fc 	ble.w	800fda4 <__ieee754_powf+0x404>
 800fbac:	eddf 7a67 	vldr	s15, [pc, #412]	; 800fd4c <__ieee754_powf+0x3ac>
 800fbb0:	ee28 0a27 	vmul.f32	s0, s16, s15
 800fbb4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fbb8:	e746      	b.n	800fa48 <__ieee754_powf+0xa8>
 800fbba:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800fbbe:	bf01      	itttt	eq
 800fbc0:	eddf 7a68 	vldreq	s15, [pc, #416]	; 800fd64 <__ieee754_powf+0x3c4>
 800fbc4:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800fbc8:	f06f 0217 	mvneq.w	r2, #23
 800fbcc:	ee17 4a90 	vmoveq	r4, s15
 800fbd0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800fbd4:	bf18      	it	ne
 800fbd6:	2200      	movne	r2, #0
 800fbd8:	3b7f      	subs	r3, #127	; 0x7f
 800fbda:	4413      	add	r3, r2
 800fbdc:	4a62      	ldr	r2, [pc, #392]	; (800fd68 <__ieee754_powf+0x3c8>)
 800fbde:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800fbe2:	4294      	cmp	r4, r2
 800fbe4:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800fbe8:	dd06      	ble.n	800fbf8 <__ieee754_powf+0x258>
 800fbea:	4a60      	ldr	r2, [pc, #384]	; (800fd6c <__ieee754_powf+0x3cc>)
 800fbec:	4294      	cmp	r4, r2
 800fbee:	f340 80a4 	ble.w	800fd3a <__ieee754_powf+0x39a>
 800fbf2:	3301      	adds	r3, #1
 800fbf4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800fbf8:	2400      	movs	r4, #0
 800fbfa:	4a5d      	ldr	r2, [pc, #372]	; (800fd70 <__ieee754_powf+0x3d0>)
 800fbfc:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800fc00:	ee07 1a90 	vmov	s15, r1
 800fc04:	ed92 7a00 	vldr	s14, [r2]
 800fc08:	4a5a      	ldr	r2, [pc, #360]	; (800fd74 <__ieee754_powf+0x3d4>)
 800fc0a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800fc0e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800fc12:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800fc16:	1049      	asrs	r1, r1, #1
 800fc18:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800fc1c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800fc20:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800fc24:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800fc28:	ee06 1a10 	vmov	s12, r1
 800fc2c:	ee65 4a26 	vmul.f32	s9, s10, s13
 800fc30:	ee36 7a47 	vsub.f32	s14, s12, s14
 800fc34:	ee14 7a90 	vmov	r7, s9
 800fc38:	4017      	ands	r7, r2
 800fc3a:	ee05 7a90 	vmov	s11, r7
 800fc3e:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800fc42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fc46:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800fd78 <__ieee754_powf+0x3d8>
 800fc4a:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800fc4e:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800fc52:	ee25 6a26 	vmul.f32	s12, s10, s13
 800fc56:	eddf 6a49 	vldr	s13, [pc, #292]	; 800fd7c <__ieee754_powf+0x3dc>
 800fc5a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800fc5e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800fd80 <__ieee754_powf+0x3e0>
 800fc62:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fc66:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800fd54 <__ieee754_powf+0x3b4>
 800fc6a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fc6e:	eddf 6a45 	vldr	s13, [pc, #276]	; 800fd84 <__ieee754_powf+0x3e4>
 800fc72:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fc76:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800fd88 <__ieee754_powf+0x3e8>
 800fc7a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fc7e:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800fc82:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800fc86:	ee66 6a86 	vmul.f32	s13, s13, s12
 800fc8a:	eee5 6a07 	vfma.f32	s13, s10, s14
 800fc8e:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800fc92:	eef0 7a45 	vmov.f32	s15, s10
 800fc96:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800fc9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc9e:	ee17 1a90 	vmov	r1, s15
 800fca2:	4011      	ands	r1, r2
 800fca4:	ee07 1a90 	vmov	s15, r1
 800fca8:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800fcac:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800fcb0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800fcb4:	ee27 7a24 	vmul.f32	s14, s14, s9
 800fcb8:	eea6 7a27 	vfma.f32	s14, s12, s15
 800fcbc:	eeb0 6a47 	vmov.f32	s12, s14
 800fcc0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800fcc4:	ee16 1a10 	vmov	r1, s12
 800fcc8:	4011      	ands	r1, r2
 800fcca:	ee06 1a90 	vmov	s13, r1
 800fcce:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800fcd2:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800fd8c <__ieee754_powf+0x3ec>
 800fcd6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800fd90 <__ieee754_powf+0x3f0>
 800fcda:	ee37 7a66 	vsub.f32	s14, s14, s13
 800fcde:	ee06 1a10 	vmov	s12, r1
 800fce2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fce6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800fd94 <__ieee754_powf+0x3f4>
 800fcea:	492b      	ldr	r1, [pc, #172]	; (800fd98 <__ieee754_powf+0x3f8>)
 800fcec:	eea6 7a27 	vfma.f32	s14, s12, s15
 800fcf0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fcf4:	edd1 7a00 	vldr	s15, [r1]
 800fcf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fcfc:	ee07 3a90 	vmov	s15, r3
 800fd00:	4b26      	ldr	r3, [pc, #152]	; (800fd9c <__ieee754_powf+0x3fc>)
 800fd02:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800fd06:	eef0 7a47 	vmov.f32	s15, s14
 800fd0a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fd0e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fd12:	edd4 0a00 	vldr	s1, [r4]
 800fd16:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800fd1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd1e:	ee17 3a90 	vmov	r3, s15
 800fd22:	4013      	ands	r3, r2
 800fd24:	ee07 3a90 	vmov	s15, r3
 800fd28:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800fd2c:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800fd30:	eee6 6a65 	vfms.f32	s13, s12, s11
 800fd34:	ee77 7a66 	vsub.f32	s15, s14, s13
 800fd38:	e70f      	b.n	800fb5a <__ieee754_powf+0x1ba>
 800fd3a:	2401      	movs	r4, #1
 800fd3c:	e75d      	b.n	800fbfa <__ieee754_powf+0x25a>
 800fd3e:	bf00      	nop
 800fd40:	08011147 	.word	0x08011147
 800fd44:	00000000 	.word	0x00000000
 800fd48:	3f7ffff7 	.word	0x3f7ffff7
 800fd4c:	7149f2ca 	.word	0x7149f2ca
 800fd50:	3f800007 	.word	0x3f800007
 800fd54:	3eaaaaab 	.word	0x3eaaaaab
 800fd58:	3fb8aa3b 	.word	0x3fb8aa3b
 800fd5c:	36eca570 	.word	0x36eca570
 800fd60:	3fb8aa00 	.word	0x3fb8aa00
 800fd64:	4b800000 	.word	0x4b800000
 800fd68:	001cc471 	.word	0x001cc471
 800fd6c:	005db3d6 	.word	0x005db3d6
 800fd70:	080113f4 	.word	0x080113f4
 800fd74:	fffff000 	.word	0xfffff000
 800fd78:	3e6c3255 	.word	0x3e6c3255
 800fd7c:	3e53f142 	.word	0x3e53f142
 800fd80:	3e8ba305 	.word	0x3e8ba305
 800fd84:	3edb6db7 	.word	0x3edb6db7
 800fd88:	3f19999a 	.word	0x3f19999a
 800fd8c:	3f76384f 	.word	0x3f76384f
 800fd90:	3f763800 	.word	0x3f763800
 800fd94:	369dc3a0 	.word	0x369dc3a0
 800fd98:	08011404 	.word	0x08011404
 800fd9c:	080113fc 	.word	0x080113fc
 800fda0:	3338aa3c 	.word	0x3338aa3c
 800fda4:	f040 8092 	bne.w	800fecc <__ieee754_powf+0x52c>
 800fda8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800fda0 <__ieee754_powf+0x400>
 800fdac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fdb0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800fdb4:	eef4 6ac7 	vcmpe.f32	s13, s14
 800fdb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdbc:	f73f aef6 	bgt.w	800fbac <__ieee754_powf+0x20c>
 800fdc0:	15db      	asrs	r3, r3, #23
 800fdc2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800fdc6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fdca:	4103      	asrs	r3, r0
 800fdcc:	4423      	add	r3, r4
 800fdce:	4949      	ldr	r1, [pc, #292]	; (800fef4 <__ieee754_powf+0x554>)
 800fdd0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fdd4:	3a7f      	subs	r2, #127	; 0x7f
 800fdd6:	4111      	asrs	r1, r2
 800fdd8:	ea23 0101 	bic.w	r1, r3, r1
 800fddc:	ee07 1a10 	vmov	s14, r1
 800fde0:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800fde4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800fde8:	f1c2 0217 	rsb	r2, r2, #23
 800fdec:	4110      	asrs	r0, r2
 800fdee:	2c00      	cmp	r4, #0
 800fdf0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fdf4:	bfb8      	it	lt
 800fdf6:	4240      	neglt	r0, r0
 800fdf8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800fdfc:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800fef8 <__ieee754_powf+0x558>
 800fe00:	ee17 3a10 	vmov	r3, s14
 800fe04:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800fe08:	f023 030f 	bic.w	r3, r3, #15
 800fe0c:	ee07 3a10 	vmov	s14, r3
 800fe10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe14:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800fe18:	eddf 7a38 	vldr	s15, [pc, #224]	; 800fefc <__ieee754_powf+0x55c>
 800fe1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe20:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800fe24:	eddf 6a36 	vldr	s13, [pc, #216]	; 800ff00 <__ieee754_powf+0x560>
 800fe28:	eeb0 0a67 	vmov.f32	s0, s15
 800fe2c:	eea7 0a26 	vfma.f32	s0, s14, s13
 800fe30:	eeb0 6a40 	vmov.f32	s12, s0
 800fe34:	eea7 6a66 	vfms.f32	s12, s14, s13
 800fe38:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fe3c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800fe40:	eddf 6a30 	vldr	s13, [pc, #192]	; 800ff04 <__ieee754_powf+0x564>
 800fe44:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800ff08 <__ieee754_powf+0x568>
 800fe48:	eea7 6a26 	vfma.f32	s12, s14, s13
 800fe4c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800ff0c <__ieee754_powf+0x56c>
 800fe50:	eee6 6a07 	vfma.f32	s13, s12, s14
 800fe54:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800ff10 <__ieee754_powf+0x570>
 800fe58:	eea6 6a87 	vfma.f32	s12, s13, s14
 800fe5c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800ff14 <__ieee754_powf+0x574>
 800fe60:	eee6 6a07 	vfma.f32	s13, s12, s14
 800fe64:	eeb0 6a40 	vmov.f32	s12, s0
 800fe68:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800fe6c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800fe70:	eeb0 7a46 	vmov.f32	s14, s12
 800fe74:	ee77 6a66 	vsub.f32	s13, s14, s13
 800fe78:	ee20 6a06 	vmul.f32	s12, s0, s12
 800fe7c:	eee0 7a27 	vfma.f32	s15, s0, s15
 800fe80:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800fe84:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe88:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800fe8c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fe90:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800fe94:	ee10 3a10 	vmov	r3, s0
 800fe98:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800fe9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fea0:	da1a      	bge.n	800fed8 <__ieee754_powf+0x538>
 800fea2:	f000 ff61 	bl	8010d68 <scalbnf>
 800fea6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800feaa:	e5cd      	b.n	800fa48 <__ieee754_powf+0xa8>
 800feac:	4a1a      	ldr	r2, [pc, #104]	; (800ff18 <__ieee754_powf+0x578>)
 800feae:	4293      	cmp	r3, r2
 800feb0:	dd02      	ble.n	800feb8 <__ieee754_powf+0x518>
 800feb2:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800ff1c <__ieee754_powf+0x57c>
 800feb6:	e67b      	b.n	800fbb0 <__ieee754_powf+0x210>
 800feb8:	d108      	bne.n	800fecc <__ieee754_powf+0x52c>
 800feba:	ee37 7a67 	vsub.f32	s14, s14, s15
 800febe:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800fec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fec6:	f6ff af7b 	blt.w	800fdc0 <__ieee754_powf+0x420>
 800feca:	e7f2      	b.n	800feb2 <__ieee754_powf+0x512>
 800fecc:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800fed0:	f73f af76 	bgt.w	800fdc0 <__ieee754_powf+0x420>
 800fed4:	2000      	movs	r0, #0
 800fed6:	e78f      	b.n	800fdf8 <__ieee754_powf+0x458>
 800fed8:	ee00 3a10 	vmov	s0, r3
 800fedc:	e7e3      	b.n	800fea6 <__ieee754_powf+0x506>
 800fede:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fee2:	e5b1      	b.n	800fa48 <__ieee754_powf+0xa8>
 800fee4:	eeb0 0a68 	vmov.f32	s0, s17
 800fee8:	e5ae      	b.n	800fa48 <__ieee754_powf+0xa8>
 800feea:	eeb0 0a48 	vmov.f32	s0, s16
 800feee:	e5ab      	b.n	800fa48 <__ieee754_powf+0xa8>
 800fef0:	2600      	movs	r6, #0
 800fef2:	e590      	b.n	800fa16 <__ieee754_powf+0x76>
 800fef4:	007fffff 	.word	0x007fffff
 800fef8:	3f317218 	.word	0x3f317218
 800fefc:	35bfbe8c 	.word	0x35bfbe8c
 800ff00:	3f317200 	.word	0x3f317200
 800ff04:	3331bb4c 	.word	0x3331bb4c
 800ff08:	b5ddea0e 	.word	0xb5ddea0e
 800ff0c:	388ab355 	.word	0x388ab355
 800ff10:	bb360b61 	.word	0xbb360b61
 800ff14:	3e2aaaab 	.word	0x3e2aaaab
 800ff18:	43160000 	.word	0x43160000
 800ff1c:	0da24260 	.word	0x0da24260

0800ff20 <__ieee754_sqrtf>:
 800ff20:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ff24:	4770      	bx	lr
	...

0800ff28 <__kernel_cos>:
 800ff28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff2c:	ec57 6b10 	vmov	r6, r7, d0
 800ff30:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ff34:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ff38:	ed8d 1b00 	vstr	d1, [sp]
 800ff3c:	da07      	bge.n	800ff4e <__kernel_cos+0x26>
 800ff3e:	ee10 0a10 	vmov	r0, s0
 800ff42:	4639      	mov	r1, r7
 800ff44:	f7f0 fe30 	bl	8000ba8 <__aeabi_d2iz>
 800ff48:	2800      	cmp	r0, #0
 800ff4a:	f000 8088 	beq.w	801005e <__kernel_cos+0x136>
 800ff4e:	4632      	mov	r2, r6
 800ff50:	463b      	mov	r3, r7
 800ff52:	4630      	mov	r0, r6
 800ff54:	4639      	mov	r1, r7
 800ff56:	f7f0 fb77 	bl	8000648 <__aeabi_dmul>
 800ff5a:	4b51      	ldr	r3, [pc, #324]	; (80100a0 <__kernel_cos+0x178>)
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	4604      	mov	r4, r0
 800ff60:	460d      	mov	r5, r1
 800ff62:	f7f0 fb71 	bl	8000648 <__aeabi_dmul>
 800ff66:	a340      	add	r3, pc, #256	; (adr r3, 8010068 <__kernel_cos+0x140>)
 800ff68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff6c:	4682      	mov	sl, r0
 800ff6e:	468b      	mov	fp, r1
 800ff70:	4620      	mov	r0, r4
 800ff72:	4629      	mov	r1, r5
 800ff74:	f7f0 fb68 	bl	8000648 <__aeabi_dmul>
 800ff78:	a33d      	add	r3, pc, #244	; (adr r3, 8010070 <__kernel_cos+0x148>)
 800ff7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff7e:	f7f0 f9ad 	bl	80002dc <__adddf3>
 800ff82:	4622      	mov	r2, r4
 800ff84:	462b      	mov	r3, r5
 800ff86:	f7f0 fb5f 	bl	8000648 <__aeabi_dmul>
 800ff8a:	a33b      	add	r3, pc, #236	; (adr r3, 8010078 <__kernel_cos+0x150>)
 800ff8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff90:	f7f0 f9a2 	bl	80002d8 <__aeabi_dsub>
 800ff94:	4622      	mov	r2, r4
 800ff96:	462b      	mov	r3, r5
 800ff98:	f7f0 fb56 	bl	8000648 <__aeabi_dmul>
 800ff9c:	a338      	add	r3, pc, #224	; (adr r3, 8010080 <__kernel_cos+0x158>)
 800ff9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa2:	f7f0 f99b 	bl	80002dc <__adddf3>
 800ffa6:	4622      	mov	r2, r4
 800ffa8:	462b      	mov	r3, r5
 800ffaa:	f7f0 fb4d 	bl	8000648 <__aeabi_dmul>
 800ffae:	a336      	add	r3, pc, #216	; (adr r3, 8010088 <__kernel_cos+0x160>)
 800ffb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb4:	f7f0 f990 	bl	80002d8 <__aeabi_dsub>
 800ffb8:	4622      	mov	r2, r4
 800ffba:	462b      	mov	r3, r5
 800ffbc:	f7f0 fb44 	bl	8000648 <__aeabi_dmul>
 800ffc0:	a333      	add	r3, pc, #204	; (adr r3, 8010090 <__kernel_cos+0x168>)
 800ffc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc6:	f7f0 f989 	bl	80002dc <__adddf3>
 800ffca:	4622      	mov	r2, r4
 800ffcc:	462b      	mov	r3, r5
 800ffce:	f7f0 fb3b 	bl	8000648 <__aeabi_dmul>
 800ffd2:	4622      	mov	r2, r4
 800ffd4:	462b      	mov	r3, r5
 800ffd6:	f7f0 fb37 	bl	8000648 <__aeabi_dmul>
 800ffda:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ffde:	4604      	mov	r4, r0
 800ffe0:	460d      	mov	r5, r1
 800ffe2:	4630      	mov	r0, r6
 800ffe4:	4639      	mov	r1, r7
 800ffe6:	f7f0 fb2f 	bl	8000648 <__aeabi_dmul>
 800ffea:	460b      	mov	r3, r1
 800ffec:	4602      	mov	r2, r0
 800ffee:	4629      	mov	r1, r5
 800fff0:	4620      	mov	r0, r4
 800fff2:	f7f0 f971 	bl	80002d8 <__aeabi_dsub>
 800fff6:	4b2b      	ldr	r3, [pc, #172]	; (80100a4 <__kernel_cos+0x17c>)
 800fff8:	4598      	cmp	r8, r3
 800fffa:	4606      	mov	r6, r0
 800fffc:	460f      	mov	r7, r1
 800fffe:	dc10      	bgt.n	8010022 <__kernel_cos+0xfa>
 8010000:	4602      	mov	r2, r0
 8010002:	460b      	mov	r3, r1
 8010004:	4650      	mov	r0, sl
 8010006:	4659      	mov	r1, fp
 8010008:	f7f0 f966 	bl	80002d8 <__aeabi_dsub>
 801000c:	460b      	mov	r3, r1
 801000e:	4926      	ldr	r1, [pc, #152]	; (80100a8 <__kernel_cos+0x180>)
 8010010:	4602      	mov	r2, r0
 8010012:	2000      	movs	r0, #0
 8010014:	f7f0 f960 	bl	80002d8 <__aeabi_dsub>
 8010018:	ec41 0b10 	vmov	d0, r0, r1
 801001c:	b003      	add	sp, #12
 801001e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010022:	4b22      	ldr	r3, [pc, #136]	; (80100ac <__kernel_cos+0x184>)
 8010024:	4920      	ldr	r1, [pc, #128]	; (80100a8 <__kernel_cos+0x180>)
 8010026:	4598      	cmp	r8, r3
 8010028:	bfcc      	ite	gt
 801002a:	4d21      	ldrgt	r5, [pc, #132]	; (80100b0 <__kernel_cos+0x188>)
 801002c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8010030:	2400      	movs	r4, #0
 8010032:	4622      	mov	r2, r4
 8010034:	462b      	mov	r3, r5
 8010036:	2000      	movs	r0, #0
 8010038:	f7f0 f94e 	bl	80002d8 <__aeabi_dsub>
 801003c:	4622      	mov	r2, r4
 801003e:	4680      	mov	r8, r0
 8010040:	4689      	mov	r9, r1
 8010042:	462b      	mov	r3, r5
 8010044:	4650      	mov	r0, sl
 8010046:	4659      	mov	r1, fp
 8010048:	f7f0 f946 	bl	80002d8 <__aeabi_dsub>
 801004c:	4632      	mov	r2, r6
 801004e:	463b      	mov	r3, r7
 8010050:	f7f0 f942 	bl	80002d8 <__aeabi_dsub>
 8010054:	4602      	mov	r2, r0
 8010056:	460b      	mov	r3, r1
 8010058:	4640      	mov	r0, r8
 801005a:	4649      	mov	r1, r9
 801005c:	e7da      	b.n	8010014 <__kernel_cos+0xec>
 801005e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8010098 <__kernel_cos+0x170>
 8010062:	e7db      	b.n	801001c <__kernel_cos+0xf4>
 8010064:	f3af 8000 	nop.w
 8010068:	be8838d4 	.word	0xbe8838d4
 801006c:	bda8fae9 	.word	0xbda8fae9
 8010070:	bdb4b1c4 	.word	0xbdb4b1c4
 8010074:	3e21ee9e 	.word	0x3e21ee9e
 8010078:	809c52ad 	.word	0x809c52ad
 801007c:	3e927e4f 	.word	0x3e927e4f
 8010080:	19cb1590 	.word	0x19cb1590
 8010084:	3efa01a0 	.word	0x3efa01a0
 8010088:	16c15177 	.word	0x16c15177
 801008c:	3f56c16c 	.word	0x3f56c16c
 8010090:	5555554c 	.word	0x5555554c
 8010094:	3fa55555 	.word	0x3fa55555
 8010098:	00000000 	.word	0x00000000
 801009c:	3ff00000 	.word	0x3ff00000
 80100a0:	3fe00000 	.word	0x3fe00000
 80100a4:	3fd33332 	.word	0x3fd33332
 80100a8:	3ff00000 	.word	0x3ff00000
 80100ac:	3fe90000 	.word	0x3fe90000
 80100b0:	3fd20000 	.word	0x3fd20000
 80100b4:	00000000 	.word	0x00000000

080100b8 <__kernel_rem_pio2>:
 80100b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100bc:	ed2d 8b02 	vpush	{d8}
 80100c0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80100c4:	f112 0f14 	cmn.w	r2, #20
 80100c8:	9308      	str	r3, [sp, #32]
 80100ca:	9101      	str	r1, [sp, #4]
 80100cc:	4bc6      	ldr	r3, [pc, #792]	; (80103e8 <__kernel_rem_pio2+0x330>)
 80100ce:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80100d0:	9009      	str	r0, [sp, #36]	; 0x24
 80100d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80100d6:	9304      	str	r3, [sp, #16]
 80100d8:	9b08      	ldr	r3, [sp, #32]
 80100da:	f103 33ff 	add.w	r3, r3, #4294967295
 80100de:	bfa8      	it	ge
 80100e0:	1ed4      	subge	r4, r2, #3
 80100e2:	9306      	str	r3, [sp, #24]
 80100e4:	bfb2      	itee	lt
 80100e6:	2400      	movlt	r4, #0
 80100e8:	2318      	movge	r3, #24
 80100ea:	fb94 f4f3 	sdivge	r4, r4, r3
 80100ee:	f06f 0317 	mvn.w	r3, #23
 80100f2:	fb04 3303 	mla	r3, r4, r3, r3
 80100f6:	eb03 0a02 	add.w	sl, r3, r2
 80100fa:	9b04      	ldr	r3, [sp, #16]
 80100fc:	9a06      	ldr	r2, [sp, #24]
 80100fe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80103d8 <__kernel_rem_pio2+0x320>
 8010102:	eb03 0802 	add.w	r8, r3, r2
 8010106:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010108:	1aa7      	subs	r7, r4, r2
 801010a:	ae20      	add	r6, sp, #128	; 0x80
 801010c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010110:	2500      	movs	r5, #0
 8010112:	4545      	cmp	r5, r8
 8010114:	dd18      	ble.n	8010148 <__kernel_rem_pio2+0x90>
 8010116:	9b08      	ldr	r3, [sp, #32]
 8010118:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801011c:	aa20      	add	r2, sp, #128	; 0x80
 801011e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80103d8 <__kernel_rem_pio2+0x320>
 8010122:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010126:	f1c3 0301 	rsb	r3, r3, #1
 801012a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801012e:	9307      	str	r3, [sp, #28]
 8010130:	9b07      	ldr	r3, [sp, #28]
 8010132:	9a04      	ldr	r2, [sp, #16]
 8010134:	4443      	add	r3, r8
 8010136:	429a      	cmp	r2, r3
 8010138:	db2f      	blt.n	801019a <__kernel_rem_pio2+0xe2>
 801013a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801013e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010142:	462f      	mov	r7, r5
 8010144:	2600      	movs	r6, #0
 8010146:	e01b      	b.n	8010180 <__kernel_rem_pio2+0xc8>
 8010148:	42ef      	cmn	r7, r5
 801014a:	d407      	bmi.n	801015c <__kernel_rem_pio2+0xa4>
 801014c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010150:	f7f0 fa10 	bl	8000574 <__aeabi_i2d>
 8010154:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010158:	3501      	adds	r5, #1
 801015a:	e7da      	b.n	8010112 <__kernel_rem_pio2+0x5a>
 801015c:	ec51 0b18 	vmov	r0, r1, d8
 8010160:	e7f8      	b.n	8010154 <__kernel_rem_pio2+0x9c>
 8010162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010166:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801016a:	f7f0 fa6d 	bl	8000648 <__aeabi_dmul>
 801016e:	4602      	mov	r2, r0
 8010170:	460b      	mov	r3, r1
 8010172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010176:	f7f0 f8b1 	bl	80002dc <__adddf3>
 801017a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801017e:	3601      	adds	r6, #1
 8010180:	9b06      	ldr	r3, [sp, #24]
 8010182:	429e      	cmp	r6, r3
 8010184:	f1a7 0708 	sub.w	r7, r7, #8
 8010188:	ddeb      	ble.n	8010162 <__kernel_rem_pio2+0xaa>
 801018a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801018e:	3508      	adds	r5, #8
 8010190:	ecab 7b02 	vstmia	fp!, {d7}
 8010194:	f108 0801 	add.w	r8, r8, #1
 8010198:	e7ca      	b.n	8010130 <__kernel_rem_pio2+0x78>
 801019a:	9b04      	ldr	r3, [sp, #16]
 801019c:	aa0c      	add	r2, sp, #48	; 0x30
 801019e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80101a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80101a4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80101a6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80101aa:	9c04      	ldr	r4, [sp, #16]
 80101ac:	930a      	str	r3, [sp, #40]	; 0x28
 80101ae:	ab98      	add	r3, sp, #608	; 0x260
 80101b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80101b4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80101b8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80101bc:	f8cd b008 	str.w	fp, [sp, #8]
 80101c0:	4625      	mov	r5, r4
 80101c2:	2d00      	cmp	r5, #0
 80101c4:	dc78      	bgt.n	80102b8 <__kernel_rem_pio2+0x200>
 80101c6:	ec47 6b10 	vmov	d0, r6, r7
 80101ca:	4650      	mov	r0, sl
 80101cc:	f000 fbfc 	bl	80109c8 <scalbn>
 80101d0:	ec57 6b10 	vmov	r6, r7, d0
 80101d4:	2200      	movs	r2, #0
 80101d6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80101da:	ee10 0a10 	vmov	r0, s0
 80101de:	4639      	mov	r1, r7
 80101e0:	f7f0 fa32 	bl	8000648 <__aeabi_dmul>
 80101e4:	ec41 0b10 	vmov	d0, r0, r1
 80101e8:	f000 fb6e 	bl	80108c8 <floor>
 80101ec:	4b7f      	ldr	r3, [pc, #508]	; (80103ec <__kernel_rem_pio2+0x334>)
 80101ee:	ec51 0b10 	vmov	r0, r1, d0
 80101f2:	2200      	movs	r2, #0
 80101f4:	f7f0 fa28 	bl	8000648 <__aeabi_dmul>
 80101f8:	4602      	mov	r2, r0
 80101fa:	460b      	mov	r3, r1
 80101fc:	4630      	mov	r0, r6
 80101fe:	4639      	mov	r1, r7
 8010200:	f7f0 f86a 	bl	80002d8 <__aeabi_dsub>
 8010204:	460f      	mov	r7, r1
 8010206:	4606      	mov	r6, r0
 8010208:	f7f0 fcce 	bl	8000ba8 <__aeabi_d2iz>
 801020c:	9007      	str	r0, [sp, #28]
 801020e:	f7f0 f9b1 	bl	8000574 <__aeabi_i2d>
 8010212:	4602      	mov	r2, r0
 8010214:	460b      	mov	r3, r1
 8010216:	4630      	mov	r0, r6
 8010218:	4639      	mov	r1, r7
 801021a:	f7f0 f85d 	bl	80002d8 <__aeabi_dsub>
 801021e:	f1ba 0f00 	cmp.w	sl, #0
 8010222:	4606      	mov	r6, r0
 8010224:	460f      	mov	r7, r1
 8010226:	dd70      	ble.n	801030a <__kernel_rem_pio2+0x252>
 8010228:	1e62      	subs	r2, r4, #1
 801022a:	ab0c      	add	r3, sp, #48	; 0x30
 801022c:	9d07      	ldr	r5, [sp, #28]
 801022e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8010232:	f1ca 0118 	rsb	r1, sl, #24
 8010236:	fa40 f301 	asr.w	r3, r0, r1
 801023a:	441d      	add	r5, r3
 801023c:	408b      	lsls	r3, r1
 801023e:	1ac0      	subs	r0, r0, r3
 8010240:	ab0c      	add	r3, sp, #48	; 0x30
 8010242:	9507      	str	r5, [sp, #28]
 8010244:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8010248:	f1ca 0317 	rsb	r3, sl, #23
 801024c:	fa40 f303 	asr.w	r3, r0, r3
 8010250:	9302      	str	r3, [sp, #8]
 8010252:	9b02      	ldr	r3, [sp, #8]
 8010254:	2b00      	cmp	r3, #0
 8010256:	dd66      	ble.n	8010326 <__kernel_rem_pio2+0x26e>
 8010258:	9b07      	ldr	r3, [sp, #28]
 801025a:	2200      	movs	r2, #0
 801025c:	3301      	adds	r3, #1
 801025e:	9307      	str	r3, [sp, #28]
 8010260:	4615      	mov	r5, r2
 8010262:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010266:	4294      	cmp	r4, r2
 8010268:	f300 8099 	bgt.w	801039e <__kernel_rem_pio2+0x2e6>
 801026c:	f1ba 0f00 	cmp.w	sl, #0
 8010270:	dd07      	ble.n	8010282 <__kernel_rem_pio2+0x1ca>
 8010272:	f1ba 0f01 	cmp.w	sl, #1
 8010276:	f000 80a5 	beq.w	80103c4 <__kernel_rem_pio2+0x30c>
 801027a:	f1ba 0f02 	cmp.w	sl, #2
 801027e:	f000 80c1 	beq.w	8010404 <__kernel_rem_pio2+0x34c>
 8010282:	9b02      	ldr	r3, [sp, #8]
 8010284:	2b02      	cmp	r3, #2
 8010286:	d14e      	bne.n	8010326 <__kernel_rem_pio2+0x26e>
 8010288:	4632      	mov	r2, r6
 801028a:	463b      	mov	r3, r7
 801028c:	4958      	ldr	r1, [pc, #352]	; (80103f0 <__kernel_rem_pio2+0x338>)
 801028e:	2000      	movs	r0, #0
 8010290:	f7f0 f822 	bl	80002d8 <__aeabi_dsub>
 8010294:	4606      	mov	r6, r0
 8010296:	460f      	mov	r7, r1
 8010298:	2d00      	cmp	r5, #0
 801029a:	d044      	beq.n	8010326 <__kernel_rem_pio2+0x26e>
 801029c:	4650      	mov	r0, sl
 801029e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80103e0 <__kernel_rem_pio2+0x328>
 80102a2:	f000 fb91 	bl	80109c8 <scalbn>
 80102a6:	4630      	mov	r0, r6
 80102a8:	4639      	mov	r1, r7
 80102aa:	ec53 2b10 	vmov	r2, r3, d0
 80102ae:	f7f0 f813 	bl	80002d8 <__aeabi_dsub>
 80102b2:	4606      	mov	r6, r0
 80102b4:	460f      	mov	r7, r1
 80102b6:	e036      	b.n	8010326 <__kernel_rem_pio2+0x26e>
 80102b8:	4b4e      	ldr	r3, [pc, #312]	; (80103f4 <__kernel_rem_pio2+0x33c>)
 80102ba:	2200      	movs	r2, #0
 80102bc:	4630      	mov	r0, r6
 80102be:	4639      	mov	r1, r7
 80102c0:	f7f0 f9c2 	bl	8000648 <__aeabi_dmul>
 80102c4:	f7f0 fc70 	bl	8000ba8 <__aeabi_d2iz>
 80102c8:	f7f0 f954 	bl	8000574 <__aeabi_i2d>
 80102cc:	4b4a      	ldr	r3, [pc, #296]	; (80103f8 <__kernel_rem_pio2+0x340>)
 80102ce:	2200      	movs	r2, #0
 80102d0:	4680      	mov	r8, r0
 80102d2:	4689      	mov	r9, r1
 80102d4:	f7f0 f9b8 	bl	8000648 <__aeabi_dmul>
 80102d8:	4602      	mov	r2, r0
 80102da:	460b      	mov	r3, r1
 80102dc:	4630      	mov	r0, r6
 80102de:	4639      	mov	r1, r7
 80102e0:	f7ef fffa 	bl	80002d8 <__aeabi_dsub>
 80102e4:	f7f0 fc60 	bl	8000ba8 <__aeabi_d2iz>
 80102e8:	9b02      	ldr	r3, [sp, #8]
 80102ea:	f843 0b04 	str.w	r0, [r3], #4
 80102ee:	3d01      	subs	r5, #1
 80102f0:	9302      	str	r3, [sp, #8]
 80102f2:	ab70      	add	r3, sp, #448	; 0x1c0
 80102f4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80102f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fc:	4640      	mov	r0, r8
 80102fe:	4649      	mov	r1, r9
 8010300:	f7ef ffec 	bl	80002dc <__adddf3>
 8010304:	4606      	mov	r6, r0
 8010306:	460f      	mov	r7, r1
 8010308:	e75b      	b.n	80101c2 <__kernel_rem_pio2+0x10a>
 801030a:	d105      	bne.n	8010318 <__kernel_rem_pio2+0x260>
 801030c:	1e63      	subs	r3, r4, #1
 801030e:	aa0c      	add	r2, sp, #48	; 0x30
 8010310:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010314:	15c3      	asrs	r3, r0, #23
 8010316:	e79b      	b.n	8010250 <__kernel_rem_pio2+0x198>
 8010318:	4b38      	ldr	r3, [pc, #224]	; (80103fc <__kernel_rem_pio2+0x344>)
 801031a:	2200      	movs	r2, #0
 801031c:	f7f0 fc1a 	bl	8000b54 <__aeabi_dcmpge>
 8010320:	2800      	cmp	r0, #0
 8010322:	d139      	bne.n	8010398 <__kernel_rem_pio2+0x2e0>
 8010324:	9002      	str	r0, [sp, #8]
 8010326:	2200      	movs	r2, #0
 8010328:	2300      	movs	r3, #0
 801032a:	4630      	mov	r0, r6
 801032c:	4639      	mov	r1, r7
 801032e:	f7f0 fbf3 	bl	8000b18 <__aeabi_dcmpeq>
 8010332:	2800      	cmp	r0, #0
 8010334:	f000 80b4 	beq.w	80104a0 <__kernel_rem_pio2+0x3e8>
 8010338:	f104 3bff 	add.w	fp, r4, #4294967295
 801033c:	465b      	mov	r3, fp
 801033e:	2200      	movs	r2, #0
 8010340:	9904      	ldr	r1, [sp, #16]
 8010342:	428b      	cmp	r3, r1
 8010344:	da65      	bge.n	8010412 <__kernel_rem_pio2+0x35a>
 8010346:	2a00      	cmp	r2, #0
 8010348:	d07b      	beq.n	8010442 <__kernel_rem_pio2+0x38a>
 801034a:	ab0c      	add	r3, sp, #48	; 0x30
 801034c:	f1aa 0a18 	sub.w	sl, sl, #24
 8010350:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8010354:	2b00      	cmp	r3, #0
 8010356:	f000 80a0 	beq.w	801049a <__kernel_rem_pio2+0x3e2>
 801035a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80103e0 <__kernel_rem_pio2+0x328>
 801035e:	4650      	mov	r0, sl
 8010360:	f000 fb32 	bl	80109c8 <scalbn>
 8010364:	4f23      	ldr	r7, [pc, #140]	; (80103f4 <__kernel_rem_pio2+0x33c>)
 8010366:	ec55 4b10 	vmov	r4, r5, d0
 801036a:	46d8      	mov	r8, fp
 801036c:	2600      	movs	r6, #0
 801036e:	f1b8 0f00 	cmp.w	r8, #0
 8010372:	f280 80cf 	bge.w	8010514 <__kernel_rem_pio2+0x45c>
 8010376:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80103d8 <__kernel_rem_pio2+0x320>
 801037a:	465f      	mov	r7, fp
 801037c:	f04f 0800 	mov.w	r8, #0
 8010380:	2f00      	cmp	r7, #0
 8010382:	f2c0 80fd 	blt.w	8010580 <__kernel_rem_pio2+0x4c8>
 8010386:	ab70      	add	r3, sp, #448	; 0x1c0
 8010388:	f8df a074 	ldr.w	sl, [pc, #116]	; 8010400 <__kernel_rem_pio2+0x348>
 801038c:	ec55 4b18 	vmov	r4, r5, d8
 8010390:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8010394:	2600      	movs	r6, #0
 8010396:	e0e5      	b.n	8010564 <__kernel_rem_pio2+0x4ac>
 8010398:	2302      	movs	r3, #2
 801039a:	9302      	str	r3, [sp, #8]
 801039c:	e75c      	b.n	8010258 <__kernel_rem_pio2+0x1a0>
 801039e:	f8db 3000 	ldr.w	r3, [fp]
 80103a2:	b955      	cbnz	r5, 80103ba <__kernel_rem_pio2+0x302>
 80103a4:	b123      	cbz	r3, 80103b0 <__kernel_rem_pio2+0x2f8>
 80103a6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80103aa:	f8cb 3000 	str.w	r3, [fp]
 80103ae:	2301      	movs	r3, #1
 80103b0:	3201      	adds	r2, #1
 80103b2:	f10b 0b04 	add.w	fp, fp, #4
 80103b6:	461d      	mov	r5, r3
 80103b8:	e755      	b.n	8010266 <__kernel_rem_pio2+0x1ae>
 80103ba:	1acb      	subs	r3, r1, r3
 80103bc:	f8cb 3000 	str.w	r3, [fp]
 80103c0:	462b      	mov	r3, r5
 80103c2:	e7f5      	b.n	80103b0 <__kernel_rem_pio2+0x2f8>
 80103c4:	1e62      	subs	r2, r4, #1
 80103c6:	ab0c      	add	r3, sp, #48	; 0x30
 80103c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80103d0:	a90c      	add	r1, sp, #48	; 0x30
 80103d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80103d6:	e754      	b.n	8010282 <__kernel_rem_pio2+0x1ca>
	...
 80103e4:	3ff00000 	.word	0x3ff00000
 80103e8:	08011450 	.word	0x08011450
 80103ec:	40200000 	.word	0x40200000
 80103f0:	3ff00000 	.word	0x3ff00000
 80103f4:	3e700000 	.word	0x3e700000
 80103f8:	41700000 	.word	0x41700000
 80103fc:	3fe00000 	.word	0x3fe00000
 8010400:	08011410 	.word	0x08011410
 8010404:	1e62      	subs	r2, r4, #1
 8010406:	ab0c      	add	r3, sp, #48	; 0x30
 8010408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801040c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010410:	e7de      	b.n	80103d0 <__kernel_rem_pio2+0x318>
 8010412:	a90c      	add	r1, sp, #48	; 0x30
 8010414:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010418:	3b01      	subs	r3, #1
 801041a:	430a      	orrs	r2, r1
 801041c:	e790      	b.n	8010340 <__kernel_rem_pio2+0x288>
 801041e:	3301      	adds	r3, #1
 8010420:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010424:	2900      	cmp	r1, #0
 8010426:	d0fa      	beq.n	801041e <__kernel_rem_pio2+0x366>
 8010428:	9a08      	ldr	r2, [sp, #32]
 801042a:	18e3      	adds	r3, r4, r3
 801042c:	18a6      	adds	r6, r4, r2
 801042e:	aa20      	add	r2, sp, #128	; 0x80
 8010430:	1c65      	adds	r5, r4, #1
 8010432:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8010436:	9302      	str	r3, [sp, #8]
 8010438:	9b02      	ldr	r3, [sp, #8]
 801043a:	42ab      	cmp	r3, r5
 801043c:	da04      	bge.n	8010448 <__kernel_rem_pio2+0x390>
 801043e:	461c      	mov	r4, r3
 8010440:	e6b5      	b.n	80101ae <__kernel_rem_pio2+0xf6>
 8010442:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010444:	2301      	movs	r3, #1
 8010446:	e7eb      	b.n	8010420 <__kernel_rem_pio2+0x368>
 8010448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801044a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801044e:	f7f0 f891 	bl	8000574 <__aeabi_i2d>
 8010452:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010458:	46b3      	mov	fp, r6
 801045a:	461c      	mov	r4, r3
 801045c:	2700      	movs	r7, #0
 801045e:	f04f 0800 	mov.w	r8, #0
 8010462:	f04f 0900 	mov.w	r9, #0
 8010466:	9b06      	ldr	r3, [sp, #24]
 8010468:	429f      	cmp	r7, r3
 801046a:	dd06      	ble.n	801047a <__kernel_rem_pio2+0x3c2>
 801046c:	ab70      	add	r3, sp, #448	; 0x1c0
 801046e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010472:	e9c3 8900 	strd	r8, r9, [r3]
 8010476:	3501      	adds	r5, #1
 8010478:	e7de      	b.n	8010438 <__kernel_rem_pio2+0x380>
 801047a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801047e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8010482:	f7f0 f8e1 	bl	8000648 <__aeabi_dmul>
 8010486:	4602      	mov	r2, r0
 8010488:	460b      	mov	r3, r1
 801048a:	4640      	mov	r0, r8
 801048c:	4649      	mov	r1, r9
 801048e:	f7ef ff25 	bl	80002dc <__adddf3>
 8010492:	3701      	adds	r7, #1
 8010494:	4680      	mov	r8, r0
 8010496:	4689      	mov	r9, r1
 8010498:	e7e5      	b.n	8010466 <__kernel_rem_pio2+0x3ae>
 801049a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801049e:	e754      	b.n	801034a <__kernel_rem_pio2+0x292>
 80104a0:	ec47 6b10 	vmov	d0, r6, r7
 80104a4:	f1ca 0000 	rsb	r0, sl, #0
 80104a8:	f000 fa8e 	bl	80109c8 <scalbn>
 80104ac:	ec57 6b10 	vmov	r6, r7, d0
 80104b0:	4b9f      	ldr	r3, [pc, #636]	; (8010730 <__kernel_rem_pio2+0x678>)
 80104b2:	ee10 0a10 	vmov	r0, s0
 80104b6:	2200      	movs	r2, #0
 80104b8:	4639      	mov	r1, r7
 80104ba:	f7f0 fb4b 	bl	8000b54 <__aeabi_dcmpge>
 80104be:	b300      	cbz	r0, 8010502 <__kernel_rem_pio2+0x44a>
 80104c0:	4b9c      	ldr	r3, [pc, #624]	; (8010734 <__kernel_rem_pio2+0x67c>)
 80104c2:	2200      	movs	r2, #0
 80104c4:	4630      	mov	r0, r6
 80104c6:	4639      	mov	r1, r7
 80104c8:	f7f0 f8be 	bl	8000648 <__aeabi_dmul>
 80104cc:	f7f0 fb6c 	bl	8000ba8 <__aeabi_d2iz>
 80104d0:	4605      	mov	r5, r0
 80104d2:	f7f0 f84f 	bl	8000574 <__aeabi_i2d>
 80104d6:	4b96      	ldr	r3, [pc, #600]	; (8010730 <__kernel_rem_pio2+0x678>)
 80104d8:	2200      	movs	r2, #0
 80104da:	f7f0 f8b5 	bl	8000648 <__aeabi_dmul>
 80104de:	460b      	mov	r3, r1
 80104e0:	4602      	mov	r2, r0
 80104e2:	4639      	mov	r1, r7
 80104e4:	4630      	mov	r0, r6
 80104e6:	f7ef fef7 	bl	80002d8 <__aeabi_dsub>
 80104ea:	f7f0 fb5d 	bl	8000ba8 <__aeabi_d2iz>
 80104ee:	f104 0b01 	add.w	fp, r4, #1
 80104f2:	ab0c      	add	r3, sp, #48	; 0x30
 80104f4:	f10a 0a18 	add.w	sl, sl, #24
 80104f8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80104fc:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8010500:	e72b      	b.n	801035a <__kernel_rem_pio2+0x2a2>
 8010502:	4630      	mov	r0, r6
 8010504:	4639      	mov	r1, r7
 8010506:	f7f0 fb4f 	bl	8000ba8 <__aeabi_d2iz>
 801050a:	ab0c      	add	r3, sp, #48	; 0x30
 801050c:	46a3      	mov	fp, r4
 801050e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010512:	e722      	b.n	801035a <__kernel_rem_pio2+0x2a2>
 8010514:	ab70      	add	r3, sp, #448	; 0x1c0
 8010516:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 801051a:	ab0c      	add	r3, sp, #48	; 0x30
 801051c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010520:	f7f0 f828 	bl	8000574 <__aeabi_i2d>
 8010524:	4622      	mov	r2, r4
 8010526:	462b      	mov	r3, r5
 8010528:	f7f0 f88e 	bl	8000648 <__aeabi_dmul>
 801052c:	4632      	mov	r2, r6
 801052e:	e9c9 0100 	strd	r0, r1, [r9]
 8010532:	463b      	mov	r3, r7
 8010534:	4620      	mov	r0, r4
 8010536:	4629      	mov	r1, r5
 8010538:	f7f0 f886 	bl	8000648 <__aeabi_dmul>
 801053c:	f108 38ff 	add.w	r8, r8, #4294967295
 8010540:	4604      	mov	r4, r0
 8010542:	460d      	mov	r5, r1
 8010544:	e713      	b.n	801036e <__kernel_rem_pio2+0x2b6>
 8010546:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801054a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801054e:	f7f0 f87b 	bl	8000648 <__aeabi_dmul>
 8010552:	4602      	mov	r2, r0
 8010554:	460b      	mov	r3, r1
 8010556:	4620      	mov	r0, r4
 8010558:	4629      	mov	r1, r5
 801055a:	f7ef febf 	bl	80002dc <__adddf3>
 801055e:	3601      	adds	r6, #1
 8010560:	4604      	mov	r4, r0
 8010562:	460d      	mov	r5, r1
 8010564:	9b04      	ldr	r3, [sp, #16]
 8010566:	429e      	cmp	r6, r3
 8010568:	dc01      	bgt.n	801056e <__kernel_rem_pio2+0x4b6>
 801056a:	45b0      	cmp	r8, r6
 801056c:	daeb      	bge.n	8010546 <__kernel_rem_pio2+0x48e>
 801056e:	ab48      	add	r3, sp, #288	; 0x120
 8010570:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010574:	e9c3 4500 	strd	r4, r5, [r3]
 8010578:	3f01      	subs	r7, #1
 801057a:	f108 0801 	add.w	r8, r8, #1
 801057e:	e6ff      	b.n	8010380 <__kernel_rem_pio2+0x2c8>
 8010580:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010582:	2b02      	cmp	r3, #2
 8010584:	dc0b      	bgt.n	801059e <__kernel_rem_pio2+0x4e6>
 8010586:	2b00      	cmp	r3, #0
 8010588:	dc6e      	bgt.n	8010668 <__kernel_rem_pio2+0x5b0>
 801058a:	d045      	beq.n	8010618 <__kernel_rem_pio2+0x560>
 801058c:	9b07      	ldr	r3, [sp, #28]
 801058e:	f003 0007 	and.w	r0, r3, #7
 8010592:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8010596:	ecbd 8b02 	vpop	{d8}
 801059a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801059e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80105a0:	2b03      	cmp	r3, #3
 80105a2:	d1f3      	bne.n	801058c <__kernel_rem_pio2+0x4d4>
 80105a4:	ab48      	add	r3, sp, #288	; 0x120
 80105a6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80105aa:	46d0      	mov	r8, sl
 80105ac:	46d9      	mov	r9, fp
 80105ae:	f1b9 0f00 	cmp.w	r9, #0
 80105b2:	f1a8 0808 	sub.w	r8, r8, #8
 80105b6:	dc64      	bgt.n	8010682 <__kernel_rem_pio2+0x5ca>
 80105b8:	465c      	mov	r4, fp
 80105ba:	2c01      	cmp	r4, #1
 80105bc:	f1aa 0a08 	sub.w	sl, sl, #8
 80105c0:	dc7e      	bgt.n	80106c0 <__kernel_rem_pio2+0x608>
 80105c2:	2000      	movs	r0, #0
 80105c4:	2100      	movs	r1, #0
 80105c6:	f1bb 0f01 	cmp.w	fp, #1
 80105ca:	f300 8097 	bgt.w	80106fc <__kernel_rem_pio2+0x644>
 80105ce:	9b02      	ldr	r3, [sp, #8]
 80105d0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80105d4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80105d8:	2b00      	cmp	r3, #0
 80105da:	f040 8099 	bne.w	8010710 <__kernel_rem_pio2+0x658>
 80105de:	9b01      	ldr	r3, [sp, #4]
 80105e0:	e9c3 5600 	strd	r5, r6, [r3]
 80105e4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80105e8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80105ec:	e7ce      	b.n	801058c <__kernel_rem_pio2+0x4d4>
 80105ee:	ab48      	add	r3, sp, #288	; 0x120
 80105f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80105f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105f8:	f7ef fe70 	bl	80002dc <__adddf3>
 80105fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010600:	f1bb 0f00 	cmp.w	fp, #0
 8010604:	daf3      	bge.n	80105ee <__kernel_rem_pio2+0x536>
 8010606:	9b02      	ldr	r3, [sp, #8]
 8010608:	b113      	cbz	r3, 8010610 <__kernel_rem_pio2+0x558>
 801060a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801060e:	4619      	mov	r1, r3
 8010610:	9b01      	ldr	r3, [sp, #4]
 8010612:	e9c3 0100 	strd	r0, r1, [r3]
 8010616:	e7b9      	b.n	801058c <__kernel_rem_pio2+0x4d4>
 8010618:	2000      	movs	r0, #0
 801061a:	2100      	movs	r1, #0
 801061c:	e7f0      	b.n	8010600 <__kernel_rem_pio2+0x548>
 801061e:	ab48      	add	r3, sp, #288	; 0x120
 8010620:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010628:	f7ef fe58 	bl	80002dc <__adddf3>
 801062c:	3c01      	subs	r4, #1
 801062e:	2c00      	cmp	r4, #0
 8010630:	daf5      	bge.n	801061e <__kernel_rem_pio2+0x566>
 8010632:	9b02      	ldr	r3, [sp, #8]
 8010634:	b1e3      	cbz	r3, 8010670 <__kernel_rem_pio2+0x5b8>
 8010636:	4602      	mov	r2, r0
 8010638:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801063c:	9c01      	ldr	r4, [sp, #4]
 801063e:	e9c4 2300 	strd	r2, r3, [r4]
 8010642:	4602      	mov	r2, r0
 8010644:	460b      	mov	r3, r1
 8010646:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801064a:	f7ef fe45 	bl	80002d8 <__aeabi_dsub>
 801064e:	ad4a      	add	r5, sp, #296	; 0x128
 8010650:	2401      	movs	r4, #1
 8010652:	45a3      	cmp	fp, r4
 8010654:	da0f      	bge.n	8010676 <__kernel_rem_pio2+0x5be>
 8010656:	9b02      	ldr	r3, [sp, #8]
 8010658:	b113      	cbz	r3, 8010660 <__kernel_rem_pio2+0x5a8>
 801065a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801065e:	4619      	mov	r1, r3
 8010660:	9b01      	ldr	r3, [sp, #4]
 8010662:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010666:	e791      	b.n	801058c <__kernel_rem_pio2+0x4d4>
 8010668:	465c      	mov	r4, fp
 801066a:	2000      	movs	r0, #0
 801066c:	2100      	movs	r1, #0
 801066e:	e7de      	b.n	801062e <__kernel_rem_pio2+0x576>
 8010670:	4602      	mov	r2, r0
 8010672:	460b      	mov	r3, r1
 8010674:	e7e2      	b.n	801063c <__kernel_rem_pio2+0x584>
 8010676:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801067a:	f7ef fe2f 	bl	80002dc <__adddf3>
 801067e:	3401      	adds	r4, #1
 8010680:	e7e7      	b.n	8010652 <__kernel_rem_pio2+0x59a>
 8010682:	e9d8 4500 	ldrd	r4, r5, [r8]
 8010686:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 801068a:	4620      	mov	r0, r4
 801068c:	4632      	mov	r2, r6
 801068e:	463b      	mov	r3, r7
 8010690:	4629      	mov	r1, r5
 8010692:	f7ef fe23 	bl	80002dc <__adddf3>
 8010696:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801069a:	4602      	mov	r2, r0
 801069c:	460b      	mov	r3, r1
 801069e:	4620      	mov	r0, r4
 80106a0:	4629      	mov	r1, r5
 80106a2:	f7ef fe19 	bl	80002d8 <__aeabi_dsub>
 80106a6:	4632      	mov	r2, r6
 80106a8:	463b      	mov	r3, r7
 80106aa:	f7ef fe17 	bl	80002dc <__adddf3>
 80106ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80106b2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80106b6:	ed88 7b00 	vstr	d7, [r8]
 80106ba:	f109 39ff 	add.w	r9, r9, #4294967295
 80106be:	e776      	b.n	80105ae <__kernel_rem_pio2+0x4f6>
 80106c0:	e9da 8900 	ldrd	r8, r9, [sl]
 80106c4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80106c8:	4640      	mov	r0, r8
 80106ca:	4632      	mov	r2, r6
 80106cc:	463b      	mov	r3, r7
 80106ce:	4649      	mov	r1, r9
 80106d0:	f7ef fe04 	bl	80002dc <__adddf3>
 80106d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80106d8:	4602      	mov	r2, r0
 80106da:	460b      	mov	r3, r1
 80106dc:	4640      	mov	r0, r8
 80106de:	4649      	mov	r1, r9
 80106e0:	f7ef fdfa 	bl	80002d8 <__aeabi_dsub>
 80106e4:	4632      	mov	r2, r6
 80106e6:	463b      	mov	r3, r7
 80106e8:	f7ef fdf8 	bl	80002dc <__adddf3>
 80106ec:	ed9d 7b04 	vldr	d7, [sp, #16]
 80106f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80106f4:	ed8a 7b00 	vstr	d7, [sl]
 80106f8:	3c01      	subs	r4, #1
 80106fa:	e75e      	b.n	80105ba <__kernel_rem_pio2+0x502>
 80106fc:	ab48      	add	r3, sp, #288	; 0x120
 80106fe:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010706:	f7ef fde9 	bl	80002dc <__adddf3>
 801070a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801070e:	e75a      	b.n	80105c6 <__kernel_rem_pio2+0x50e>
 8010710:	9b01      	ldr	r3, [sp, #4]
 8010712:	9a01      	ldr	r2, [sp, #4]
 8010714:	601d      	str	r5, [r3, #0]
 8010716:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801071a:	605c      	str	r4, [r3, #4]
 801071c:	609f      	str	r7, [r3, #8]
 801071e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8010722:	60d3      	str	r3, [r2, #12]
 8010724:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010728:	6110      	str	r0, [r2, #16]
 801072a:	6153      	str	r3, [r2, #20]
 801072c:	e72e      	b.n	801058c <__kernel_rem_pio2+0x4d4>
 801072e:	bf00      	nop
 8010730:	41700000 	.word	0x41700000
 8010734:	3e700000 	.word	0x3e700000

08010738 <__kernel_sin>:
 8010738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801073c:	ed2d 8b04 	vpush	{d8-d9}
 8010740:	eeb0 8a41 	vmov.f32	s16, s2
 8010744:	eef0 8a61 	vmov.f32	s17, s3
 8010748:	ec55 4b10 	vmov	r4, r5, d0
 801074c:	b083      	sub	sp, #12
 801074e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010752:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010756:	9001      	str	r0, [sp, #4]
 8010758:	da06      	bge.n	8010768 <__kernel_sin+0x30>
 801075a:	ee10 0a10 	vmov	r0, s0
 801075e:	4629      	mov	r1, r5
 8010760:	f7f0 fa22 	bl	8000ba8 <__aeabi_d2iz>
 8010764:	2800      	cmp	r0, #0
 8010766:	d051      	beq.n	801080c <__kernel_sin+0xd4>
 8010768:	4622      	mov	r2, r4
 801076a:	462b      	mov	r3, r5
 801076c:	4620      	mov	r0, r4
 801076e:	4629      	mov	r1, r5
 8010770:	f7ef ff6a 	bl	8000648 <__aeabi_dmul>
 8010774:	4682      	mov	sl, r0
 8010776:	468b      	mov	fp, r1
 8010778:	4602      	mov	r2, r0
 801077a:	460b      	mov	r3, r1
 801077c:	4620      	mov	r0, r4
 801077e:	4629      	mov	r1, r5
 8010780:	f7ef ff62 	bl	8000648 <__aeabi_dmul>
 8010784:	a341      	add	r3, pc, #260	; (adr r3, 801088c <__kernel_sin+0x154>)
 8010786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801078a:	4680      	mov	r8, r0
 801078c:	4689      	mov	r9, r1
 801078e:	4650      	mov	r0, sl
 8010790:	4659      	mov	r1, fp
 8010792:	f7ef ff59 	bl	8000648 <__aeabi_dmul>
 8010796:	a33f      	add	r3, pc, #252	; (adr r3, 8010894 <__kernel_sin+0x15c>)
 8010798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801079c:	f7ef fd9c 	bl	80002d8 <__aeabi_dsub>
 80107a0:	4652      	mov	r2, sl
 80107a2:	465b      	mov	r3, fp
 80107a4:	f7ef ff50 	bl	8000648 <__aeabi_dmul>
 80107a8:	a33c      	add	r3, pc, #240	; (adr r3, 801089c <__kernel_sin+0x164>)
 80107aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ae:	f7ef fd95 	bl	80002dc <__adddf3>
 80107b2:	4652      	mov	r2, sl
 80107b4:	465b      	mov	r3, fp
 80107b6:	f7ef ff47 	bl	8000648 <__aeabi_dmul>
 80107ba:	a33a      	add	r3, pc, #232	; (adr r3, 80108a4 <__kernel_sin+0x16c>)
 80107bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c0:	f7ef fd8a 	bl	80002d8 <__aeabi_dsub>
 80107c4:	4652      	mov	r2, sl
 80107c6:	465b      	mov	r3, fp
 80107c8:	f7ef ff3e 	bl	8000648 <__aeabi_dmul>
 80107cc:	a337      	add	r3, pc, #220	; (adr r3, 80108ac <__kernel_sin+0x174>)
 80107ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107d2:	f7ef fd83 	bl	80002dc <__adddf3>
 80107d6:	9b01      	ldr	r3, [sp, #4]
 80107d8:	4606      	mov	r6, r0
 80107da:	460f      	mov	r7, r1
 80107dc:	b9eb      	cbnz	r3, 801081a <__kernel_sin+0xe2>
 80107de:	4602      	mov	r2, r0
 80107e0:	460b      	mov	r3, r1
 80107e2:	4650      	mov	r0, sl
 80107e4:	4659      	mov	r1, fp
 80107e6:	f7ef ff2f 	bl	8000648 <__aeabi_dmul>
 80107ea:	a325      	add	r3, pc, #148	; (adr r3, 8010880 <__kernel_sin+0x148>)
 80107ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f0:	f7ef fd72 	bl	80002d8 <__aeabi_dsub>
 80107f4:	4642      	mov	r2, r8
 80107f6:	464b      	mov	r3, r9
 80107f8:	f7ef ff26 	bl	8000648 <__aeabi_dmul>
 80107fc:	4602      	mov	r2, r0
 80107fe:	460b      	mov	r3, r1
 8010800:	4620      	mov	r0, r4
 8010802:	4629      	mov	r1, r5
 8010804:	f7ef fd6a 	bl	80002dc <__adddf3>
 8010808:	4604      	mov	r4, r0
 801080a:	460d      	mov	r5, r1
 801080c:	ec45 4b10 	vmov	d0, r4, r5
 8010810:	b003      	add	sp, #12
 8010812:	ecbd 8b04 	vpop	{d8-d9}
 8010816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801081a:	4b1b      	ldr	r3, [pc, #108]	; (8010888 <__kernel_sin+0x150>)
 801081c:	ec51 0b18 	vmov	r0, r1, d8
 8010820:	2200      	movs	r2, #0
 8010822:	f7ef ff11 	bl	8000648 <__aeabi_dmul>
 8010826:	4632      	mov	r2, r6
 8010828:	ec41 0b19 	vmov	d9, r0, r1
 801082c:	463b      	mov	r3, r7
 801082e:	4640      	mov	r0, r8
 8010830:	4649      	mov	r1, r9
 8010832:	f7ef ff09 	bl	8000648 <__aeabi_dmul>
 8010836:	4602      	mov	r2, r0
 8010838:	460b      	mov	r3, r1
 801083a:	ec51 0b19 	vmov	r0, r1, d9
 801083e:	f7ef fd4b 	bl	80002d8 <__aeabi_dsub>
 8010842:	4652      	mov	r2, sl
 8010844:	465b      	mov	r3, fp
 8010846:	f7ef feff 	bl	8000648 <__aeabi_dmul>
 801084a:	ec53 2b18 	vmov	r2, r3, d8
 801084e:	f7ef fd43 	bl	80002d8 <__aeabi_dsub>
 8010852:	a30b      	add	r3, pc, #44	; (adr r3, 8010880 <__kernel_sin+0x148>)
 8010854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010858:	4606      	mov	r6, r0
 801085a:	460f      	mov	r7, r1
 801085c:	4640      	mov	r0, r8
 801085e:	4649      	mov	r1, r9
 8010860:	f7ef fef2 	bl	8000648 <__aeabi_dmul>
 8010864:	4602      	mov	r2, r0
 8010866:	460b      	mov	r3, r1
 8010868:	4630      	mov	r0, r6
 801086a:	4639      	mov	r1, r7
 801086c:	f7ef fd36 	bl	80002dc <__adddf3>
 8010870:	4602      	mov	r2, r0
 8010872:	460b      	mov	r3, r1
 8010874:	4620      	mov	r0, r4
 8010876:	4629      	mov	r1, r5
 8010878:	f7ef fd2e 	bl	80002d8 <__aeabi_dsub>
 801087c:	e7c4      	b.n	8010808 <__kernel_sin+0xd0>
 801087e:	bf00      	nop
 8010880:	55555549 	.word	0x55555549
 8010884:	3fc55555 	.word	0x3fc55555
 8010888:	3fe00000 	.word	0x3fe00000
 801088c:	5acfd57c 	.word	0x5acfd57c
 8010890:	3de5d93a 	.word	0x3de5d93a
 8010894:	8a2b9ceb 	.word	0x8a2b9ceb
 8010898:	3e5ae5e6 	.word	0x3e5ae5e6
 801089c:	57b1fe7d 	.word	0x57b1fe7d
 80108a0:	3ec71de3 	.word	0x3ec71de3
 80108a4:	19c161d5 	.word	0x19c161d5
 80108a8:	3f2a01a0 	.word	0x3f2a01a0
 80108ac:	1110f8a6 	.word	0x1110f8a6
 80108b0:	3f811111 	.word	0x3f811111

080108b4 <fabs>:
 80108b4:	ec51 0b10 	vmov	r0, r1, d0
 80108b8:	ee10 2a10 	vmov	r2, s0
 80108bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80108c0:	ec43 2b10 	vmov	d0, r2, r3
 80108c4:	4770      	bx	lr
	...

080108c8 <floor>:
 80108c8:	ec51 0b10 	vmov	r0, r1, d0
 80108cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80108d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80108d8:	2e13      	cmp	r6, #19
 80108da:	ee10 5a10 	vmov	r5, s0
 80108de:	ee10 8a10 	vmov	r8, s0
 80108e2:	460c      	mov	r4, r1
 80108e4:	dc32      	bgt.n	801094c <floor+0x84>
 80108e6:	2e00      	cmp	r6, #0
 80108e8:	da14      	bge.n	8010914 <floor+0x4c>
 80108ea:	a333      	add	r3, pc, #204	; (adr r3, 80109b8 <floor+0xf0>)
 80108ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f0:	f7ef fcf4 	bl	80002dc <__adddf3>
 80108f4:	2200      	movs	r2, #0
 80108f6:	2300      	movs	r3, #0
 80108f8:	f7f0 f936 	bl	8000b68 <__aeabi_dcmpgt>
 80108fc:	b138      	cbz	r0, 801090e <floor+0x46>
 80108fe:	2c00      	cmp	r4, #0
 8010900:	da57      	bge.n	80109b2 <floor+0xea>
 8010902:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010906:	431d      	orrs	r5, r3
 8010908:	d001      	beq.n	801090e <floor+0x46>
 801090a:	4c2d      	ldr	r4, [pc, #180]	; (80109c0 <floor+0xf8>)
 801090c:	2500      	movs	r5, #0
 801090e:	4621      	mov	r1, r4
 8010910:	4628      	mov	r0, r5
 8010912:	e025      	b.n	8010960 <floor+0x98>
 8010914:	4f2b      	ldr	r7, [pc, #172]	; (80109c4 <floor+0xfc>)
 8010916:	4137      	asrs	r7, r6
 8010918:	ea01 0307 	and.w	r3, r1, r7
 801091c:	4303      	orrs	r3, r0
 801091e:	d01f      	beq.n	8010960 <floor+0x98>
 8010920:	a325      	add	r3, pc, #148	; (adr r3, 80109b8 <floor+0xf0>)
 8010922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010926:	f7ef fcd9 	bl	80002dc <__adddf3>
 801092a:	2200      	movs	r2, #0
 801092c:	2300      	movs	r3, #0
 801092e:	f7f0 f91b 	bl	8000b68 <__aeabi_dcmpgt>
 8010932:	2800      	cmp	r0, #0
 8010934:	d0eb      	beq.n	801090e <floor+0x46>
 8010936:	2c00      	cmp	r4, #0
 8010938:	bfbe      	ittt	lt
 801093a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801093e:	fa43 f606 	asrlt.w	r6, r3, r6
 8010942:	19a4      	addlt	r4, r4, r6
 8010944:	ea24 0407 	bic.w	r4, r4, r7
 8010948:	2500      	movs	r5, #0
 801094a:	e7e0      	b.n	801090e <floor+0x46>
 801094c:	2e33      	cmp	r6, #51	; 0x33
 801094e:	dd0b      	ble.n	8010968 <floor+0xa0>
 8010950:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010954:	d104      	bne.n	8010960 <floor+0x98>
 8010956:	ee10 2a10 	vmov	r2, s0
 801095a:	460b      	mov	r3, r1
 801095c:	f7ef fcbe 	bl	80002dc <__adddf3>
 8010960:	ec41 0b10 	vmov	d0, r0, r1
 8010964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010968:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801096c:	f04f 33ff 	mov.w	r3, #4294967295
 8010970:	fa23 f707 	lsr.w	r7, r3, r7
 8010974:	4207      	tst	r7, r0
 8010976:	d0f3      	beq.n	8010960 <floor+0x98>
 8010978:	a30f      	add	r3, pc, #60	; (adr r3, 80109b8 <floor+0xf0>)
 801097a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801097e:	f7ef fcad 	bl	80002dc <__adddf3>
 8010982:	2200      	movs	r2, #0
 8010984:	2300      	movs	r3, #0
 8010986:	f7f0 f8ef 	bl	8000b68 <__aeabi_dcmpgt>
 801098a:	2800      	cmp	r0, #0
 801098c:	d0bf      	beq.n	801090e <floor+0x46>
 801098e:	2c00      	cmp	r4, #0
 8010990:	da02      	bge.n	8010998 <floor+0xd0>
 8010992:	2e14      	cmp	r6, #20
 8010994:	d103      	bne.n	801099e <floor+0xd6>
 8010996:	3401      	adds	r4, #1
 8010998:	ea25 0507 	bic.w	r5, r5, r7
 801099c:	e7b7      	b.n	801090e <floor+0x46>
 801099e:	2301      	movs	r3, #1
 80109a0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80109a4:	fa03 f606 	lsl.w	r6, r3, r6
 80109a8:	4435      	add	r5, r6
 80109aa:	4545      	cmp	r5, r8
 80109ac:	bf38      	it	cc
 80109ae:	18e4      	addcc	r4, r4, r3
 80109b0:	e7f2      	b.n	8010998 <floor+0xd0>
 80109b2:	2500      	movs	r5, #0
 80109b4:	462c      	mov	r4, r5
 80109b6:	e7aa      	b.n	801090e <floor+0x46>
 80109b8:	8800759c 	.word	0x8800759c
 80109bc:	7e37e43c 	.word	0x7e37e43c
 80109c0:	bff00000 	.word	0xbff00000
 80109c4:	000fffff 	.word	0x000fffff

080109c8 <scalbn>:
 80109c8:	b570      	push	{r4, r5, r6, lr}
 80109ca:	ec55 4b10 	vmov	r4, r5, d0
 80109ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80109d2:	4606      	mov	r6, r0
 80109d4:	462b      	mov	r3, r5
 80109d6:	b99a      	cbnz	r2, 8010a00 <scalbn+0x38>
 80109d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80109dc:	4323      	orrs	r3, r4
 80109de:	d036      	beq.n	8010a4e <scalbn+0x86>
 80109e0:	4b39      	ldr	r3, [pc, #228]	; (8010ac8 <scalbn+0x100>)
 80109e2:	4629      	mov	r1, r5
 80109e4:	ee10 0a10 	vmov	r0, s0
 80109e8:	2200      	movs	r2, #0
 80109ea:	f7ef fe2d 	bl	8000648 <__aeabi_dmul>
 80109ee:	4b37      	ldr	r3, [pc, #220]	; (8010acc <scalbn+0x104>)
 80109f0:	429e      	cmp	r6, r3
 80109f2:	4604      	mov	r4, r0
 80109f4:	460d      	mov	r5, r1
 80109f6:	da10      	bge.n	8010a1a <scalbn+0x52>
 80109f8:	a32b      	add	r3, pc, #172	; (adr r3, 8010aa8 <scalbn+0xe0>)
 80109fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109fe:	e03a      	b.n	8010a76 <scalbn+0xae>
 8010a00:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010a04:	428a      	cmp	r2, r1
 8010a06:	d10c      	bne.n	8010a22 <scalbn+0x5a>
 8010a08:	ee10 2a10 	vmov	r2, s0
 8010a0c:	4620      	mov	r0, r4
 8010a0e:	4629      	mov	r1, r5
 8010a10:	f7ef fc64 	bl	80002dc <__adddf3>
 8010a14:	4604      	mov	r4, r0
 8010a16:	460d      	mov	r5, r1
 8010a18:	e019      	b.n	8010a4e <scalbn+0x86>
 8010a1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010a1e:	460b      	mov	r3, r1
 8010a20:	3a36      	subs	r2, #54	; 0x36
 8010a22:	4432      	add	r2, r6
 8010a24:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010a28:	428a      	cmp	r2, r1
 8010a2a:	dd08      	ble.n	8010a3e <scalbn+0x76>
 8010a2c:	2d00      	cmp	r5, #0
 8010a2e:	a120      	add	r1, pc, #128	; (adr r1, 8010ab0 <scalbn+0xe8>)
 8010a30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a34:	da1c      	bge.n	8010a70 <scalbn+0xa8>
 8010a36:	a120      	add	r1, pc, #128	; (adr r1, 8010ab8 <scalbn+0xf0>)
 8010a38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a3c:	e018      	b.n	8010a70 <scalbn+0xa8>
 8010a3e:	2a00      	cmp	r2, #0
 8010a40:	dd08      	ble.n	8010a54 <scalbn+0x8c>
 8010a42:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010a46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010a4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010a4e:	ec45 4b10 	vmov	d0, r4, r5
 8010a52:	bd70      	pop	{r4, r5, r6, pc}
 8010a54:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010a58:	da19      	bge.n	8010a8e <scalbn+0xc6>
 8010a5a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010a5e:	429e      	cmp	r6, r3
 8010a60:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8010a64:	dd0a      	ble.n	8010a7c <scalbn+0xb4>
 8010a66:	a112      	add	r1, pc, #72	; (adr r1, 8010ab0 <scalbn+0xe8>)
 8010a68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d1e2      	bne.n	8010a36 <scalbn+0x6e>
 8010a70:	a30f      	add	r3, pc, #60	; (adr r3, 8010ab0 <scalbn+0xe8>)
 8010a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a76:	f7ef fde7 	bl	8000648 <__aeabi_dmul>
 8010a7a:	e7cb      	b.n	8010a14 <scalbn+0x4c>
 8010a7c:	a10a      	add	r1, pc, #40	; (adr r1, 8010aa8 <scalbn+0xe0>)
 8010a7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d0b8      	beq.n	80109f8 <scalbn+0x30>
 8010a86:	a10e      	add	r1, pc, #56	; (adr r1, 8010ac0 <scalbn+0xf8>)
 8010a88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a8c:	e7b4      	b.n	80109f8 <scalbn+0x30>
 8010a8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010a92:	3236      	adds	r2, #54	; 0x36
 8010a94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010a98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010a9c:	4620      	mov	r0, r4
 8010a9e:	4b0c      	ldr	r3, [pc, #48]	; (8010ad0 <scalbn+0x108>)
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	e7e8      	b.n	8010a76 <scalbn+0xae>
 8010aa4:	f3af 8000 	nop.w
 8010aa8:	c2f8f359 	.word	0xc2f8f359
 8010aac:	01a56e1f 	.word	0x01a56e1f
 8010ab0:	8800759c 	.word	0x8800759c
 8010ab4:	7e37e43c 	.word	0x7e37e43c
 8010ab8:	8800759c 	.word	0x8800759c
 8010abc:	fe37e43c 	.word	0xfe37e43c
 8010ac0:	c2f8f359 	.word	0xc2f8f359
 8010ac4:	81a56e1f 	.word	0x81a56e1f
 8010ac8:	43500000 	.word	0x43500000
 8010acc:	ffff3cb0 	.word	0xffff3cb0
 8010ad0:	3c900000 	.word	0x3c900000

08010ad4 <atanf>:
 8010ad4:	b538      	push	{r3, r4, r5, lr}
 8010ad6:	ee10 5a10 	vmov	r5, s0
 8010ada:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010ade:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8010ae2:	eef0 7a40 	vmov.f32	s15, s0
 8010ae6:	db10      	blt.n	8010b0a <atanf+0x36>
 8010ae8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8010aec:	dd04      	ble.n	8010af8 <atanf+0x24>
 8010aee:	ee70 7a00 	vadd.f32	s15, s0, s0
 8010af2:	eeb0 0a67 	vmov.f32	s0, s15
 8010af6:	bd38      	pop	{r3, r4, r5, pc}
 8010af8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8010c30 <atanf+0x15c>
 8010afc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8010c34 <atanf+0x160>
 8010b00:	2d00      	cmp	r5, #0
 8010b02:	bfd8      	it	le
 8010b04:	eef0 7a40 	vmovle.f32	s15, s0
 8010b08:	e7f3      	b.n	8010af2 <atanf+0x1e>
 8010b0a:	4b4b      	ldr	r3, [pc, #300]	; (8010c38 <atanf+0x164>)
 8010b0c:	429c      	cmp	r4, r3
 8010b0e:	dc10      	bgt.n	8010b32 <atanf+0x5e>
 8010b10:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8010b14:	da0a      	bge.n	8010b2c <atanf+0x58>
 8010b16:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8010c3c <atanf+0x168>
 8010b1a:	ee30 7a07 	vadd.f32	s14, s0, s14
 8010b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010b22:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b2a:	dce2      	bgt.n	8010af2 <atanf+0x1e>
 8010b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8010b30:	e013      	b.n	8010b5a <atanf+0x86>
 8010b32:	f000 f8a3 	bl	8010c7c <fabsf>
 8010b36:	4b42      	ldr	r3, [pc, #264]	; (8010c40 <atanf+0x16c>)
 8010b38:	429c      	cmp	r4, r3
 8010b3a:	dc4f      	bgt.n	8010bdc <atanf+0x108>
 8010b3c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8010b40:	429c      	cmp	r4, r3
 8010b42:	dc41      	bgt.n	8010bc8 <atanf+0xf4>
 8010b44:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8010b48:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010b4c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010b50:	2300      	movs	r3, #0
 8010b52:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010b56:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010b5a:	1c5a      	adds	r2, r3, #1
 8010b5c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8010b60:	eddf 5a38 	vldr	s11, [pc, #224]	; 8010c44 <atanf+0x170>
 8010b64:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8010c48 <atanf+0x174>
 8010b68:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8010c4c <atanf+0x178>
 8010b6c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8010c50 <atanf+0x17c>
 8010b70:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8010b74:	eea7 6a25 	vfma.f32	s12, s14, s11
 8010b78:	eddf 5a36 	vldr	s11, [pc, #216]	; 8010c54 <atanf+0x180>
 8010b7c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8010b80:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8010c58 <atanf+0x184>
 8010b84:	eea5 6a87 	vfma.f32	s12, s11, s14
 8010b88:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010c5c <atanf+0x188>
 8010b8c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8010b90:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8010c60 <atanf+0x18c>
 8010b94:	eea5 6a87 	vfma.f32	s12, s11, s14
 8010b98:	eddf 5a32 	vldr	s11, [pc, #200]	; 8010c64 <atanf+0x190>
 8010b9c:	eee7 5a05 	vfma.f32	s11, s14, s10
 8010ba0:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8010c68 <atanf+0x194>
 8010ba4:	eea5 5a87 	vfma.f32	s10, s11, s14
 8010ba8:	eddf 5a30 	vldr	s11, [pc, #192]	; 8010c6c <atanf+0x198>
 8010bac:	eee5 5a07 	vfma.f32	s11, s10, s14
 8010bb0:	eea5 0a87 	vfma.f32	s0, s11, s14
 8010bb4:	ee20 0a07 	vmul.f32	s0, s0, s14
 8010bb8:	eea6 0a26 	vfma.f32	s0, s12, s13
 8010bbc:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010bc0:	d121      	bne.n	8010c06 <atanf+0x132>
 8010bc2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010bc6:	e794      	b.n	8010af2 <atanf+0x1e>
 8010bc8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010bcc:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010bd0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010bd4:	2301      	movs	r3, #1
 8010bd6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010bda:	e7be      	b.n	8010b5a <atanf+0x86>
 8010bdc:	4b24      	ldr	r3, [pc, #144]	; (8010c70 <atanf+0x19c>)
 8010bde:	429c      	cmp	r4, r3
 8010be0:	dc0b      	bgt.n	8010bfa <atanf+0x126>
 8010be2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8010be6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010bea:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010bee:	2302      	movs	r3, #2
 8010bf0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010bf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010bf8:	e7af      	b.n	8010b5a <atanf+0x86>
 8010bfa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010bfe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010c02:	2303      	movs	r3, #3
 8010c04:	e7a9      	b.n	8010b5a <atanf+0x86>
 8010c06:	4a1b      	ldr	r2, [pc, #108]	; (8010c74 <atanf+0x1a0>)
 8010c08:	491b      	ldr	r1, [pc, #108]	; (8010c78 <atanf+0x1a4>)
 8010c0a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010c0e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010c12:	ed93 7a00 	vldr	s14, [r3]
 8010c16:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010c1a:	2d00      	cmp	r5, #0
 8010c1c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010c20:	ed92 0a00 	vldr	s0, [r2]
 8010c24:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010c28:	bfb8      	it	lt
 8010c2a:	eef1 7a67 	vneglt.f32	s15, s15
 8010c2e:	e760      	b.n	8010af2 <atanf+0x1e>
 8010c30:	3fc90fdb 	.word	0x3fc90fdb
 8010c34:	bfc90fdb 	.word	0xbfc90fdb
 8010c38:	3edfffff 	.word	0x3edfffff
 8010c3c:	7149f2ca 	.word	0x7149f2ca
 8010c40:	3f97ffff 	.word	0x3f97ffff
 8010c44:	3c8569d7 	.word	0x3c8569d7
 8010c48:	3d4bda59 	.word	0x3d4bda59
 8010c4c:	bd15a221 	.word	0xbd15a221
 8010c50:	be4ccccd 	.word	0xbe4ccccd
 8010c54:	3d886b35 	.word	0x3d886b35
 8010c58:	3dba2e6e 	.word	0x3dba2e6e
 8010c5c:	3e124925 	.word	0x3e124925
 8010c60:	3eaaaaab 	.word	0x3eaaaaab
 8010c64:	bd6ef16b 	.word	0xbd6ef16b
 8010c68:	bd9d8795 	.word	0xbd9d8795
 8010c6c:	bde38e38 	.word	0xbde38e38
 8010c70:	401bffff 	.word	0x401bffff
 8010c74:	08011460 	.word	0x08011460
 8010c78:	08011470 	.word	0x08011470

08010c7c <fabsf>:
 8010c7c:	ee10 3a10 	vmov	r3, s0
 8010c80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010c84:	ee00 3a10 	vmov	s0, r3
 8010c88:	4770      	bx	lr

08010c8a <finitef>:
 8010c8a:	b082      	sub	sp, #8
 8010c8c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8010c90:	9801      	ldr	r0, [sp, #4]
 8010c92:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010c96:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8010c9a:	bfac      	ite	ge
 8010c9c:	2000      	movge	r0, #0
 8010c9e:	2001      	movlt	r0, #1
 8010ca0:	b002      	add	sp, #8
 8010ca2:	4770      	bx	lr

08010ca4 <nanf>:
 8010ca4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010cac <nanf+0x8>
 8010ca8:	4770      	bx	lr
 8010caa:	bf00      	nop
 8010cac:	7fc00000 	.word	0x7fc00000

08010cb0 <rintf>:
 8010cb0:	ee10 2a10 	vmov	r2, s0
 8010cb4:	b513      	push	{r0, r1, r4, lr}
 8010cb6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8010cba:	397f      	subs	r1, #127	; 0x7f
 8010cbc:	2916      	cmp	r1, #22
 8010cbe:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8010cc2:	dc47      	bgt.n	8010d54 <rintf+0xa4>
 8010cc4:	b32b      	cbz	r3, 8010d12 <rintf+0x62>
 8010cc6:	2900      	cmp	r1, #0
 8010cc8:	ee10 3a10 	vmov	r3, s0
 8010ccc:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8010cd0:	da21      	bge.n	8010d16 <rintf+0x66>
 8010cd2:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8010cd6:	425b      	negs	r3, r3
 8010cd8:	4921      	ldr	r1, [pc, #132]	; (8010d60 <rintf+0xb0>)
 8010cda:	0a5b      	lsrs	r3, r3, #9
 8010cdc:	0d12      	lsrs	r2, r2, #20
 8010cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010ce2:	0512      	lsls	r2, r2, #20
 8010ce4:	4313      	orrs	r3, r2
 8010ce6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8010cea:	ee07 3a90 	vmov	s15, r3
 8010cee:	edd1 6a00 	vldr	s13, [r1]
 8010cf2:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8010cf6:	ed8d 7a01 	vstr	s14, [sp, #4]
 8010cfa:	eddd 7a01 	vldr	s15, [sp, #4]
 8010cfe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010d02:	ee17 3a90 	vmov	r3, s15
 8010d06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010d0a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8010d0e:	ee00 3a10 	vmov	s0, r3
 8010d12:	b002      	add	sp, #8
 8010d14:	bd10      	pop	{r4, pc}
 8010d16:	4a13      	ldr	r2, [pc, #76]	; (8010d64 <rintf+0xb4>)
 8010d18:	410a      	asrs	r2, r1
 8010d1a:	4213      	tst	r3, r2
 8010d1c:	d0f9      	beq.n	8010d12 <rintf+0x62>
 8010d1e:	0854      	lsrs	r4, r2, #1
 8010d20:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8010d24:	d006      	beq.n	8010d34 <rintf+0x84>
 8010d26:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010d2a:	ea23 0304 	bic.w	r3, r3, r4
 8010d2e:	fa42 f101 	asr.w	r1, r2, r1
 8010d32:	430b      	orrs	r3, r1
 8010d34:	4a0a      	ldr	r2, [pc, #40]	; (8010d60 <rintf+0xb0>)
 8010d36:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8010d3a:	ed90 7a00 	vldr	s14, [r0]
 8010d3e:	ee07 3a90 	vmov	s15, r3
 8010d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d46:	edcd 7a01 	vstr	s15, [sp, #4]
 8010d4a:	ed9d 0a01 	vldr	s0, [sp, #4]
 8010d4e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010d52:	e7de      	b.n	8010d12 <rintf+0x62>
 8010d54:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010d58:	d3db      	bcc.n	8010d12 <rintf+0x62>
 8010d5a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010d5e:	e7d8      	b.n	8010d12 <rintf+0x62>
 8010d60:	08011480 	.word	0x08011480
 8010d64:	007fffff 	.word	0x007fffff

08010d68 <scalbnf>:
 8010d68:	ee10 3a10 	vmov	r3, s0
 8010d6c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8010d70:	d025      	beq.n	8010dbe <scalbnf+0x56>
 8010d72:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8010d76:	d302      	bcc.n	8010d7e <scalbnf+0x16>
 8010d78:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010d7c:	4770      	bx	lr
 8010d7e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8010d82:	d122      	bne.n	8010dca <scalbnf+0x62>
 8010d84:	4b2a      	ldr	r3, [pc, #168]	; (8010e30 <scalbnf+0xc8>)
 8010d86:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8010e34 <scalbnf+0xcc>
 8010d8a:	4298      	cmp	r0, r3
 8010d8c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010d90:	db16      	blt.n	8010dc0 <scalbnf+0x58>
 8010d92:	ee10 3a10 	vmov	r3, s0
 8010d96:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010d9a:	3a19      	subs	r2, #25
 8010d9c:	4402      	add	r2, r0
 8010d9e:	2afe      	cmp	r2, #254	; 0xfe
 8010da0:	dd15      	ble.n	8010dce <scalbnf+0x66>
 8010da2:	ee10 3a10 	vmov	r3, s0
 8010da6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8010e38 <scalbnf+0xd0>
 8010daa:	eddf 6a24 	vldr	s13, [pc, #144]	; 8010e3c <scalbnf+0xd4>
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	eeb0 7a67 	vmov.f32	s14, s15
 8010db4:	bfb8      	it	lt
 8010db6:	eef0 7a66 	vmovlt.f32	s15, s13
 8010dba:	ee27 0a27 	vmul.f32	s0, s14, s15
 8010dbe:	4770      	bx	lr
 8010dc0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8010e40 <scalbnf+0xd8>
 8010dc4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010dc8:	4770      	bx	lr
 8010dca:	0dd2      	lsrs	r2, r2, #23
 8010dcc:	e7e6      	b.n	8010d9c <scalbnf+0x34>
 8010dce:	2a00      	cmp	r2, #0
 8010dd0:	dd06      	ble.n	8010de0 <scalbnf+0x78>
 8010dd2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010dd6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8010dda:	ee00 3a10 	vmov	s0, r3
 8010dde:	4770      	bx	lr
 8010de0:	f112 0f16 	cmn.w	r2, #22
 8010de4:	da1a      	bge.n	8010e1c <scalbnf+0xb4>
 8010de6:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010dea:	4298      	cmp	r0, r3
 8010dec:	ee10 3a10 	vmov	r3, s0
 8010df0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010df4:	dd0a      	ble.n	8010e0c <scalbnf+0xa4>
 8010df6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8010e38 <scalbnf+0xd0>
 8010dfa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8010e3c <scalbnf+0xd4>
 8010dfe:	eef0 7a40 	vmov.f32	s15, s0
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	bf18      	it	ne
 8010e06:	eeb0 0a47 	vmovne.f32	s0, s14
 8010e0a:	e7db      	b.n	8010dc4 <scalbnf+0x5c>
 8010e0c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8010e40 <scalbnf+0xd8>
 8010e10:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8010e44 <scalbnf+0xdc>
 8010e14:	eef0 7a40 	vmov.f32	s15, s0
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	e7f3      	b.n	8010e04 <scalbnf+0x9c>
 8010e1c:	3219      	adds	r2, #25
 8010e1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010e22:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8010e26:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010e48 <scalbnf+0xe0>
 8010e2a:	ee07 3a10 	vmov	s14, r3
 8010e2e:	e7c4      	b.n	8010dba <scalbnf+0x52>
 8010e30:	ffff3cb0 	.word	0xffff3cb0
 8010e34:	4c000000 	.word	0x4c000000
 8010e38:	7149f2ca 	.word	0x7149f2ca
 8010e3c:	f149f2ca 	.word	0xf149f2ca
 8010e40:	0da24260 	.word	0x0da24260
 8010e44:	8da24260 	.word	0x8da24260
 8010e48:	33000000 	.word	0x33000000

08010e4c <_init>:
 8010e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e4e:	bf00      	nop
 8010e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e52:	bc08      	pop	{r3}
 8010e54:	469e      	mov	lr, r3
 8010e56:	4770      	bx	lr

08010e58 <_fini>:
 8010e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e5a:	bf00      	nop
 8010e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e5e:	bc08      	pop	{r3}
 8010e60:	469e      	mov	lr, r3
 8010e62:	4770      	bx	lr
